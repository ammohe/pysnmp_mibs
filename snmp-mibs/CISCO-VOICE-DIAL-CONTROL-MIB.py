# PySNMP SMI module. Autogenerated from smidump -f python CISCO-VOICE-DIAL-CONTROL-MIB
# by libsmi2pysnmp-0.1.3 at Fri Aug  1 22:00:19 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( cCallHistoryCallOrigin, cCallHistoryIndex, ) = mibBuilder.importSymbols("CISCO-DIAL-CONTROL-MIB", "cCallHistoryCallOrigin", "cCallHistoryIndex")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( CvcCallReferenceIdOrZero, CvcCoderTypeRate, CvcFaxTransmitRate, CvcGUid, CvcInBandSignaling, CvcSpeechCoderRate, cvCommonDcCallHistoryCoderTypeRate, ) = mibBuilder.importSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "CvcCallReferenceIdOrZero", "CvcCoderTypeRate", "CvcFaxTransmitRate", "CvcGUid", "CvcInBandSignaling", "CvcSpeechCoderRate", "cvCommonDcCallHistoryCoderTypeRate")
( DnisMapname, ) = mibBuilder.importSymbols("CISCO-VOICE-DNIS-MIB", "DnisMapname")
( AbsoluteCounter32, callActiveIndex, callActivePeerAddress, callActivePeerId, callActiveSetupTime, ) = mibBuilder.importSymbols("DIAL-CONTROL-MIB", "AbsoluteCounter32", "callActiveIndex", "callActivePeerAddress", "callActivePeerId", "callActiveSetupTime")
( InterfaceIndexOrZero, ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
( InetAddress, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
( QosService, ) = mibBuilder.importSymbols("INT-SERV-MIB", "QosService")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Gauge32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DateAndTime, DisplayString, PhysAddress, RowStatus, TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "PhysAddress", "RowStatus", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class CvAmrNbBitRateMode(Bits):
    namedValues = NamedValues(("amrBitRateMode0", 0), ("amrBitRateMode1", 1), ("amrBitRateMode2", 2), ("amrBitRateMode3", 3), ("amrBitRateMode4", 4), ("amrBitRateMode5", 5), ("amrBitRateMode6", 6), ("amrBitRateMode7", 7), )
    
class CvAmrNbRtpEncap(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,)
    namedValues = NamedValues(("rfc3267", 1), )
    
class CvCallConnectionType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(7,2,6,5,4,3,1,)
    namedValues = NamedValues(("h323", 1), ("sip", 2), ("mgcp", 3), ("sccp", 4), ("multicast", 5), ("cacontrol", 6), ("telephony", 7), )
    
class CvCallVolumeStatsIntvlType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,3,1,)
    namedValues = NamedValues(("secondStats", 1), ("minuteStats", 2), ("hourStats", 3), )
    
class CvCallVolumeWMIntvlType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,3,4,)
    namedValues = NamedValues(("secondStats", 1), ("minuteStats", 2), ("hourStats", 3), ("fromReloadStats", 4), )
    
class CvCasGroup(TextualConvention, Integer32):
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(-1,30)
    
class CvIlbcFrameMode(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(30,20,)
    namedValues = NamedValues(("frameMode20", 20), ("frameMode30", 30), )
    
class CvSessionProtocol(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,5,6,3,4,)
    namedValues = NamedValues(("other", 1), ("cisco", 2), ("sdp", 3), ("sip", 4), ("multicast", 5), ("sccp", 6), )
    

# Objects

ciscoVoiceDialControlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 63)).setRevisions(("2012-05-15 00:00","2011-07-11 00:00","2011-05-31 00:00","2010-07-26 00:00","2009-05-07 00:00","2009-04-20 00:00","2009-01-12 00:00","2006-03-12 00:00","2005-09-29 00:00","2005-07-25 00:00","2005-03-02 00:00","2005-03-01 00:00","2004-04-30 00:00","2004-04-16 00:00","2004-03-09 00:00","2004-01-20 00:00","2003-06-26 00:00","2003-04-14 00:00","2002-12-31 00:00","2002-12-02 00:00","2002-10-31 00:00","2002-07-12 00:00","2001-08-20 00:00","2001-07-02 00:00","2001-04-10 00:00","2001-03-25 00:00","2000-05-04 00:00","2000-04-19 00:00","2000-03-13 00:00","1999-06-28 00:00","1999-01-29 00:00","1998-09-11 00:00","1998-02-22 00:00",))
if mibBuilder.loadTexts: ciscoVoiceDialControlMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoVoiceDialControlMIB.setContactInfo("Cisco Systems\nCustomer Service\n\nPostal: 170 W. Tasman Drive\nSan Jose, CA  95134\nUSA\n\nTel: +1 800 553-NETS\n\nE-mail: cs-voice@cisco.com")
if mibBuilder.loadTexts: ciscoVoiceDialControlMIB.setDescription("This MIB module enhances the IETF Dial Control MIB\n(RFC2128) by providing management of voice telephony\npeers on both a circuit-switched telephony network,\nand an IP data network.\n\n*** ABBREVIATIONS, ACRONYMS AND SYMBOLS ***\n\nGSM    - Global System for Mobile Communication\n\nAMR-NB - Adaptive Multi Rate - Narrow Band \n\niLBC   - internet Low Bitrate Codec \n\nKPML   - Key Press Markup Language\n\nMGCP   - Media Gateway Control Protocol.\n\nSIP    - Session Initiation Protocol.\n\nH323   - One of the voip signalling protocol.\n\nSCCP   - Skinny Client Control Protocol.\n\ndialpeer - This represents a configured interface that \n           carries the dial map.  A dialpeer maps the \n           called and calling numbers with the port or \n           IP interface to be used.\n\nLicense call capacity - This represents the licensed \n                        maximum call capacity of \n                        the gateway.\n\niSAC    -  Internet Speech Audio Codec\n\nRPH    - Resource Priority Header\n\nDSCP   - Diffserv Code Points")
cvdcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1))
cvGeneralConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 1))
cvGeneralPoorQoVNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvGeneralPoorQoVNotificationEnable.setDescription("This object indicates whether cvdcPoorQoVNotification (or\nthe newer cvdcPoorQoVNotificationRev1) traps should be\ngenerated for a poor quality of voice calls.\n\nIf the value of this object is 'true',\ncvdcPoorQoVNotification (or the newer\ncvdcPoorQoVNotificationRev1) traps will be generated\nfor all voice over IP peers when a poor quality of voice\ncall condition is detected after the voice gateway call\ndisconnection.  If the value of this object is 'false',\ncvdcPoorQoVNotification (or the newer\ncvdcPoorQoVNotificationRev1) traps will be generated only\nfor calls for which the\ncvVoIPPeerCfgPoorQoVNotificationEnable object of voice\nover IP peers having set to 'true'.")
cvGeneralFallbackNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvGeneralFallbackNotificationEnable.setDescription("This object indicates whether cvdcFallbackNotification\ntraps should be generated for fallback.\nIf the value of this object is 'true',\ncvdcFallbackNotification traps will be generated\nfor all voice over IP peers.")
cvGeneralDSCPPolicyNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvGeneralDSCPPolicyNotificationEnable.setDescription("This object indicates whether cvdcPolicyViolationNotification\ntraps should be generated for a RPH to DSCP mapping violation\nfor SIP voice calls.\n\nIf the value of this object is 'true',\ncvdcPolicyViolationNotification traps will be generated for SIP\nvoice over IP peers when a RPH to DSCP violation condition is\ndetected .  If the value of this object is 'false',\ncvdcPolicyViolationNotification traps will be generated only\nfor calls for which the \ncvVoIPPeerCfgDSCPPolicyNotificationEnable object of voice\nover IP peers having set to 'true'.")
cvGeneralMediaPolicyNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvGeneralMediaPolicyNotificationEnable.setDescription("This object indicates whether cvdcPolicyViolationNotification\ntraps should be generated for Media violation\nfor SIP voice calls.\n\nIf the value of this object is 'true',\ncvdcPolicyViolationNotification traps will be generated for SIP\nvoice over IP peers when media violation condition is\ndetected .  If the value of this object is 'false',\ncvdcPolicyViolationNotification traps will be generated only\nfor calls for which the \ncvVoIPPeerCfgMediaPolicyNotificationEnable object of voice\nover IP peers having set to 'true'.")
cvPeer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2))
cvPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1))
if mibBuilder.loadTexts: cvPeerCfgTable.setDescription("The table contains the Voice Generic Peer information that\nis used to create an ifIndexed row with an appropriate\nifType that is associated with the cvPeerCfgType and\ncvPeerCfgPeerType objects.")
cvPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1, 1)).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIndex"))
if mibBuilder.loadTexts: cvPeerCfgEntry.setDescription("A single voice generic Peer. The creation of this\nentry will create an associated ifEntry with an ifType\nthat is associated with cvPeerCfgType, i.e., for\n'voiceEncap' encapsulation, an ifEntry will contain an\nifType voiceEncap(103); for 'voiceOverIp' encapsulation,\nan ifEntry will contain an ifType voiceOverIp(104). The\nifAdminStatus of the newly created ifEntry is set to 'up'\nand ifOperStatus is set to 'down'. In addition, an\nassociated voiceEncap/voiceOverIp Peer configuration\nentry is created after the successful ifEntry creation.\nThen ifIndex of the newly created ifEntry must be used by\nthe network manager to create a peer configuration entry\nof IETF Dial Control MIB (Refer to RFC 2128 section\n2.2.3.1 and the description of dialCtlPeerCfgEntry for the\ndetailed information).\nIn summary, the voice dial peer creation steps are as\nfollows:\n[1] create this entry (voice/data generic peer entry).\n[2] read the cvPeerCfgIfIndex of this entry for the\n    ifIndex of newly created voice/data generic peer.\n[3] create the dialCtlPeerCfgEntry of RFC 2128 with the\n    indices of dialCtlPeerCfgId and the ifIndex of newly\n    created voice generic peer.\n\nFor each VoIP peer, it uses IP address and UDP port with\nRTP protocol to transfer voice packet. Therefore, it does\nnot have its lower layer interface. The\ndialCtlPeerCfgIfType object of IETF Dial Control MIB must\nset to 'other' and the dialCtlPeerCfgLowerIf must set to\n'0'.\n\nAfter the successful creation of peer configuration entry\nof IETF Dial Control MIB, the dial plan software in\nmanaged device will set the ifOperStatus of the newly\ncreated voiceEncap/voiceOverIp ifEntry to 'up' for\nenabling the peer function if the peer configuration is\ncompleted.\nWhen this entry is deleted, its associated ifEntry,\nvoiceEncap/voiceOverIp specific peer entry and the peer\nentry of IETF Dial Control MIB are deleted.")
cvPeerCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvPeerCfgIndex.setDescription("An arbitrary index that uniquely identifies a generic\nvoice peer.")
cvPeerCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvPeerCfgIfIndex.setDescription("The ifIndex of the peer associated ifEntry. The ifIndex\nappears after the associated ifEntry is created\nsuccessfully.\nThis ifIndex will be used to access the objects in the\nVoice over Telephony or Voice over IP peer specific table.\nIn addition, the ifIndex is also used to access the\nassociated peer configuration entry of the IETF Dial\nControl MIB. If the peer associated ifEntry had not been\ncreated, then this object has a value of zero.")
cvPeerCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(5,4,1,2,3,)).subtype(namedValues=NamedValues(("voice", 1), ("voip", 2), ("mmail", 3), ("voatm", 4), ("vofr", 5), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvPeerCfgType.setDescription("Specifies the type of voice related encapsulation.\nvoice - voice encapsulation (voiceEncap ifType) on the\n        telephony network.\nvoip  - VoIP encapsulation (voiceOverIp ifType) on the IP\n        network.\nmmail - Media Mail over IP encapsulation (mediaMailOverIp\n        ifType) on the IP network.\nvoatm - VoATM encapsulation (voiceOverATM ifType) on the\n        ATM network.\nvofr  - VoFR encapsulation (voiceOverFR ifType) on the\n        Frame Relay network.")
cvPeerCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvPeerCfgRowStatus.setDescription("This object is used to create a new row or modify or\ndelete an existing row in this table.")
cvPeerCfgPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("voice", 1), ("data", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvPeerCfgPeerType.setDescription("Specifies the type of a peer.\nvoice - peer in voice type to be defined in a voice\n        gateway for voice calls. \ndata  - peer in data type to be defined in gateway\n        that supports universal ports for modem/data\n        calls and integrated ports for data calls.")
cvVoicePeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2))
if mibBuilder.loadTexts: cvVoicePeerCfgTable.setDescription("The table contains the Voice over Telephony peer specific\ninformation that is required to accept voice calls or to\nwhich it will place them or perform various loopback tests\nvia interface.")
cvVoicePeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvVoicePeerCfgEntry.setDescription("A single Voice specific Peer. One entry per voice\nencapsulation.\nThe entry is created when its associated 'voiceEncap(103)'\nencapsulation ifEntry is created.\nThis entry is deleted when its associated ifEntry is\ndeleted.")
cvVoicePeerCfgSessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgSessionTarget.setDescription("The object specifies the session target of the peer.\nSession Targets definitions:\nThe session target has the syntax used by the IETF service\nlocation protocol. The syntax is as follows:\n\nmapping-type:type-specific-syntax\n\nthe mapping-type specifies a scheme for mapping the\nmatching dial string to a session target.\n\nThe valid Mapping type definitions for the peer are as\nfollows:\nloopback - Syntax: loopback:where\n   'where' string is defined as follows:\n   compressed - loopback is performed on compressed voice\n                as close to the CODEC which processes the\n                data as possible.\n   uncompressed - loopback is performed on the PCM or\n                analog voice as close to the telephony\n                endpoint as possible.\n\nLocal loopback case:\nuncompressed - the PCM voice coming into the DSP is simply\n    turned around and sent back out, allowing testing of\n    the transmit--> receive paths in the telephony\n    endpoint.\ncompressed - the compressed voice coming out of the CODEC is\n    turned around on the DSP module and fed back into the\n    decompressor through the jitter buffer. In addition to\n    the telephony endpoint, this tests both the encode and\n    decode paths without involving data paths or packet\n    handling on the host router.\n\nRemote loopback case:\ncompressed - RTP packets received from the network are\n    decapsulated and passed to the DSP board. Instead of\n    feeding these into the CODEC for decompression, they\n    are immediately sent back to the session application\n    as if they had originated locally and been compressed.\nuncompressed - In addition to the above, the voice samples\n    are sent all the way through the CODEC and then turned\n    around instead of being sent to the telephony\n    endpoint")
cvVoicePeerCfgDialDigitsPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgDialDigitsPrefix.setDescription("The object specifies the prefix of the dial digits for the\npeer. The dial digits prefix is sent to telephony\ninterface before the real phone number when the system\nplaces the outgoing call to the voice encapsulation peer\nover telephony interface.")
cvVoicePeerCfgDIDCallEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgDIDCallEnable.setDescription("The object enables/disables the DID call treatment for\nincoming DNIS digits.\ntrue  - treat the incoming DNIS digits as if the digits\n        are received from DID trunk.\nfalse - Disable DID call treatment for incoming DNIS\n        digits.")
cvVoicePeerCfgCasGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 4), CvCasGroup().clone('-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgCasGroup.setDescription("The object specifies the CAS group number of a CAS\ncapable T1/E1  that is in the dialCtlPeerCfgLowerIf object\nof RFC2128.\nThis object can be set to a valid CAS group number only if\nthe dialCtlPeerCfgLowerIf contains a valid ifIndex for a\nCAS capable T1/E1. The object must set to -1 before the\nvalue of the  dialCtlPeerCfgLowerIf object of RFC2128 can\nbe changed.")
cvVoicePeerCfgRegisterE164 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgRegisterE164.setDescription("This object specifies that the E.164 number specified in\nthe dialCtlPeerCfgOriginateAddress field of the associated\ndialCtlPeerCfgTable entry be registered as an extension \nphone number of this gateway for H323 gatekeeper and/or \nSIP registrar.")
cvVoicePeerCfgForwardDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-3, 32)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgForwardDigits.setDescription("This object specifies the number of dialed digits to\nforward to the remote destination in the setup message.\nThe object can take the value:\n    0-32 number of right justified digits to forward\n    -1 default\n    -2 forward extra digits i.e those over and above\n       those needed to match to the destination pattern\n    -3 forward all digits")
cvVoicePeerCfgEchoCancellerTest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(5,4,1,10,12,2,13,9,3,11,7,8,6,)).subtype(namedValues=NamedValues(("echoCancellerTestNone", 1), ("echoCancellerG168Test6", 10), ("echoCancellerG168Test9", 11), ("echoCancellerG168Test5", 12), ("echoCancellerG168Test7", 13), ("echoCancellerG168Test2A", 2), ("echoCancellerG168Test2B", 3), ("echoCancellerG168Test2Ca", 4), ("echoCancellerG168Test2Cb", 5), ("echoCancellerG168Test3A", 6), ("echoCancellerG168Test3B", 7), ("echoCancellerG168Test3C", 8), ("echoCancellerG168Test4", 9), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoicePeerCfgEchoCancellerTest.setDescription("This object specifies which, if any, test to run in the\necho canceller when a call from the network is connected.\nechoCancellerTestNone    - do not run a test.\nechoCancellerG168Test2A  - run ITU-T G.168 Test 2A.\nechoCancellerG168Test2B  - run ITU-T G.168 Test 2B.\nechoCancellerG168Test2Ca - run ITU-T G.168 Test 2C(a).\nechoCancellerG168Test2Cb - run ITU-T G.168 Test 2C(b).\nechoCancellerG168Test3A  - run ITU-T G.168 Test 3A.\nechoCancellerG168Test3B  - run ITU-T G.168 Test 3B.\nechoCancellerG168Test3C  - run ITU-T G.168 Test 3C.\nechoCancellerG168Test4   - run ITU-T G.168 Test 4.\nechoCancellerG168Test5   - run ITU-T G.168 Test 5.\nechoCancellerG168Test6   - run ITU-T G.168 Test 6.\nechoCancellerG168Test7   - run ITU-T G.168 Test 7.\nechoCancellerG168Test9   - run ITU-T G.168 Test 9.")
cvVoIPPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3))
if mibBuilder.loadTexts: cvVoIPPeerCfgTable.setDescription("The table contains the Voice over IP (VoIP) peer specific\ninformation that is required to accept voice calls or to\nwhich it will place them via IP backbone with the\nspecified session protocol in cvVoIPPeerCfgSessionProtocol.")
cvVoIPPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvVoIPPeerCfgEntry.setDescription("A single VoIP specific Peer. One entry per VoIP\nencapsulation.\nThe entry is created when its associated 'voiceOverIp(104)'\nencapsulation ifEntry is created.\nThis entry is deleted when its associated ifEntry is\ndeleted.")
cvVoIPPeerCfgSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 1), CvSessionProtocol().clone('cisco')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgSessionProtocol.setDescription("The object specifies the session protocol to be used\nfor Internet call between local and remote router via\nIP backbone.")
cvVoIPPeerCfgDesiredQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 2), QosService().clone('bestEffort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgDesiredQoS.setDescription("The object specifies the user requested Quality of Service\nfor the call.")
cvVoIPPeerCfgMinAcceptableQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 3), QosService().clone('bestEffort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgMinAcceptableQoS.setDescription("The object specifies the minimally acceptable Quality of\nService for the call.")
cvVoIPPeerCfgSessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 4), DisplayString().clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgSessionTarget.setDescription("The object specifies the session target of the peer.\nSession Targets definitions:\nThe session target has the syntax used by the IETF service\nlocation protocol. The syntax is as follows:\n\nmapping-type:type-specific-syntax\n\nthe mapping-type specifies a scheme for mapping the\nmatching dial string to a session target. The\ntype-specific-syntax is exactly that, something that the\nparticular mapping scheme can understand.\nFor example,\nSession target           Meaning\nipv4:171.68.13.55:1006   The session target is the IP\n                         version 4 address of 171.68.13.55\n                         and port 1006.\ndns:pots.cisco.com:1661  The session target is the IP host\n                         with dns name pots.cisco.com, and\n                         port 1661.\nras                      The session target is the\n                         gatekeeper with RAS (Registration\n                         , Admission,  Status protocol).\nsettlement               The session target is the\n                         settlement server.\nenum:1                   The session target is the enum \n                         profile match table 1.\n\nThe valid Mapping type definitions for the peer are as\nfollows:\nipv4       - Syntax: ipv4:w.x.y.z:port or  ipv4:w.x.y.z\ndns        - Syntax: dns:host.domain:port or\n                     dns:host.domain\nras        - Syntax: ras\nsettlement - Syntax: settlement\nenum       - Syntax: enum:\n\nloopback - Syntax: loopback:where\n   'where' string is defined as follows:\n   rtp - loopback is performed at the transport protocol\n         level.\n\nLocal loopback case:\nrtp - the session application sets up an RTP stream to\n    itself (i.e. actually allocates a port pair and opens\n    the appropriate UDP sockets). It then does the full\n    RTP encapsulation, sends the packets to the loopback\n    IP address, receives the RTP packets, and hands the\n    compressed voice back to the CODEC. This tests the\n    entire local processing path, both transmit and\n    receive, in the router, as well as all of the above\n    paths.\n\nRemote loopback case:\nrtp: RTP packets received from the network are decapsulated and\n     immediately re-encapsulated in the outbound RTP\n     stream, using the same media clock (i.e. timestamp)\n     as the received packet. They are then sent back to\n     the remote source router as if the voice had\n     originated on a telephony port on the local router.")
cvVoIPPeerCfgCoderRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 5), CvcSpeechCoderRate().clone('g729IETFr8000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgCoderRate.setDescription("This object specifies the most desirable codec of speech\nfor the VoIP peer.")
cvVoIPPeerCfgFaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 6), CvcFaxTransmitRate().clone('voiceRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgFaxRate.setDescription("This object specifies the default transmit rate of FAX\nthe VoIP peer. If the value of this object is 'none',\nthen the Fax relay feature is disabled; otherwise the Fax\nrelay feature is enabled.")
cvVoIPPeerCfgVADEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgVADEnable.setDescription("This object specifies whether or not the VAD (Voice\nActivity Detection) voice data is continuously transmitted\nto IP backbone.")
cvVoIPPeerCfgExpectFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgExpectFactor.setDescription("This object specifies the user requested Expectation\nFactor of voice quality for the call via this peer.")
cvVoIPPeerCfgIcpif = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 55)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgIcpif.setDescription("This object specifies the user requested Calculated\nPlanning Impairment Factor (Icpif) for the call via this\npeer.")
cvVoIPPeerCfgPoorQoVNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgPoorQoVNotificationEnable.setDescription("This object specifies whether cvdcPoorQoVNotification (or\nthe newer cvdcPoorQoVNotificationRev1) traps should be\ngenerated for the call that is associated with this\npeer.")
cvVoIPPeerCfgUDPChecksumEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgUDPChecksumEnable.setDescription("This object specifies whether the outgoing voice related\nUDP packet contains a valid checksum value.\ntrue  - enable the checksum of outgoing voice UDP packets\nfalse - disable the checksum of outgoing voice UDP packets")
cvVoIPPeerCfgIPPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgIPPrecedence.setDescription("This object specifies the value to be stored in the IP\nPrecedence field of voice packets, with values ranging\nfrom 0 (normal precedence) through 7 (network control),\nallowing the managed system to set the importance of each\nvoice packet for delivering them to the destination peer.")
cvVoIPPeerCfgTechPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgTechPrefix.setDescription("This object specifies the technology prefix of the peer,\nThe technology prefix and the called party address\nare passed in Admission Request (ARQ) to gatekeeper\nfor the called party address resolution during call setup.")
cvVoIPPeerCfgDigitRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 14), Bits().subtype(namedValues=NamedValues(("rtpCisco", 0), ("h245Signal", 1), ("h245Alphanumeric", 2), ("rtpNte", 3), ("sipNotify", 4), ("sipKpml", 5), )).clone(())).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgDigitRelay.setDescription("This object specifies the methods to transmit dial digits\n(DTMF or MF digits) via IP network.\nrtpCisco       - Enable capability to transmit dial digits\n                 with Cisco proprietary RTP payload type.\nh245Signal     - Enable capability to transmit dtmf digits\n                 across the H.245 channel, via the signal\n                 field of the UserInputIndication message\nh245Alphanumeric - Enable capability to transmit dtmf\n                 digit across the H.245 channel, via the\n                 string or alphanumeric fields of the\n                 UserInputIndication message\nrtpNte         - Enable capability to transmit dial digits\n                 using Named Telephony Event per RFC 2833\n                 section 3.\nsipNotify      - Enable capability to transmit dtmf\n                 digits using unsolicited SIP NOTIFY\n                 messages. This mechanism is only available\n                 for SIP dialpeers.\nsipKpml        - Enable capability to transmit dtmf\n                 digits using KPML over SIP SUBSCRIBE\n                 and NOTIFY messages. This mechanism is\n                 only available for SIP dialpeers.\n\n\nModifying the value of cvVoIPPeerCfgSessionProtocol\ncan reset the digit-relay method associated bits value in\nthis object if the modified session protocol does not\nsupport  these digit-relay methods.")
cvVoIPPeerCfgCoderBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(10,240),)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgCoderBytes.setDescription("This object specifies the size of the voice payload sample\nto be produced by the coder specified in\ncvVoIPPeerCfgCoderRate.\nEach coder sample produces 10 bytes of voice payload. The\nspecified value will be rounded down to the nearest valid\nsize.\n\nA value of 0, specifies that the coder defined by\ncvVoIPPeerCfgCoderRate should produce its default payload\nsize.")
cvVoIPPeerCfgFaxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(10,255),)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgFaxBytes.setDescription("This object specifies the payload size to be produced by\nthe coder when it is generating fax data. A value of 0,\nspecifies that the coder specified in\ncvVoIPCfgPeerCoderRate should produce its default fax\npayload size.")
cvVoIPPeerCfgInBandSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 17), CvcInBandSignaling().clone('cas')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgInBandSignaling.setDescription("This object specifies the type of in-band signaling that\nwill be used between the end points of the call. It is\nused by the router to determine how to interpret ABCD\nsignaling bits sent as part of voice payload data.")
cvVoIPPeerCfgMediaSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("flowThrough", 1), ("flowAround", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgMediaSetting.setDescription("This object specifies how the media is to be setup on\nan IP-IP Gateway. Two choices are valid: flow-through\nand flow-around. When in flow-through mode, which is the\ndefault setting, the IP-IP Gateway will terminate and \nthen re-originate the media stream. When flow-around\nis configured the Gateway will not be involved with the\nmedia, since it will flow-around the Gateway and will\nbe established directly between the endpoints.")
cvVoIPPeerCfgDesiredQoSVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 24), QosService().clone('bestEffort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgDesiredQoSVideo.setDescription("The object specifies the user requested Quality of Service\nfor the video portion of the call.")
cvVoIPPeerCfgMinAcceptableQoSVideo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 25), QosService().clone('bestEffort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgMinAcceptableQoSVideo.setDescription("The object specifies the minimally acceptable Quality of\nService for the video portion of the call.")
cvVoIPPeerCfgRedirectip2ip = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgRedirectip2ip.setDescription("This object specifies the Inbound VoIP calls that match\nan outbound VoIP dialpeer will be responded with a SIP \nredirect(for inbound SIP) or H.450.3 call-forward(for \ninbound H.323).")
cvVoIPPeerCfgOctetAligned = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 27), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgOctetAligned.setDescription("If the object has a value true(1) octet align operation\nis used, and if the value is false(2), bandwidth efficient\noperation is used. This object is not instantiated when\nthe object cvVoIPPeerCfgCoderRate is not equal to\ngsmAmrNb enum.")
cvVoIPPeerCfgBitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 28), CvAmrNbBitRateMode().clone('()')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgBitRates.setDescription("This object indicates modes of Bit rates. One or more\nupto four modes can be configured at the same time as\nbit rates can be changed dynamically for AMR-NB codec.\nThis object is not instantiated when the object\ncvVoIPPeerCfgCoderRate is not equal to gsmAmrNb enum.")
cvVoIPPeerCfgCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgCRC.setDescription("If the object has a value of true(1), frame CRC will be\nincluded in the payload and if the value is false(2),\nframe CRC will not be included in the payload.\nThis object is applicable only when RTP frame type\nis octet aligned. This object is not instantiated when\nthe object cvVoIPPeerCfgCoderRate is not equal to\ngsmAmrNb enum.")
cvVoIPPeerCfgCoderMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 30), CvIlbcFrameMode().clone('frameMode20')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgCoderMode.setDescription("This object indicates the iLBC codec mode to be used.\nThe value of this object is valid only if \ncvVoIPPeerCfgCoderRate is equal to 'iLBC'.")
cvVoIPPeerCfgCodingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 31), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("adaptive", 1), ("independent", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgCodingMode.setDescription("This object specifies the coding mode to be used. The object is\ninstantiated only if cvVoIPPeerCfgCoderRate is 'iSAC'. Following\ncoding modes are supported:\nadaptive    (1) - adaptive mode where iSAC performs bandwidth  \n                  estimation and adapts to the available channel\n\n                  bandwidth.\nindependent (2) - independent mode in which no bandwidth\nestimation \n                  is performed.")
cvVoIPPeerCfgBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10000, 32000)).clone(32000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgBitRate.setDescription("This object specifies the target bit rate. The object is\ninstantiated only if cvVoIPPeerCfgCoderRate is 'iSAC'.")
cvVoIPPeerCfgFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 33), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,2,1,)).subtype(namedValues=NamedValues(("frameSize30", 1), ("frameSize60", 2), ("frameSize30fixed", 3), ("frameSize60fixed", 4), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgFrameSize.setDescription("This object specifies the frame size used. The object is\ninstantiated only if cvVoIPPeerCfgCoderRate is 'iSAC'.\nThe frame size can be 30 ms or 60 ms, and it can be fixed for\nall packets or vary depending on the configuration and bandwidth\nestimation. Thus it can have the following values:\nframeSize30      - initial frame size of 30 ms\nframeSize60      - initial frame size of 60 ms\nframeSize30fixed - fixed frame size 30 ms\nframeSize60fixed - fixed frame size 60 ms")
cvVoIPPeerCfgDSCPPolicyNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 34), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgDSCPPolicyNotificationEnable.setDescription("This object specifies whether cvdcPolicyViolationNotification\ntraps should be generated for the call that is associated with\nthis peer for RPH to DSCP mapping and policing feature.")
cvVoIPPeerCfgMediaPolicyNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 3, 1, 35), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvVoIPPeerCfgMediaPolicyNotificationEnable.setDescription("This object specifies whether cvdcPolicyViolationNotification\ntraps should be generated for the call that is associated with\nthis peer for Media policing feature..")
cvPeerCommonCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4))
if mibBuilder.loadTexts: cvPeerCommonCfgTable.setDescription("The table contains the Voice specific peer common\nconfiguration information that is required to accept voice\ncalls or to which it will place them or process the\nincoming calls.")
cvPeerCommonCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvPeerCommonCfgEntry.setDescription("A single Voice specific Peer. One entry per voice related\nencapsulation.\nThe entry is created when a voice related encapsulation\nifEntry is created.\nThis entry is deleted when its associated ifEntry is\ndeleted.")
cvPeerCommonCfgIncomingDnisDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgIncomingDnisDigits.setDescription("The object specifies the prefix of the incoming Dialed\nNumber Identification Service (DNIS) digits for the peer.\nThe DNIS digits prefix is used to match with the incoming\nDNIS number for incoming call discrimination. If the\ndigits in this object are matched with incoming DNIS\nnumber, the  associated dialCtlPeerCfgInfoType in RFC 2128\nwill be used as a call discriminator for differentiating\nspeech, data, fax, video or modem calls.")
cvPeerCommonCfgMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1,-1),ValueRangeConstraint(1,2147483647),)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgMaxConnections.setDescription("The object specifies the maximum allowed connection\nto/from the peer. A value of -1 disables the limit of\nmaximum connections.")
cvPeerCommonCfgApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 3), DisplayString().clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgApplicationName.setDescription("The object specifies the application to handle the incoming\ncall after the peer is selected.\nIf no application name is specified, then the default\nsession application will take care of the incoming call.")
cvPeerCommonCfgPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgPreference.setDescription("This object specifies the selection preference of a peer\nwhen multiple peers are matched to the selection criteria.\nThe value of 0 has the lowest preference for peer\nselection.")
cvPeerCommonCfgHuntStop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgHuntStop.setDescription("This object specifies whether dialpeer hunting should stop\nwhen this peer is reached.")
cvPeerCommonCfgDnisMappingName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 6), DnisMapname().clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgDnisMappingName.setDescription("The object specifies a Dialer Number Identification\nService (DNIS) map name for the Voice specific peer\nentry specified in this row. A DNIS is a called party\nnumber and they can be grouped and identified by DNIS\nmap.")
cvPeerCommonCfgSourceCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 7), SnmpAdminString().clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgSourceCarrierId.setDescription("The object specifies the Source Carrier Id for the peer.\nThe Source Carrier Id is used to match with the Source\nCarrier Id of a call. If the Source Carrier Id in this\nobject is matched with the Source Carrier Id of a call,\nthen the associated peer will be used to handle the call. \nOnly alphanumeric characters, '-' and '_' are allowed in\nthe string.")
cvPeerCommonCfgTargetCarrierId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 8), SnmpAdminString().clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgTargetCarrierId.setDescription("The object specifies the Target Carrier Id for the peer.\nThe Target Carrier Id is used to match with the Target\nCarrier Id of a call. If the Target Carrier Id in this\nobject is matched with the Target Carrier Id of a call,\nthen the associated peer will be used to handle the call.\nOnly alphanumeric characters, '-' and '_' are allowed in\nthe string.")
cvPeerCommonCfgSourceTrunkGrpLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 9), SnmpAdminString().clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgSourceTrunkGrpLabel.setDescription("The object specifies the Source Trunk Group Label for the\npeer. The Source Trunk Group Label is used to match with\nthe Source Trunk Group Label of a call. If the Source\nTrunk Group Label in this object is matched with the\nSource Trunk Group Label of a call, then the associated\npeer will be used to handle the call. \nOnly alphanumeric characters, '-' and '_' are allowed in\nthe string.")
cvPeerCommonCfgTargetTrunkGrpLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 2, 4, 1, 10), SnmpAdminString().clone('')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvPeerCommonCfgTargetTrunkGrpLabel.setDescription("The object specifies the Target Trunk Group Label for the\npeer. The Target Trunk Group Label is used to match with\nthe Target Trunk Group Label of a call. If the Target\nTrunk Group Label in this object is matched with the\nTarget Trunk Group Label of a call, then the associated\npeer will be used to handle the call.\nOnly alphanumeric characters, '-' and '_' are allowed in\nthe string.")
cvGatewayCallActive = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3))
cvCallActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1))
if mibBuilder.loadTexts: cvCallActiveTable.setDescription("This table is the voice extension to the call active table\nof IETF Dial Control MIB. It contains voice encapsulation\ncall leg information that is derived from the statistics\nof lower layer telephony interface.")
cvCallActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1)).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: cvCallActiveEntry.setDescription("The information regarding a single voice encapsulation\ncall leg.\nThe call leg entry is identified by using the same index\nobjects that are used by Call Active table of IETF Dial\nControl MIB to identify the call.\nAn entry of this table is created when its associated call\nactive entry in the IETF Dial Control MIB is created and\ncall active entry contains the call establishment to a\nvoice over telephony network peer.\nThe entry is deleted when its associated call active entry\nin the IETF Dial Control MIB is deleted.")
cvCallActiveConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveConnectionId.setDescription("The global connection identifier for the\nactive telephony leg of the call.")
cvCallActiveTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 2), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveTxDuration.setDescription("Duration of Transmit path open from this peer to the\nvoice gateway for the call leg. This counter object will\nlock at the maximum value which is approximately two\ndays.")
cvCallActiveVoiceTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 3), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveVoiceTxDuration.setDescription("Duration of voice transmitted from this peer to voice\ngateway for this call leg. The Voice Utilization Rate can\nbe obtained by dividing this by cvCallActiveTXDuration\nobject. This counter object will lock at the maximum\nvalue which is approximately two days.")
cvCallActiveFaxTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 4), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveFaxTxDuration.setDescription("Duration of fax transmitted from this peer to voice gateway\nfor this call leg. The FAX Utilization Rate can be\nobtained by dividing this by cvCallActiveTXDuration\nobject. This counter object will lock at the maximum\nvalue which is approximately two days.")
cvCallActiveCoderTypeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 5), CvcCoderTypeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveCoderTypeRate.setDescription("The negotiated coder rate. It specifies the transmit rate of\nvoice/fax compression to its associated call leg for the\ncall.")
cvCallActiveNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveNoiseLevel.setDescription("The object contains the active noise level for the call\nleg.")
cvCallActiveACOMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveACOMLevel.setDescription("The object contains the sum of Echo Return Loss (ERL),\ncancellation loss (Echo Return Loss Enhancement) and\nnonlinear processing loss for the call leg.\nThe value -1 indicates the level can not be determined or\nlevel detection is disabled.")
cvCallActiveOutSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveOutSignalLevel.setDescription("The object contains the active output signal level to\ntelephony interface that is used by the call leg.")
cvCallActiveInSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveInSignalLevel.setDescription("The object contains the active input signal level from\ntelephony interface that is used by the call leg.")
cvCallActiveERLLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 45))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveERLLevel.setDescription("The object contains the current Echo Return Loss (ERL)\nlevel for the call leg.\nThe value -1 indicates the level can not be determined or\nlevel detection is disabled.")
cvCallActiveSessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveSessionTarget.setDescription("The object specifies the session target of the peer that\nis used for the call leg. This object is set with the\ninformation in the call associated\ncvVoicePeerCfgSessionTarget object when the call is\nconnected.")
cvCallActiveImgPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 12), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveImgPageCount.setDescription("The number of FAX related image pages are received or\ntransmitted via the peer for the call leg.")
cvCallActiveCallingName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveCallingName.setDescription("The calling party name of the call. If the name is\nnot available, then it will have a length of zero.")
cvCallActiveCallerIDBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveCallerIDBlock.setDescription("The object indicates whether or not the caller ID feature\nis blocked for this call.")
cvCallActiveEcanReflectorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveEcanReflectorLocation.setDescription("The location in milliseconds of the largest amplitude\nreflector detected by the echo canceller for this call. \nThe value 0 indicates there is no reflector or the \ninformation is not available.")
cvCallActiveAccountCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50)).clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveAccountCode.setDescription("The object indicates the account code input to the call.\nIt could be used for call screen or by down stream server\nfor billing purpose.\nThe value of empty string indicates no account code input.")
cvCallActiveERLLevelRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveERLLevelRev1.setDescription("The object contains the current Echo Return Loss (ERL)\nlevel for the call leg.\nThe value -1 indicates the level can not be determined or\nlevel detection is disabled.")
cvCallActiveCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallActiveCallId.setDescription("This object represents the call identifier\nfor the active telephony leg of the call.")
cvVoIPCallActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2))
if mibBuilder.loadTexts: cvVoIPCallActiveTable.setDescription("This table is the VoIP extension to the call active table of\nIETF Dial Control MIB. It contains VoIP call leg\ninformation about specific VoIP call destination and the\nselected QoS for the call leg.")
cvVoIPCallActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1)).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: cvVoIPCallActiveEntry.setDescription("The information regarding a single VoIP call leg.\nThe call leg entry is identified by using the same index\nobjects that are used by Call Active table of IETF Dial\nControl MIB to identify the call.\nAn entry of this table is created when its associated call\nactive entry in the IETF Dial Control MIB is created and\nthe call active entry contains information for the call\nestablishment to the peer on the IP backbone via a voice\nover  IP peer.\nThe entry is deleted when its associated call active entry\nin the IETF Dial Control MIB is deleted.")
cvVoIPCallActiveConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveConnectionId.setDescription("The global connection identifier for\nthe active VoIP leg of the call.")
cvVoIPCallActiveRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemoteIPAddress.setDescription("Remote system IP address for the VoIP call.")
cvVoIPCallActiveRemoteUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemoteUDPPort.setDescription("Remote system UDP listener port to which to transmit voice\npackets.")
cvVoIPCallActiveRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRoundTripDelay.setDescription("The voice packet round trip delay between local and\nthe remote system on the IP backbone during the call.")
cvVoIPCallActiveSelectedQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 5), QosService()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveSelectedQoS.setDescription("The selected RSVP QoS for the voice call.")
cvVoIPCallActiveSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 6), CvSessionProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveSessionProtocol.setDescription("The object specifies the session protocol to be used\nfor Internet call between local and remote router via\nIP backbone.")
cvVoIPCallActiveSessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveSessionTarget.setDescription("The object specifies the session target of the peer that\nis used for the call. This object is set with the\ninformation in the call associated\ncvVoIPPeerCfgSessionTarget object when the voice over IP\ncall is connected.")
cvVoIPCallActiveOnTimeRvPlayout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 8), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveOnTimeRvPlayout.setDescription("Duration of voice playout from data received on time for\nthis call. This plus the durations for the GapFills in the\nfollowing entries gives the Total Voice Playout Duration\nfor Active Voice.\nThis does not include duration for which no data was sent by the\nTransmit end as voice signal, e.g., silence suppression\nand fax signal. The On Time Playout Rate can be computed\nby dividing this entry by the Total Voice Playout Duration.\nThis counter object will lock at the maximum value which\nis approximately two days.")
cvVoIPCallActiveGapFillWithSilence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 9), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveGapFillWithSilence.setDescription("Duration of voice signal replaced with signal played out\nduring silence due to voice data not received on time\n(or lost) from voice gateway this call. This counter\nobject will lock at the maximum value which is\napproximately two days.")
cvVoIPCallActiveGapFillWithPrediction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 10), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveGapFillWithPrediction.setDescription("Duration of voice signal played out with signal synthesized\nfrom parameters or samples of data preceding in time due\nto voice data not received on time (or lost) from voice\ngateway for this call. An example of such playout is\nframe-erasure or frame-concealment strategies in G.729 and\nG.723.1 compression algorithms. This counter object will\nlock at the maximum value which is approximately two days.")
cvVoIPCallActiveGapFillWithInterpolation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 11), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveGapFillWithInterpolation.setDescription("Duration of voice signal played out with signal synthesized\nfrom parameters or samples of data preceding and following\nin time due to voice data not received on time (or lost)\nfrom voice gateway for this call. This counter object\nwill lock at the maximum value which is approximately two\ndays.")
cvVoIPCallActiveGapFillWithRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 12), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveGapFillWithRedundancy.setDescription("Duration of voice signal played out with signal synthesized\nfrom redundancy parameters available due to voice data not\nreceived on time (or lost) from voice gateway for this call.\nThis counter object will lock at the maximum value which\nis approximately two days.")
cvVoIPCallActiveHiWaterPlayoutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 13), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveHiWaterPlayoutDelay.setDescription("The high water mark Voice Playout FIFO Delay during\nthe voice call. This counter object will lock at the\nmaximum value which is approximately two days.")
cvVoIPCallActiveLoWaterPlayoutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveLoWaterPlayoutDelay.setDescription("The low water mark Voice Playout FIFO Delay during\nthe voice call.")
cvVoIPCallActiveReceiveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveReceiveDelay.setDescription("The average Playout FIFO Delay plus the decoder delay\nduring the voice call.")
cvVoIPCallActiveVADEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveVADEnable.setDescription("The object indicates whether or not the VAD (Voice Activity\nDetection) was enabled for the voice call.")
cvVoIPCallActiveCoderTypeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 17), CvcCoderTypeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveCoderTypeRate.setDescription("The negotiated coder rate. It specifies the transmit rate of\nvoice/fax compression to its associated call leg for the\ncall. This rate is different from the configuration rate\nbecause of rate negotiation during the call.")
cvVoIPCallActiveLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 18), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveLostPackets.setDescription("The number of lost voice packets during the call.")
cvVoIPCallActiveEarlyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 19), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveEarlyPackets.setDescription("The number of received voice packets that\narrived too early to store in jitter buffer\nduring the call.")
cvVoIPCallActiveLatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 20), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveLatePackets.setDescription("The number of received voice packets that\narrived too late to playout with CODEC (Coder/Decoder)\nduring the call.")
cvVoIPCallActiveUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveUsername.setDescription("The textual identifier of the calling party (user) of the\ncall. If the username is not available, then the value of\nthis object will have a length of zero.")
cvVoIPCallActiveProtocolCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveProtocolCallId.setDescription("The protocol-specific call identifier for the VoIP call.")
cvVoIPCallActiveRemSigIPAddrT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 23), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemSigIPAddrT.setDescription("This object specifies the type of address contained in\nthe associated instance of cvVoIPCallActiveRemSigIPAddr.")
cvVoIPCallActiveRemSigIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 24), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemSigIPAddr.setDescription("Remote signalling IP address for the VoIP call.")
cvVoIPCallActiveRemSigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemSigPort.setDescription("Remote signalling listener port to which to transmit\nvoice packets.")
cvVoIPCallActiveRemMediaIPAddrT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 26), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemMediaIPAddrT.setDescription("This object specifies the type of address contained in\nthe associated instance of\ncvVoIPCallActiveRemMediaIPAddr.")
cvVoIPCallActiveRemMediaIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 27), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemMediaIPAddr.setDescription("Remote media end point IP address for the VoIP call.")
cvVoIPCallActiveRemMediaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRemMediaPort.setDescription("Remote media end point listener port to which to transmit\nvoice packets.")
cvVoIPCallActiveSRTPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveSRTPEnable.setDescription("The object indicates whether or not the SRTP (Secured RTP)\nwas enabled for the voice call.")
cvVoIPCallActiveOctetAligned = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveOctetAligned.setDescription("If the object has a value true(1) octet align operation\nis used, and if the value is false(2), bandwidth efficient\noperation is used. This object is not instantiated when\nthe object cvVoIPCallActiveCoderTypeRate is not equal to\ngsmAmrNb enum.")
cvVoIPCallActiveBitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 31), CvAmrNbBitRateMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveBitRates.setDescription("This object indicates modes of Bit rates.\nThis object is not instantiated when the object\ncvVoIPCallActiveCoderTypeRate is not equal to\ngsmAmrNb enum.")
cvVoIPCallActiveModeChgPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveModeChgPeriod.setDescription("The object indicates the interval (N frame-blocks) at which\ncodec mode changes are allowed. This object is not\ninstantiated when the object cvVoIPCallActiveCoderTypeRate\nis not equal to gsmAmrNb enum.")
cvVoIPCallActiveModeChgNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveModeChgNeighbor.setDescription("If the object has a value of true(1), mode changes will be\nmade to only neighboring modes set to\ncvVoIPCallActiveBitRates object. If the value is false(2),\nmode changes will be allowed to any modes set to\ncvVoIPCallActiveBitRates object. This object is not\ninstantiated when the object cvVoIPCallActiveCoderTypeRate\nis not equal to gsmAmrNb enum.")
cvVoIPCallActiveMaxPtime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveMaxPtime.setDescription("The object indicates the maximum amount of media that\ncan be encapsulated in a payload. Supported value is\n20 msec. This object is not instantiated when the\nobject cvVoIPCallActiveCoderTypeRate is not equal to\ngsmAmrNb enum.")
cvVoIPCallActiveCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveCRC.setDescription("If the object has a value of true(1), frame CRC will be\nincluded in the payload and if the value is false(2),\nframe CRC will not be included in the payload.\nThis object is applicable only when RTP frame type\nis octet aligned. This object is not instantiated when\nthe object cvVoIPCallActiveCoderTypeRate is not equal to\ngsmAmrNb enum.")
cvVoIPCallActiveRobustSorting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveRobustSorting.setDescription("If the object has a value of true(1), payload employs\nrobust sorting and if the value is false(2), payload\ndoes not employ robust sorting. This object is applicable\nonly when RTP frame type is octet aligned. This object\nis not instantiated when the object\ncvVoIPCallActiveCoderTypeRate is not equal to gsmAmrNb\nenum.")
cvVoIPCallActiveEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 37), CvAmrNbRtpEncap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveEncap.setDescription("The object indicates the RTP encapsulation type.\nSupported RTP encapsulation type is RFC3267.\nThis object is not instantiated when the object\ncvVoIPCallActiveCoderTypeRate is not equal to\ngsmAmrNb enum.")
cvVoIPCallActiveInterleaving = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveInterleaving.setDescription("The object indicates the maximum number of frame-blocks\nallowed in an interleaving group. It indicates that\nframe-block level interleaving will be used for that\nsession. If this object is not set, interleaving\nis not used. This object is applicable only when\nRTP frame type is octet aligned. This object is not\ninstantiated when the object cvVoIPCallActiveCoderTypeRate\nis not equal to gsmAmrNb enum.")
cvVoIPCallActivePtime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActivePtime.setDescription("The object indicates the length of the time in milliseconds\nrepresented by the media of the packet. Supported value is\n20 milliseconds. This object is not instantiated when the\nobject cvVoIPCallActiveCoderTypeRate is not equal to\ngsmAmrNb enum.")
cvVoIPCallActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveChannels.setDescription("The object indicates the number of audio channels.\nSupported value is 1. This object is not instantiated\nwhen the object cvVoIPCallActiveCoderTypeRate is not equal\nto gsmAmrNb enum.")
cvVoIPCallActiveCoderMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 41), CvIlbcFrameMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveCoderMode.setDescription("The object indicates the iLBC codec mode.\nThe value of this object is valid only if \ncvVoIPCallActiveCoderTypeRate is equal to \n'iLBC'.")
cvVoIPCallActiveCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveCallId.setDescription("This object represents the call identifier\nfor the active VoIP leg of the call.")
cvVoIPCallActiveCallReferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 43), CvcCallReferenceIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveCallReferenceId.setDescription("The call reference ID associates the video call entry and voice\ncall entry of the same endpoint.  An audio-only call may or may\nnot have a valid call reference ID (i.e. value greater than\nzero), but in both cases, there will not be a video call entry\nassociated with it.  \n\nFor a video call, the video-specific information  is stored in a\ncall entry in cVideoSessionActive of CISCO-VIDEO-SESSION-MIB, in\nwhich the call reference ID is also identified.")
ccVoIPCallActivePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccVoIPCallActivePolicyName.setDescription("This object holds the policy name. It could be media\npolicy, DSCP policy etc.")
cvVoIPCallActiveReversedDirectionPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveReversedDirectionPeerAddress.setDescription("This object store the reversed direction peer address  If the\naddress is not available, then it will have a length of zero.\n\nIf the call is ingress then it contains called number and if the\ncall is egress then it contains calling number.")
cvVoIPCallActiveSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 2, 1, 46), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallActiveSessionId.setDescription("This object indicates the active session ID assigned by the\ncall manager to identify call legs that belong to the same call\nsession.")
cvCallActiveDS0s = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 3), Gauge32()).setMaxAccess("readonly").setUnits("interfaces")
if mibBuilder.loadTexts: cvCallActiveDS0s.setDescription("The current number of DS0 interfaces used for the\nactive calls.")
cvCallActiveDS0sHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite").setUnits("percent")
if mibBuilder.loadTexts: cvCallActiveDS0sHighThreshold.setDescription("A high threshold used to determine when to generate the\ncvdcActiveDS0sHighNotification. This object \nrepresents the percentage of active DS0s in total number \nof DS0s.")
cvCallActiveDS0sLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(0)).setMaxAccess("readwrite").setUnits("percent")
if mibBuilder.loadTexts: cvCallActiveDS0sLowThreshold.setDescription("A low threshold used to determine when to generate the\ncvdcActiveDS0sLowNotification notification. This object \nrepresents the percentage of active DS0s in total number \nof DS0s.")
cvCallActiveDS0sHighNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvCallActiveDS0sHighNotifyEnable.setDescription("Specifies whether or not cvdcActiveDS0sHighNotification\nshould be generated.\n\n'true' : Indicates that the cvdcActiveDS0sHighNotification\n         generation is enabled.\n\n'false': Indicates that cvdcActiveDS0sHighNotification\n         generation is disabled.")
cvCallActiveDS0sLowNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvCallActiveDS0sLowNotifyEnable.setDescription("Specifies whether or not cvdcActiveDS0sLowNotification\nshould be generated.\n\n'true' : Indicates that the cvdcActiveDS0sLowNotification\n         generation is enabled.\n\n'false': Indicates that cvdcActiveDS0sLowNotification\n         generation is disabled.")
cvCallVolume = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8))
cvCallVolConnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 1))
if mibBuilder.loadTexts: cvCallVolConnTable.setDescription("This table represents the number of active\ncall connections for each call connection type\nin the voice gateway.")
cvCallVolConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 1, 1)).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolConnIndex"))
if mibBuilder.loadTexts: cvCallVolConnEntry.setDescription("An entry in the cvCallVolConnTable indicates\nnumber of active calls for a call connection type\nin the voice gateway.")
cvCallVolConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 1, 1, 1), CvCallConnectionType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvCallVolConnIndex.setDescription("This object represents index to the\ncvCallVolConnTable.")
cvCallVolConnActiveConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolConnActiveConnection.setDescription("This object represents the total number of\nactive calls for a connection type \nin the voice gateway.")
cvCallVolConnTotalActiveConnections = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolConnTotalActiveConnections.setDescription("This object represents the total number of\nactive call legs in the voice gateway.")
cvCallVolConnMaxCallConnectionLicenese = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolConnMaxCallConnectionLicenese.setDescription("This object represents the licensed call capacity\nfor a voice gateway.  If the value is 0, no \nlicensing is done and the gateway can be \naccomodate as many calls depending on its capability.")
cvCallVolPeerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 4))
if mibBuilder.loadTexts: cvCallVolPeerTable.setDescription("This table represents the information about\nthe usage of dialpeers configured in a \nvoice gateway.")
cvCallVolPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 4, 1))
if mibBuilder.loadTexts: cvCallVolPeerEntry.setDescription("Each entry represents a row in cvCallVolPeerTable\nand corresponds to the information about a \ndialpeer configured on the voice gateway.")
cvCallVolPeerIncomingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 4, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolPeerIncomingCalls.setDescription("This object represents the total number of\nactive calls that has selected the dialpeer\nas an incoming dialpeer.")
cvCallVolPeerOutgoingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 4, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolPeerOutgoingCalls.setDescription("This object represents the total number of\nactive calls that has selected the dialpeer\nas an outgoing dialpeer.")
cvCallVolIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 5))
if mibBuilder.loadTexts: cvCallVolIfTable.setDescription("This table represents the information about\nthe usage of an IP interface in a voice\ngateway for voice media calls. This table\nhas a sparse-dependent relationship with  \nifTable. There exists an entry in this table, \nfor each of the  entries in ifTable where ifType \nis one of 'ethernetCsmacd' and 'softwareLoopback'.")
cvCallVolIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 5, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvCallVolIfEntry.setDescription("Each entry represents a row in cvCallVolIfTable\nand corresponds to the information about an IP \ninterface in the voice gateway.")
cvCallVolMediaIncomingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 5, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolMediaIncomingCalls.setDescription("This object represents the total number of\ninbound active media calls through this IP \ninterface.")
cvCallVolMediaOutgoingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 8, 5, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallVolMediaOutgoingCalls.setDescription("This object represents the total number of\noutbound active media calls through the IP \ninterface.")
cvCallRateMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 11))
cvCallRateMonitorEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 11, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvCallRateMonitorEnable.setDescription("This object represents the state of call-monitoring.\nA value of 'true' indicates that call-monitoring \nis enabled.  A value of 'false' indicates that \ncall-monitoring is disabled.")
cvCallRateMonitorTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 11, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(1)).setMaxAccess("readwrite").setUnits("five seconds")
if mibBuilder.loadTexts: cvCallRateMonitorTime.setDescription("This object represents the interval for\nwhich the gateway monitors the call-rate.")
cvCallRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 11, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallRate.setDescription("This object represents the total number of\ncalls handled by the gateway during the \nmonitored time.")
cvCallRateHiWaterMark = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 3, 11, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallRateHiWaterMark.setDescription("This object represents the high water mark\nfor the number of calls handled by the \ngateway in an unit interval of \ncvCallRateMonitorTime, from the time \nthe call-monitoring is enabled.")
cvGatewayCallHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4))
cvCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1))
if mibBuilder.loadTexts: cvCallHistoryTable.setDescription("This table is the voice extension to the call history table\nof IETF Dial Control MIB. It contains voice encapsulation\ncall leg information such as voice packet statistics,\ncoder usage and end to end bandwidth of the call leg.")
cvCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1)).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"))
if mibBuilder.loadTexts: cvCallHistoryEntry.setDescription("The information regarding a single voice encapsulation\ncall leg.\nThe call leg entry is identified by using the same index\nobjects that are used by Call Active table of IETF Dial\nControl MIB to identify the call.\nAn entry of this table is created when its associated call\nhistory entry in the IETF Dial Control MIB is created and\nthe call history entry contains the call establishment to\na voice encapsulation peer.\nThe entry is deleted when its associated call active entry\nin the IETF Dial Control MIB is deleted.")
cvCallHistoryConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryConnectionId.setDescription("The global connection identifier for the\ntelephony leg, which was assigned to the call.")
cvCallHistoryTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 2), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryTxDuration.setDescription("Duration of Transmit path open from this peer to the\nvoice gateway for the call leg. This counter object will\nlock at the maximum value which is approximately two\ndays.")
cvCallHistoryVoiceTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 3), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryVoiceTxDuration.setDescription("Duration for this call leg. The Voice Utilization Rate\ncan be obtained by dividing this by\ncvCallHistoryTXDuration object. This counter object will\nlock at the maximum value which is approximately two\ndays.")
cvCallHistoryFaxTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 4), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryFaxTxDuration.setDescription("Duration of fax transmitted from this peer to voice\ngateway for this call leg. The FAX Utilization Rate can be\nobtained by dividing this by cvCallHistoryTXDuration\nobject. This counter object will lock at the maximum\nvalue which is approximately two days.")
cvCallHistoryCoderTypeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 5), CvcCoderTypeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryCoderTypeRate.setDescription("The negotiated coder rate. It specifies the transmit rate\nof voice/fax compression to its associated call leg for\nthe call.")
cvCallHistoryNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryNoiseLevel.setDescription("The object contains the average noise level for the call\nleg.")
cvCallHistoryACOMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryACOMLevel.setDescription("The object contains the average ACOM level for the call\nleg. The value -1 indicates the level can not be\ndetermined or level detection is disabled.")
cvCallHistorySessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistorySessionTarget.setDescription("The object specifies the session target of the peer that\nis used for the call leg via telephony interface.")
cvCallHistoryImgPageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 9), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryImgPageCount.setDescription("The number of FAX related image pages are received or\ntransmitted via the peer for the call leg.")
cvCallHistoryCallingName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryCallingName.setDescription("The calling party name of the call. If the name is\nnot available, then it will have a length of zero.")
cvCallHistoryCallerIDBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryCallerIDBlock.setDescription("The object indicates whether or not the caller ID feature\nis blocked for this call.")
cvCallHistoryAccountCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 50)).clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryAccountCode.setDescription("The object indicates the account code input to the call.\nIt could be used by down stream billing server.\nThe value of empty string indicates no account code input.")
cvCallHistoryCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallHistoryCallId.setDescription("This object represents the call identifier for the\ntelephony leg, which was assigned to the call.")
cvVoIPCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2))
if mibBuilder.loadTexts: cvVoIPCallHistoryTable.setDescription("This table is the VoIP extension to the call history table\nof IETF Dial Control MIB. It contains VoIP call leg\ninformation about specific VoIP call destination and the\nselected QoS for the call leg.")
cvVoIPCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1)).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"))
if mibBuilder.loadTexts: cvVoIPCallHistoryEntry.setDescription("The information regarding a single VoIP call leg.\nThe call leg entry is identified by using the same index\nobjects that are used by Call Active table of IETF Dial\nControl MIB to identify the call.\nAn entry of this table is created when its associated call\nhistory entry in the IETF Dial Control MIB is created and\nthe call history entry contains information for the call\nestablishment to the peer on the IP backbone via a voice\nover IP peer.\nThe entry is deleted when its associated call history\nentry in the IETF Dial Control MIB is deleted.")
cvVoIPCallHistoryConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryConnectionId.setDescription("The global connection identifier for the\nVoIP leg, which was assigned to the call.")
cvVoIPCallHistoryRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemoteIPAddress.setDescription("Remote system IP address for the call.")
cvVoIPCallHistoryRemoteUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemoteUDPPort.setDescription("Remote system UDP listener port to which to transmit voice\npackets for the call.")
cvVoIPCallHistoryRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRoundTripDelay.setDescription("The voice packet round trip delay between local and\nthe remote system on the IP backbone during the call.")
cvVoIPCallHistorySelectedQoS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 5), QosService()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistorySelectedQoS.setDescription("The selected RSVP QoS for the call.")
cvVoIPCallHistorySessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 6), CvSessionProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistorySessionProtocol.setDescription("The object specifies the session protocol to be used\nfor Internet call between local and remote router via\nIP backbone.")
cvVoIPCallHistorySessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistorySessionTarget.setDescription("The object specifies the session target of the peer that\nis used for the Voice over IP call.")
cvVoIPCallHistoryOnTimeRvPlayout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 8), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryOnTimeRvPlayout.setDescription("Duration of voice playout from data received on time for\nthis call. This plus the durations for the GapFills in the\nfollowing entries gives the Total Voice Playout Duration\nfor Active Voice.\nThis does not include duration for which no data was sent by the\nTransmit end as voice signal, e.g., silence suppression\nand fax signal. The On Time Playout Rate can be computed\nby dividing this entry by the Total Voice Playout Duration.\nThis counter object will lock at the maximum value which\nis approximately two days.")
cvVoIPCallHistoryGapFillWithSilence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 9), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryGapFillWithSilence.setDescription("Duration of voice signal replaced with signal played out\nduring silence due to voice data not received on time\n(or lost) from voice gateway this call. This counter\nobject will lock at the maximum value which is\napproximately two days.")
cvVoIPCallHistoryGapFillWithPrediction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 10), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryGapFillWithPrediction.setDescription("Duration of voice signal played out with signal synthesized\nfrom parameters or samples of data preceding in time due to\nvoice data not received on time (or lost) from voice gateway\nfor this call. An example of such playout is frame-erasure\nor  frame-concealment strategies in G.729 and G.723.1\ncompression algorithms. This counter object will lock at\nthe maximum value which is approximately two days.")
cvVoIPCallHistoryGapFillWithInterpolation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 11), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryGapFillWithInterpolation.setDescription("Duration of voice signal played out with signal synthesized\nfrom parameters or samples of data preceding and following\nin time due to voice data not received on time (or lost)\nfrom voice gateway for this call. This counter object\nwill lock at the maximum value which is approximately two\ndays.")
cvVoIPCallHistoryGapFillWithRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 12), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryGapFillWithRedundancy.setDescription("Duration of voice signal played out with signal synthesized\nfrom redundancy parameters available due to voice data not\nreceived on time (or lost) from voice gateway for this call.\nThis counter object will lock at the maximum value which\nis approximately two days.")
cvVoIPCallHistoryHiWaterPlayoutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 13), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryHiWaterPlayoutDelay.setDescription("The high water mark Voice Playout FIFO Delay during\nthe voice call. This counter object will lock at the\nmaximum value which is approximately two days.")
cvVoIPCallHistoryLoWaterPlayoutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryLoWaterPlayoutDelay.setDescription("The low water mark Voice Playout FIFO Delay during\nthe voice call.")
cvVoIPCallHistoryReceiveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryReceiveDelay.setDescription("The average Playout FIFO Delay plus the decoder delay\nduring the voice call.")
cvVoIPCallHistoryVADEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryVADEnable.setDescription("The object indicates whether or not the VAD (Voice Activity\nDetection) was enabled for the voice call.")
cvVoIPCallHistoryCoderTypeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 17), CvcCoderTypeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryCoderTypeRate.setDescription("The negotiated coder rate. It specifies the transmit rate of\nvoice/fax compression to its associated call leg for the\ncall. This rate is different from the configuration rate\nbecause of rate negotiation during the call.")
cvVoIPCallHistoryIcpif = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 55))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryIcpif.setDescription("The Calculated Planning Impairment Factor (Icpif) of the\ncall  that is associated to this call leg.\nThe value in this object is computed by the following\nequation.\nIcpif of the call =\nItotal (total impairment value) of the call - A\n(Expectation Factor) in the cvVoIPPeerCfgExpectFactor of\nthe call leg associated peer.\nA value of -1 implies that Icpif was not calculated and is\nmeaningless for this call.")
cvVoIPCallHistoryLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 19), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryLostPackets.setDescription("The number of lost voice packets during the call.")
cvVoIPCallHistoryEarlyPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 20), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryEarlyPackets.setDescription("The number of received voice packets that are\narrived too early to store in jitter buffer\nduring the call.")
cvVoIPCallHistoryLatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 21), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryLatePackets.setDescription("The number of received voice packets that are\narrived too late to playout with CODEC (Coder/Decoder)\nduring the call.")
cvVoIPCallHistoryUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryUsername.setDescription("The textual identifier of the calling party (user) of the\ncall. If the username is not available, then the value of\nthis object will have a length of zero.")
cvVoIPCallHistoryProtocolCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryProtocolCallId.setDescription("The protocol-specific call identifier for the VoIP call.")
cvVoIPCallHistoryRemSigIPAddrT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 24), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemSigIPAddrT.setDescription("This object specifies the type of address contained in\nthe associated instance of cvVoIPCallHistoryRemSigIPAddr.")
cvVoIPCallHistoryRemSigIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 25), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemSigIPAddr.setDescription("Remote signalling IP address for the VoIP call.")
cvVoIPCallHistoryRemSigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemSigPort.setDescription("Remote signalling listener port to which to transmit\nvoice packets.")
cvVoIPCallHistoryRemMediaIPAddrT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 27), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemMediaIPAddrT.setDescription("This object specifies the type of address contained in\nthe associated instance of\ncvVoIPCallHistoryRemMediaIPAddr.")
cvVoIPCallHistoryRemMediaIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 28), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemMediaIPAddr.setDescription("Remote media end point IP address for the VoIP call.")
cvVoIPCallHistoryRemMediaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRemMediaPort.setDescription("Remote media end point listener port to which to transmit\nvoice packets.")
cvVoIPCallHistorySRTPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistorySRTPEnable.setDescription("The object indicates whether or not the SRTP (Secured RTP)\nwas enabled for the voice call.")
cvVoIPCallHistoryFallbackIcpif = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryFallbackIcpif.setDescription("The Calculated Planning Impairment Factor (Icpif) of the\ncall  that is associated to this call leg.\nThe value in this object is computed by the following\nequation.\nIcpif of the fallback probe =\nItotal (total impairment value)  - configured fallback\n(Expectation Factor).\nA value of 0 implies that Icpif was not calculated and is\nmeaningless for this attempt.")
cvVoIPCallHistoryFallbackLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 32), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryFallbackLoss.setDescription("FallbackLoss is the percentage of loss packets based on\nthe total packets sent.")
cvVoIPCallHistoryFallbackDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryFallbackDelay.setDescription("The FallbackDelay is calculated as follows -\nTake the sum of the round trips for all the probes, \ndivide by the number of probes, \nand divide by two to get the one-way delay.  \nThen add in jitter_in or jiter_out,\nwhich ever is higher.")
cvVoIPCallHistoryOctetAligned = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryOctetAligned.setDescription("If the object has a value true(1) octet align operation\nis used, and if the value is false(2), bandwidth efficient\noperation is used. This object is not instantiated when\nthe object cvVoIPCallHistoryCoderTypeRate is not equal to\ngsmAmrNb enum.")
cvVoIPCallHistoryBitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 35), CvAmrNbBitRateMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryBitRates.setDescription("This object indicates modes of Bit rates.\nThis object is not instantiated when the object\ncvVoIPCallHistoryCoderTypeRate is not equal to\ngsmAmrNb enum.")
cvVoIPCallHistoryModeChgPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryModeChgPeriod.setDescription("The object indicates the interval (N frame-blocks) at which\ncodec mode changes are allowed. This object is not\ninstantiated when the object cvVoIPCallHistoryCoderTypeRate\nis not equal to gsmAmrNb enum.")
cvVoIPCallHistoryModeChgNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryModeChgNeighbor.setDescription("If the object has a value of true(1), mode changes will be\nmade to only neighboring modes set to\ncvVoIPCallHistoryBitRates object. If the value is false(2),\nmode changes will be allowed to any modes set to\ncvVoIPCallHistoryBitRates object. This object is not\ninstantiated when the object cvVoIPCallHistoryCoderTypeRate\nis not equal to gsmAmrNb enum.")
cvVoIPCallHistoryMaxPtime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryMaxPtime.setDescription("The object indicates the maximum amount of media that\ncan be encapsulated in a payload. Supported value is\n20 msec. This object is not instantiated when the\nobject cvVoIPCallHistoryCoderTypeRate is not equal to\ngsmAmrNb enum.")
cvVoIPCallHistoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryCRC.setDescription("If the object has a value of true(1), frame CRC will be\nincluded in the payload and if the value is false(2),\nframe CRC will not be included in the payload.\nThis object is applicable only when RTP frame type\nis octet aligned. This object is not instantiated when\nthe object cvVoIPCallHistoryCoderTypeRate is not equal to\ngsmAmrNb enum.")
cvVoIPCallHistoryRobustSorting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 40), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryRobustSorting.setDescription("If the object has a value of true(1), payload employs\nrobust sorting and if the value is false(2), payload\ndoes not employ robust sorting. This object is applicable\nonly when RTP frame type is octet aligned. This object\nis not instantiated when the object\ncvVoIPCallHistoryCoderTypeRate is not equal to gsmAmrNb\nenum.")
cvVoIPCallHistoryEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 41), CvAmrNbRtpEncap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryEncap.setDescription("The object indicates the RTP encapsulation type.\nSupported RTP encapsulation type is RFC3267.\nThis object is not instantiated when the object\ncvVoIPCallHistoryCoderTypeRate is not equal to\ngsmAmrNb enum.")
cvVoIPCallHistoryInterleaving = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryInterleaving.setDescription("The object indicates the maximum number of frame-blocks\nallowed in an interleaving group. It indicates that\nframe-block level interleaving will be used for that\nsession. If this object is not set, interleaving\nis not used. This object is applicable only when\nRTP frame type is octet aligned. This object is not\ninstantiated when the object cvVoIPCallHistoryCoderTypeRate\nis not equal to gsmAmrNb enum.")
cvVoIPCallHistoryPtime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryPtime.setDescription("The object indicates the length of the time in milliseconds\nrepresented by the media of the packet. Supported value is\n20 milliseconds. This object is not instantiated when the\nobject cvVoIPCallHistoryCoderTypeRate is not equal to\ngsmAmrNb enum.")
cvVoIPCallHistoryChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryChannels.setDescription("The object indicates the number of audio channels.\nSupported value is 1. This object is not instantiated\nwhen the object cvVoIPCallHistoryCoderTypeRate is not equal\nto gsmAmrNb enum.")
cvVoIPCallHistoryCoderMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 45), CvIlbcFrameMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryCoderMode.setDescription("The object indicates the iLBC mode.\nThe value of this object is valid only if \ncvVoIPCallHistoryCoderTypeRate is equal to \n'iLBC'.")
cvVoIPCallHistoryCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryCallId.setDescription("This object represents the call identifier for the\nVoIP leg, which was assigned to the call.")
cvVoIPCallHistoryCallReferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 47), CvcCallReferenceIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistoryCallReferenceId.setDescription("The call reference ID associates the video call entry and voice\ncall entry of the same endpoint.  An audio-only call may or may\nnot have a valid call reference ID (i.e. value greater than\nzero), but in both cases, there will not be a video call entry\nassociated with it. \n\nFor a video call, the video-specific information  is stored in a\ncall entry in cVideoSessionActive of CISCO-VIDEO-SESSION-MIB, in\nwhich the call reference ID is also identified.")
cvVoIPCallHistorySessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 2, 1, 48), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvVoIPCallHistorySessionId.setDescription("This object indicates the session ID assigned by the call\nmanager to identify call legs that belong to the same call\nsession.  This session ID (history) represents a completed call\nsession, whereas the active session ID\n(cvVoIPCallActiveSessionId) represents an ongoing session.")
cvCallVolumeStatsHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3))
cvCallRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 1))
if mibBuilder.loadTexts: cvCallRateStatsTable.setDescription("This table represents voice call rate measurement in various\ninterval lengths defined by the \nCvCallVolumeStatsIntvlType object.\n\nEach interval may contain one or more entries to allow for\ndetailed measurement to be collected.")
cvCallRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 1, 1)).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateStatsIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateStatsIntvlDur"))
if mibBuilder.loadTexts: cvCallRateStatsEntry.setDescription("This is a conceptual-row in cvCallRateStatsTable\nThis entry is created at the system initialization and is\nupdated at every epoch based on CvCallVolumeStatsIntvlType")
cvCallRateStatsIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 1, 1, 1), CvCallVolumeStatsIntvlType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvCallRateStatsIntvlDurUnits.setDescription("The Object indexes in Call Rate Table to select one among three\ninterval-tables.\n\nThe different types in this table are represented by \nCvCallVolumeStatsIntvlType")
cvCallRateStatsIntvlDur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 72))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvCallRateStatsIntvlDur.setDescription("This is an index that references to the different past periods\nin given in interval of call rate table.\nThis range is 1-60 for Seconds and Minutes table \nwherein 1-72 for hours table.")
cvCallRateStatsMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallRateStatsMaxVal.setDescription("This object indicates the maximum calls per second\nthat occured for the given period for the given interval.")
cvCallRateStatsAvgVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallRateStatsAvgVal.setDescription("This object indicates the average calls per second\nthat occured for the given period for the given interval.")
cvCallLegRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 2))
if mibBuilder.loadTexts: cvCallLegRateStatsTable.setDescription("cvCallLegRateStatsTable table represents voice call leg rate\nmeasurement in various interval lengths defined by \nthe CvCallVolumeStatsIntvlType object.\nEach interval may contain one or more entries to allow for\ndetailed measurement to be collected.")
cvCallLegRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 2, 1)).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateStatsIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateStatsIntvlDur"))
if mibBuilder.loadTexts: cvCallLegRateStatsEntry.setDescription("This is a conceptual-row in cvCallLegRateStatsTable\nThis entry is created at the system initialization and is\nupdated at every epoch based on CvCallVolumeStatsIntvlType")
cvCallLegRateStatsIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 2, 1, 1), CvCallVolumeStatsIntvlType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvCallLegRateStatsIntvlDurUnits.setDescription("The Object indexes in Call Leg Rate Table to select one among\nthree\ninterval-tables.\n\nThe different types in this table are represented by \nCvCallVolumeStatsIntvlType")
cvCallLegRateStatsIntvlDur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 72))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvCallLegRateStatsIntvlDur.setDescription("This is an index that references to the different past periods\nin given in interval of call rate table.\nThis range is 1-60 for Seconds and Minutes table \nwherein 1-72 for hours table.")
cvCallLegRateStatsMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallLegRateStatsMaxVal.setDescription("This object indicates the maximum call-legs per second\nthat occured for the given period for the given interval.")
cvCallLegRateStatsAvgVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallLegRateStatsAvgVal.setDescription("This object indicates the average call-legs per second\nthat occured for the given period for the given interval.")
cvActiveCallStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 3))
if mibBuilder.loadTexts: cvActiveCallStatsTable.setDescription("This table represents the active voice calls in various\ninterval lengths defined by the \nCvCallVolumeStatsIntvlType object.\n\nEach interval may contain one or more entries to allow for\ndetailed measurement to be collected.")
cvActiveCallStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 3, 1)).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallStatsIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallStatsIntvlDur"))
if mibBuilder.loadTexts: cvActiveCallStatsEntry.setDescription("This is a conceptual-row in cvActiveCallStatsTable\nThis entry is created at the system initialization and is\nupdated at every epoch based on CvCallVolumeStatsIntvlType")
cvActiveCallStatsIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 3, 1, 1), CvCallVolumeStatsIntvlType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvActiveCallStatsIntvlDurUnits.setDescription("The Object indexes in Active Call Rate Table (con-current calls\ntable) to select one among three interval-tables.\n\nThe different types in this table are represented by \nCvCallVolumeStatsIntvlType")
cvActiveCallStatsIntvlDur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 72))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvActiveCallStatsIntvlDur.setDescription("This is an index that references to the different past periods\nin given in interval of active call table.\nThis range is 1-60 for Seconds and Minutes table \nwherein 1-72 for hours table.")
cvActiveCallStatsMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvActiveCallStatsMaxVal.setDescription("This object indicates the maximum number of active call\nthat occured for the given period for the given interval.")
cvActiveCallStatsAvgVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvActiveCallStatsAvgVal.setDescription("This object indicates the average number of active calls\nthat occured for the given period for the given interval.")
cvCallDurationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 4))
if mibBuilder.loadTexts: cvCallDurationStatsTable.setDescription("This table represents the number of calls below a specific\nduration in various interval length defined by \nthe CvCallVolumeStatsIntvlType object.  \n\nThe specific duration is configurable value of \n cvCallDurationStatsThreshold object.\n\nEach interval may contain one or more entries to allow for \ndetailed measurement to be collected.")
cvCallDurationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 4, 1)).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallDurationStatsIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallDurationStatsIntvlDur"))
if mibBuilder.loadTexts: cvCallDurationStatsEntry.setDescription("This is a conceptual-row in cvCallDurationStatsTable\nThis entry is created at the system initialization and is\nupdated at every epoch based on CvCallVolumeStatsIntvlType")
cvCallDurationStatsIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 4, 1, 1), CvCallVolumeStatsIntvlType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvCallDurationStatsIntvlDurUnits.setDescription("The Object indexes in Call Duration Table to select one among\nthree interval-tables.\n\nThe different types in this table are represented by \nCvCallVolumeStatsIntvlType")
cvCallDurationStatsIntvlDur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 72))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvCallDurationStatsIntvlDur.setDescription("This is an index that references to the different past periods\nin given in interval of call Duration table.\nThis range is 1-60 for Seconds and Minutes table \nwherein 1-72 for hours table.")
cvCallDurationStatsMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallDurationStatsMaxVal.setDescription("This object indicates the maximum number of calls having a\nduration which is below the threshold for the given interval.")
cvCallDurationStatsAvgVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallDurationStatsAvgVal.setDescription("This object indicates the average number of calls having a\nduration which is below the threshold for the given interval.")
cvSipMsgRateStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 5))
if mibBuilder.loadTexts: cvSipMsgRateStatsTable.setDescription("This table represents the SIP message rate measurement in\nvarious interval length defined by the \nCvCallVolumeStatsIntvlType object.\n\nEach interval may contain one or more entries to allow for\ndetailed measurement to be collected")
cvSipMsgRateStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 5, 1)).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateStatsIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateStatsIntvlDur"))
if mibBuilder.loadTexts: cvSipMsgRateStatsEntry.setDescription("This is a conceptual-row in cvSipMsgRateStatsTable\nThis entry is created at the system initialization and is\nupdated at every epoch based on CvCallVolumeStatsIntvlType")
cvSipMsgRateStatsIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 5, 1, 1), CvCallVolumeStatsIntvlType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvSipMsgRateStatsIntvlDurUnits.setDescription("The Object indexes in SIP Message Rate Table to select one\namong three interval-tables.\n\nThe different types in this table are represented by \nCvCallVolumeStatsIntvlType")
cvSipMsgRateStatsIntvlDur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 72))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvSipMsgRateStatsIntvlDur.setDescription("This is an index that references to the different past\nperiods in given in interval of SIP message rate table.\nThis range is 1-60 for Seconds and Minutes table \nwherein 1-72 for hours table.")
cvSipMsgRateStatsMaxVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvSipMsgRateStatsMaxVal.setDescription("This object indicates the maximum SIP messages  per second that\nis received for the given interval.")
cvSipMsgRateStatsAvgVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvSipMsgRateStatsAvgVal.setDescription("This object indicates the average SIP messages per second that\nis received for the given interval.")
cvCallRateWMTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 6))
if mibBuilder.loadTexts: cvCallRateWMTable.setDescription("This table represents high watermarks achieved\nby call rate in various interval length defined \nby CvCallVolumeWMIntvlType. \n\nEach interval may contain one or more entries to allow for \ndetailed measurement to be collected")
cvCallRateWMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 6, 1)).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateWMIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateWMIndex"))
if mibBuilder.loadTexts: cvCallRateWMEntry.setDescription("This is a conceptual-row in cvCallRateWMTable\nThis entry is created at the system initialization and is\nupdated whenever \na) This entry is obsolete OR\nb) A new/higher entry is available.\nThese entries are reinitialised/added/deleted  if\ncvCallVolumeWMTableSize is changed")
cvCallRateWMIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 6, 1, 1), CvCallVolumeWMIntvlType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvCallRateWMIntvlDurUnits.setDescription("The Object indexes in call rate Water mark Table to select one\namong four interval-tables.\n\nThe different types in this table are represented by \nCvCallVolumeWMIntvlType")
cvCallRateWMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvCallRateWMIndex.setDescription("This is an index that references to different peaks in\npast period in call rate watermark table.\n\nThe number of watermarks entries stored for each table are \nbased on cvCallVolumeWMTableSize")
cvCallRateWMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallRateWMValue.setDescription("This object indicates high watermark value achieved by the\ncalls per second for the given interval")
cvCallRateWMts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 6, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallRateWMts.setDescription("This object indicates date and Time when the high watermark\nis achieved for calls per second for the given interval")
cvCallLegRateWMTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 7))
if mibBuilder.loadTexts: cvCallLegRateWMTable.setDescription("cvCallLegRateWMTable table represents high watermarks achieved\nby call-leg rate in various interval length defined \nby CvCallVolumeWMIntvlType. \n\nEach interval may contain one or more entries to allow for \ndetailed measurement to be collected")
cvCallLegRateWMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 7, 1)).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateWMIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateWMIndex"))
if mibBuilder.loadTexts: cvCallLegRateWMEntry.setDescription("This is a conceptual-row in cvCallLegRateWMTable\nThis entry is created at the system initialization and is\nupdated whenever \na) This entry is obsolete OR\nb) A new/higher entry is available.\nThese entries are reinitialised/added/deleted  if\ncvCallVolumeWMTableSize is changed")
cvCallLegRateWMIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 7, 1, 1), CvCallVolumeWMIntvlType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvCallLegRateWMIntvlDurUnits.setDescription("The Object indexes in call leg rate Water mark Table to select\none\namong four interval-tables.\n\nThe different types in this table are represented by \nCvCallVolumeWMIntvlType")
cvCallLegRateWMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvCallLegRateWMIndex.setDescription("This is an index that references to different peaks in\npast period in call leg rate watermark table.\n\nThe number of watermarks entries stored for each table are \nbased on cvCallVolumeWMTableSize")
cvCallLegRateWMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallLegRateWMValue.setDescription("This object indicates high watermark value achieved by the\ncall legs per second for the given interval")
cvCallLegRateWMts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 7, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCallLegRateWMts.setDescription("This object indicates date and time when the high watermark\nis achieved for call-legs per second for the given interval")
cvActiveCallWMTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 8))
if mibBuilder.loadTexts: cvActiveCallWMTable.setDescription("This table represents high watermarks achieved\nby active calls in various interval length defined \nby CvCallVolumeWMIntvlType. \n\nEach interval may contain one or more entries to allow \nfor detailed measurement to be collected.")
cvActiveCallWMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 8, 1)).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallWMIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallWMIndex"))
if mibBuilder.loadTexts: cvActiveCallWMEntry.setDescription("This is a conceptual-row in cvActiveCallWMTable\nThis entry is created at the system initialization and is\nupdated whenever \na) This entry is obsolete OR\nb) A new/higher entry is available.\nThese entries are reinitialised/added/deleted  if\ncvCallVolumeWMTableSize is changed")
cvActiveCallWMIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 8, 1, 1), CvCallVolumeWMIntvlType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvActiveCallWMIntvlDurUnits.setDescription("The Object indexes in active call Water mark Table to select\none among four interval-tables.\n\nThe different types in this table are represented by \nCvCallVolumeWMIntvlType")
cvActiveCallWMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvActiveCallWMIndex.setDescription("This is an index that references to different peaks in\npast period in acive call watermark table.\n\nThe number of watermarks entries stored for each table are \nbased on cvCallVolumeWMTableSize")
cvActiveCallWMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvActiveCallWMValue.setDescription("This object indicates high watermark value achieved by the\nactive calls for the given interval")
cvActiveCallWMts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 8, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvActiveCallWMts.setDescription("This object indicates date and time when the high watermark\nis achieved for active calls for the given interval")
cvSipMsgRateWMTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 9))
if mibBuilder.loadTexts: cvSipMsgRateWMTable.setDescription("This table represents of high watermarks achieved\nby SIP message rate in various interval length defined \nby CvCallVolumeWMIntvlType. \n\nEach interval may contain one or more entries to allow for\ndetailed measurement to be collected")
cvSipMsgRateWMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 9, 1)).setIndexNames((0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateWMIntvlDurUnits"), (0, "CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateWMIndex"))
if mibBuilder.loadTexts: cvSipMsgRateWMEntry.setDescription("This is a conceptual-row in cvSipMsgRateWMTable.\nThis entry is created at the system initialization and is\nupdated whenever \na) This entry is obsolete OR\nb) A new/higher entry is available.\nThese entries are reinitialised/added/deleted if\ncvCallVolumeWMTableSize is changed")
cvSipMsgRateWMIntvlDurUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 9, 1, 1), CvCallVolumeWMIntvlType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvSipMsgRateWMIntvlDurUnits.setDescription("The Object indexes in SIP Message rate Water mark Table to\nselect one among four interval-tables.\n\nThe different types in this table are represented by \nCvCallVolumeWMIntvlType")
cvSipMsgRateWMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvSipMsgRateWMIndex.setDescription("This is an index that references to different peaks in\npast period in sip message rate watermark table.\n\nThe number of watermarks entries stored for each table are \nbased on cvCallVolumeWMTableSize")
cvSipMsgRateWMValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvSipMsgRateWMValue.setDescription("This object indicates high watermark value achieved by the\nSIP messages per second for the given interval")
cvSipMsgRateWMts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 9, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvSipMsgRateWMts.setDescription("This object indicates date and time when the high watermark\nis achieved for SIP messages per second for the given interval")
cvCallDurationStatsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(5)).setMaxAccess("readwrite").setUnits("seconds")
if mibBuilder.loadTexts: cvCallDurationStatsThreshold.setDescription("This Object specifies the thresold duration in seconds.\ncvCallDurationStatsTable will monitor all the calls below this \nthreshold.\n\nDecresing the value of the threshold will reset this table.")
cvCallVolumeWMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 63, 1, 4, 3, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvCallVolumeWMTableSize.setDescription("This Object specifies the number of entries the watermark table\nwill maintain.\n\nThis value will decide the number of elements in\ncvCallRateWMTable,\ncvCallLegRateWMTable, cvActiveCallWMTable and\ncvSipMsgRateWMTable.")
cvdcMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 2))
cvdcMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0))
cvdcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 3))
cvdcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1))
cvdcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2))

# Augmentions
cvPeerCfgEntry.registerAugmentions(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolPeerEntry"))
cvCallVolPeerEntry.setIndexNames(*cvPeerCfgEntry.getIndexNames())

# Notifications

cvdcPoorQoVNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0, 1)).setObjects(*(("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryCallOrigin"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteIPAddress"), ) )
if mibBuilder.loadTexts: cvdcPoorQoVNotification.setDescription("Poor quality of voice notification. A\ncvdcPoorQoVNotification is sent at the call disconnection\ntime if the value of cvVoIPCallHistoryIcpif exceeds the\nvalue of cvVoIPPeerCfgIcpif in the call associated peer.")
cvdcPoorQoVNotificationRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0, 2)).setObjects(*(("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryCallOrigin"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddr"), ) )
if mibBuilder.loadTexts: cvdcPoorQoVNotificationRev1.setDescription("Poor quality of voice notification. A\ncvdcPoorQoVNotificationRev1 is sent at the call\ndisconnection time if the value of cvVoIPCallHistoryIcpif\nexceeds the value of cvVoIPPeerCfgIcpif in the call\nassociated peer.")
cvdcActiveDS0sHighNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0, 3)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0s"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0sHighThreshold"), ) )
if mibBuilder.loadTexts: cvdcActiveDS0sHighNotification.setDescription("The cvdcActiveDS0sHighNotification is sent when the\npercentage of active DS0s exceeds \ncvCallActiveDS0sHighThreshold value.")
cvdcActiveDS0sLowNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0, 4)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0sLowThreshold"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0s"), ) )
if mibBuilder.loadTexts: cvdcActiveDS0sLowNotification.setDescription("The cvdcActiveDS0sLowNotification is sent when the\npercentage of active DS0s is less than \ncvCallActiveDS0sLowThreshold value.")
cvdcFallbackNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0, 5)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryFallbackDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryFallbackIcpif"), ("CISCO-DIAL-CONTROL-MIB", "cCallHistoryCallOrigin"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryFallbackLoss"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddr"), ) )
if mibBuilder.loadTexts: cvdcFallbackNotification.setDescription("This cvdcFallbackNotificaion is sent out,\nwhen the destination\n    IP address of call fallback probe fails. This probe\n    generated for beginning of each call, \n    with exception of existing cached entry.")
cvdcPolicyViolationNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 63, 2, 0, 6)).setObjects(*(("DIAL-CONTROL-MIB", "callActivePeerAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "ccVoIPCallActivePolicyName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReversedDirectionPeerAddress"), ("DIAL-CONTROL-MIB", "callActivePeerId"), ) )
if mibBuilder.loadTexts: cvdcPolicyViolationNotification.setDescription("Policy violation voice notification. A\ncvdcPolicyViolationNotification is sent when the call is active\nand has policy violation. It can be media policy violation or\nDSCP policy violation.")

# Groups

cvdcGeneralCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 1)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ) )
if mibBuilder.loadTexts: cvdcGeneralCfgGroup.setDescription("A collection of objects providing the general\nVoice Gateway Call Dial Control configuration capability.\ncvdcGeneralCfgGroup group is superseded by cvdcGeneralCfgGroupRev1.")
cvdcVoiceCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 2)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgDialDigitsPrefix"), ) )
if mibBuilder.loadTexts: cvdcVoiceCfgGroup.setDescription("A collection of objects providing the GSTN (General\nSwitched Telephony Network Voice Dial Control configuration\ncapability.\nGSTN (General Switched Telephony Network), which is\nsupposed to encompass analog, ISDN, Cellular - essentially\nanything circuit switched over the TDM infrastructure.\ncvdcVoiceCfgGroup group is superseded by cvdcVoiceCfgGroupRev1.")
cvdcVoIPCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 3)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgExpectFactor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMinAcceptableQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgUDPChecksumEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDesiredQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIPPrecedence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderRate"), ) )
if mibBuilder.loadTexts: cvdcVoIPCfgGroup.setDescription("A collection of objects providing the VoIP Dial Control\nconfiguration capability.\ncvdcVoIPCfgGroup group is superseded by cvdcVoIPCfgGroupRev1.")
cvCallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 4)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveInSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveOutSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistorySessionTarget"), ) )
if mibBuilder.loadTexts: cvCallGroup.setDescription("A collection of objects providing the GSTN (General\nSwitched Telephony Network Voice Call capability.\nGSTN (General Switched Telephony Network), which is\nsupposed to encompass analog, ISDN, Cellular - essentially\nanything circuit switched over the TDM infrastructure.\ncvCallGroup group is superseded by cvCallGroupRev1.")
cvVoIPCallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 5)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemoteUDPPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemoteIPAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteIPAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteUDPPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySelectedQoS"), ) )
if mibBuilder.loadTexts: cvVoIPCallGroup.setDescription("A collection of objects providing the VoIP Call\ncapability.\ncvVoIPCallGroup group is superseded by cvVoIPCallGroupRev1.")
cvdcGeneralCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 6)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgMaxConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgApplicationName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgIncomingDnisDigits"), ) )
if mibBuilder.loadTexts: cvdcGeneralCfgGroupRev1.setDescription("A collection of objects providing the general\nVoice Gateway Call Dial Control configuration capability.\ncvdcGeneralCfgGroupRev1 group is superseded by cvdcGeneralCfgGroupRev2.")
cvdcVoiceCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 7)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgCasGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgDIDCallEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgDialDigitsPrefix"), ) )
if mibBuilder.loadTexts: cvdcVoiceCfgGroupRev1.setDescription("A collection of objects providing the GSTN (General\nSwitched Telephony Network Voice Dial Control configuration\ncapability.\nGSTN (General Switched Telephony Network), which is\nsupposed to encompass analog, ISDN, Cellular - essentially\nanything circuit switched over the TDM infrastructure.\ncvdcVoiceCfgGroupRev1 group is superseded by cvdcVoiceCfgGroupRev2.")
cvVoIPCallGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 8)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemoteUDPPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemoteIPAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteIPAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteUDPPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLostPackets"), ) )
if mibBuilder.loadTexts: cvVoIPCallGroupRev1.setDescription("A collection of objects providing the VoIP Call\ncapability.\ncvVoIPCallGroupRev1 group is superseded by cvVoIPCallGroupRev2.")
cvCallGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 9)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveInSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveOutSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistorySessionTarget"), ) )
if mibBuilder.loadTexts: cvCallGroupRev1.setDescription("A collection of objects providing the GSTN (General\nSwitched Telephony Network Voice Dial Control configuration\ncapability.\nGSTN (General Switched Telephony Network), which is\nsupposed to encompass analog, ISDN, Cellular - essentially\nanything circuit switched over the TDM infrastructure.\ncvCallGroupRev1 group is superseded by cvCallGroupRev2.")
cvdcGeneralCfgGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 10)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgPreference"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgMaxConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgIncomingDnisDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgApplicationName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ) )
if mibBuilder.loadTexts: cvdcGeneralCfgGroupRev2.setDescription("A collection of objects providing the general\nVoice Gateway Call Dial Control configuration capability.\ncvdcGeneralCfgGroupRev2 group is superseded by cvdcGeneralCfgGroupRev3.")
cvdcVoIPCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 11)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgExpectFactor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDigitRelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMinAcceptableQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgUDPChecksumEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDesiredQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgTechPrefix"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIPPrecedence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderRate"), ) )
if mibBuilder.loadTexts: cvdcVoIPCfgGroupRev1.setDescription("A collection of objects providing the VoIP Dial Control\nconfiguration capability.\ncvdcVoIPCfgGroupRev1 group is superseded by cvdcVoIPCfgGroupRev2.")
cvdcGeneralCfgGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 12)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgHuntStop"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgPreference"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgMaxConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgIncomingDnisDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgApplicationName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ) )
if mibBuilder.loadTexts: cvdcGeneralCfgGroupRev3.setDescription("A collection of objects providing the general\nVoice Gateway Call Dial Control configuration capability.\ncvdcGeneralCfgGroupRev3 group is superseded by cvdcGeneralCfgGroupRev4.")
cvdcVoiceCfgGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 13)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgRegisterE164"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgCasGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgForwardDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgEchoCancellerTest"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgDialDigitsPrefix"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoicePeerCfgDIDCallEnable"), ) )
if mibBuilder.loadTexts: cvdcVoiceCfgGroupRev2.setDescription("A collection of objects providing the GSTN (General\nSwitched Telephony Network Voice Dial Control configuration\ncapability.\nGSTN (General Switched Telephony Network), which is\nsupposed to encompass analog, ISDN, Cellular - essentially\nanything circuit switched over the TDM infrastructure.")
cvdcVoIPCfgGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 14)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgExpectFactor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDigitRelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxBytes"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMinAcceptableQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderBytes"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgUDPChecksumEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgInBandSignaling"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgTechPrefix"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDesiredQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIPPrecedence"), ) )
if mibBuilder.loadTexts: cvdcVoIPCfgGroupRev2.setDescription("A collection of objects providing the VoIP Dial Control\nconfiguration capability.\ncvdcVoIPCfgGroupRev2 group is superseded by cvdcVoIPCfgGroupRev3.")
cvVoIPCallGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 15)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemoteUDPPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemoteIPAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteIPAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemoteUDPPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLostPackets"), ) )
if mibBuilder.loadTexts: cvVoIPCallGroupRev3.setDescription("A collection of objects providing the VoIP Call\ncapability.\ncvVoIPCallGroupRev3 group is superseded by cvVoIPCallGroupRev4.")
cvdcNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 16)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcPoorQoVNotification"), ) )
if mibBuilder.loadTexts: cvdcNotificationGroup.setDescription("The notifications for the CISCO-VOICE-DIAL-CONTROL-MIB\ncvdcNotificationGroup group is superseded by cvdcNotificationGroupRev1.")
cvCallGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 17)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveOutSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveEcanReflectorLocation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveInSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveVoiceTxDuration"), ) )
if mibBuilder.loadTexts: cvCallGroupRev2.setDescription("A collection of objects providing the GSTN (General\nSwitched Telephony Network Voice Dial Control configuration\ncapability.\nGSTN (General Switched Telephony Network), which is\nsupposed to encompass analog, ISDN, Cellular - essentially\nanything circuit switched over the TDM infrastructure.\ncvCallGroupRev2 group is superseded by cvCallGroupRev3.")
cvdcGeneralCfgGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 18)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgSourceCarrierId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgPreference"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgTargetCarrierId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgTargetTrunkGrpLabel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgHuntStop"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgApplicationName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgIncomingDnisDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgSourceTrunkGrpLabel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgMaxConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgDnisMappingName"), ) )
if mibBuilder.loadTexts: cvdcGeneralCfgGroupRev4.setDescription("A collection of objects providing the general\nVoice Gateway Call Dial Control configuration\ncapability.\ncvdcGeneralCfgGroupRev4 group is superseded by cvdcGeneralCfgGroupRev5.")
cvVoIPCallGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 19)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryProtocolCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryUsername"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveUsername"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveProtocolCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaIPAddr"), ) )
if mibBuilder.loadTexts: cvVoIPCallGroupRev4.setDescription("A collection of objects providing the VoIP Call\ncapability.\ncvVoIPCallGroupRev4 group is superseded by cvVoIPCallGroupRev5.")
cvdcNotificationGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 20)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcPoorQoVNotificationRev1"), ) )
if mibBuilder.loadTexts: cvdcNotificationGroupRev1.setDescription("The notifications for the CISCO-VOICE-DIAL-CONTROL-MIB\ncvdcNotificationGroupRev1 group is superseded by cvdcNotificationGroupRev2.")
cvdcVoIPCfgGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 21)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgExpectFactor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDigitRelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxBytes"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMinAcceptableQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderBytes"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgUDPChecksumEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgInBandSignaling"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgTechPrefix"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDesiredQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIPPrecedence"), ) )
if mibBuilder.loadTexts: cvdcVoIPCfgGroupRev3.setDescription("A collection of objects providing the VoIP Dial Control\nconfiguration capability.\ncvdcVoIPCfgGroupRev3 group is superseded by cvdcVoIPCfgGroupRev4.")
cvdcGeneralCfgGroupRev5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 22)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgSourceCarrierId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgPreference"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgTargetCarrierId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgPeerType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgHuntStop"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgApplicationName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgIncomingDnisDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgSourceTrunkGrpLabel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgMaxConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgDnisMappingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgTargetTrunkGrpLabel"), ) )
if mibBuilder.loadTexts: cvdcGeneralCfgGroupRev5.setDescription("A collection of objects providing the general\nVoice Gateway Call Dial Control configuration\ncapability.\ncvdcGeneralCfgGroupRev5 group is superseded by cvdcGeneralCfgGroupRev6.")
cvdcVoIPCfgGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 23)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgExpectFactor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDigitRelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxBytes"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgTechPrefix"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDesiredQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFaxRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderBytes"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMediaPolicyNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgUDPChecksumEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgRedirectip2ip"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgInBandSignaling"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDesiredQoSVideo"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMinAcceptableQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgDSCPPolicyNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMinAcceptableQoSVideo"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgMediaSetting"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIPPrecedence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgVADEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgIcpif"), ) )
if mibBuilder.loadTexts: cvdcVoIPCfgGroupRev4.setDescription("A collection of objects providing the VoIP Dial Control\nconfiguration capability.")
cvCallGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 24)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryAccountCode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveAccountCode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveOutSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveEcanReflectorLocation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevelRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveInSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveVoiceTxDuration"), ) )
if mibBuilder.loadTexts: cvCallGroupRev3.setDescription("A collection of objects providing the GSTN (General\nSwitched Telephony Network Voice Dial Control configuration\ncapability.\nGSTN (General Switched Telephony Network), which is\nsupposed to encompass analog, ISDN, Cellular - essentially\nanything circuit switched over the TDM infrastructure.\ncvCallGroupRev3 group is superseded by cvCallGroupRev4.")
cvCallGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 25)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryAccountCode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveAccountCode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveOutSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveEcanReflectorLocation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevelRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveInSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveVoiceTxDuration"), ) )
if mibBuilder.loadTexts: cvCallGroupRev4.setDescription("A collection of objects providing the GSTN (General\nSwitched Telephony Network Voice Dial Control configuration\ncapability.\nGSTN (General Switched Telephony Network), which is\nsupposed to encompass analog, ISDN, Cellular - essentially\nanything circuit switched over the TDM infrastructure.\ncvCallGroupRev4 group is superseded by cvCallGroupRev5.")
cvVoIPCallGroupRev5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 26)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSRTPEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryProtocolCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryUsername"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveUsername"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySRTPEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveProtocolCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaIPAddr"), ) )
if mibBuilder.loadTexts: cvVoIPCallGroupRev5.setDescription("A collection of objects providing the VoIP Call\ncapability.\ncvVoIPCallGroupRev5 group is superseded by cvVoIPCallGroupRev6.")
cvCallGroupRev5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 27)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryAccountCode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveEcanReflectorLocation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveAccountCode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0sHighNotifyEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryImgPageCount"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveNoiseLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0s"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveERLLevelRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveFaxTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCoderTypeRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0sLowThreshold"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallerIDBlock"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0sHighThreshold"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveACOMLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveInSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveDS0sLowNotifyEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveOutSignalLevel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveVoiceTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveTxDuration"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistorySessionTarget"), ) )
if mibBuilder.loadTexts: cvCallGroupRev5.setDescription("A collection of objects providing the GSTN (General\nSwitched Telephony Network Voice Dial Control configuration\ncapability.\nGSTN (General Switched Telephony Network), which is\nsupposed to encompass analog, ISDN, Cellular - essentially\nanything circuit switched over the TDM infrastructure.")
cvdcNotificationGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 28)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcActiveDS0sHighNotification"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcPoorQoVNotificationRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcActiveDS0sLowNotification"), ) )
if mibBuilder.loadTexts: cvdcNotificationGroupRev2.setDescription("The notifications for the CISCO-VOICE-DIAL-CONTROL-MIB\ncvdcNotificationGroupRev2 group is superseded by cvdcNotificationGroupRev3.")
cvVoIPCallGroupRev6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 29)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSRTPEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryProtocolCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryFallbackDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithSilence"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLatePackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryFallbackLoss"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryUsername"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRemSigIPAddr"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveUsername"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLostPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithPrediction"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRoundTripDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSelectedQoS"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryReceiveDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryLoWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySRTPEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveEarlyPackets"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemSigIPAddrT"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryGapFillWithInterpolation"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveHiWaterPlayoutDelay"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveConnectionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionTarget"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionProtocol"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOnTimeRvPlayout"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaPort"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveGapFillWithRedundancy"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryFallbackIcpif"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveProtocolCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRemMediaIPAddr"), ) )
if mibBuilder.loadTexts: cvVoIPCallGroupRev6.setDescription("A collection of objects providing the VoIP Call\ncapability.")
cvdcGeneralCfgGroupRev6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 30)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralPoorQoVNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgPreference"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgSourceTrunkGrpLabel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgTargetCarrierId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralFallbackNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgPeerType"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralDSCPPolicyNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgRowStatus"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCfgIfIndex"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgDnisMappingName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgHuntStop"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgApplicationName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgTargetTrunkGrpLabel"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgMaxConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgIncomingDnisDigits"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvGeneralMediaPolicyNotificationEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvPeerCommonCfgSourceCarrierId"), ) )
if mibBuilder.loadTexts: cvdcGeneralCfgGroupRev6.setDescription("A collection of objects providing the general\nVoice Gateway Call Dial Control configuration\ncapability.")
cvdcNotificationGroupRev3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 31)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcActiveDS0sHighNotification"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcPoorQoVNotificationRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcActiveDS0sLowNotification"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcFallbackNotification"), ) )
if mibBuilder.loadTexts: cvdcNotificationGroupRev3.setDescription("The notifications for the CISCO-VOICE-DIAL-CONTROL-MIB.\n\nThis group  cvdcNotificationGroupRev3 is deprecated and replaced\nby cvdcNotificationGroupRev4.\ncvdcNotificationGroupRev3 group is superseded by cvdcNotificationGroupRev4.")
cvdcVoIPCfgAmrNbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 32)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCRC"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgOctetAligned"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgBitRates"), ) )
if mibBuilder.loadTexts: cvdcVoIPCfgAmrNbGroup.setDescription("A collection of objects providing the VoIP Dial Control\nconfiguration capability for GSM AMR-NB codec.")
cvVoIPCallAmrNbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 33)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCRC"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveInterleaving"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveChannels"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryRobustSorting"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryBitRates"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryPtime"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryOctetAligned"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveEncap"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCRC"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryInterleaving"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveModeChgPeriod"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveMaxPtime"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveBitRates"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveOctetAligned"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveRobustSorting"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryModeChgPeriod"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryMaxPtime"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryModeChgNeighbor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveModeChgNeighbor"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryEncap"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActivePtime"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryChannels"), ) )
if mibBuilder.loadTexts: cvVoIPCallAmrNbGroup.setDescription("A collection of objects providing GSM AMR-NB\ncodec related information.")
cvdcVoIPCfgIlbcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 34)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCoderMode"), ) )
if mibBuilder.loadTexts: cvdcVoIPCfgIlbcGroup.setDescription("A collection of objects providing the VoIP Dial Control\nconfiguration capability for iLBC codec.")
cvVoIPCallIlbcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 35)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCoderMode"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCoderMode"), ) )
if mibBuilder.loadTexts: cvVoIPCallIlbcGroup.setDescription("A collection of objects providing iLBC\ncodec related information.")
cvCallGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 36)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallActiveCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallHistoryCallId"), ) )
if mibBuilder.loadTexts: cvCallGroupSup1.setDescription("This group supplements cvCallGroup to provide\nthe call identifier for the telephony leg of\nthe gateway call.")
cvVoIPCallGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 37)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCallReferenceId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCallReferenceId"), ) )
if mibBuilder.loadTexts: cvVoIPCallGroupSup1.setDescription("This group supplements cvVoIPCallGroup to\nprovide the call identifier for the VoIP\nleg of the gateway call.\n\nThe group cvVoIPCallGroupSup1 is deprecated and replaced by\ncvVoIPCallGroupSup2.")
cvCallVolumeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 38)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolConnTotalActiveConnections"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolMediaIncomingCalls"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolConnActiveConnection"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolMediaOutgoingCalls"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolConnMaxCallConnectionLicenese"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolPeerIncomingCalls"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolPeerOutgoingCalls"), ) )
if mibBuilder.loadTexts: cvCallVolumeGroup.setDescription("This group provides the information about the call-volume\nin the voice gateway.")
cvCallRateMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 39)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateHiWaterMark"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorEnable"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorTime"), ) )
if mibBuilder.loadTexts: cvCallRateMonitorGroup.setDescription("This group represents the objects used to\nmonitor the call-rate.")
cvdcVoIPCfgISACGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 40)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgFrameSize"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgBitRate"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPPeerCfgCodingMode"), ) )
if mibBuilder.loadTexts: cvdcVoIPCfgISACGroup.setDescription("A collection of objects providing iSAC codec related\ninformation.")
cvdcNotificationGroupRev4 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 41)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcPolicyViolationNotification"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcActiveDS0sHighNotification"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcPoorQoVNotificationRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcActiveDS0sLowNotification"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcFallbackNotification"), ) )
if mibBuilder.loadTexts: cvdcNotificationGroupRev4.setDescription("The notifications for the CISCO-VOICE-DIAL-CONTROL-MIB.")
cvVoIPCallGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 42)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCallReferenceId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReversedDirectionPeerAddress"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCallReferenceId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "ccVoIPCallActivePolicyName"), ) )
if mibBuilder.loadTexts: cvVoIPCallGroupSup2.setDescription("This group supplements cvVoIPCallGroup to provide the call\nidentifier and policy for the VoIP leg of the gateway call.\ncvVoIPCallGroupSup2 group is superseded by cvVoIPCallGroupSup3.")
cvVoIPCallGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 43)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCallId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistorySessionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveCallReferenceId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveSessionId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallHistoryCallReferenceId"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "ccVoIPCallActivePolicyName"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallActiveReversedDirectionPeerAddress"), ) )
if mibBuilder.loadTexts: cvVoIPCallGroupSup3.setDescription("This group supplements cvVoIPCallGroup to identify the VoIP leg\nof the gateway call.")
cvdcCallVolumeStatsHistory = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 2, 44)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateStatsMaxVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateWMValue"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallDurationStatsAvgVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallDurationStatsThreshold"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateWMts"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateStatsMaxVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallStatsAvgVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallWMts"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateStatsAvgVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateStatsMaxVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateWMts"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateWMts"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallDurationStatsMaxVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallStatsMaxVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvActiveCallWMValue"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateStatsAvgVal"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvSipMsgRateWMValue"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolumeWMTableSize"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallLegRateWMValue"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateStatsAvgVal"), ) )
if mibBuilder.loadTexts: cvdcCallVolumeStatsHistory.setDescription("This group provides the information about the Call Volume Stats\nHistory information in the voice gateway.")

# Compliances

cvdcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 1)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroup"), ) )
if mibBuilder.loadTexts: cvdcMIBCompliance.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 2)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev1"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev1.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 3)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev1"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev2.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 4)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev2"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev3.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 5)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev2"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev4.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 6)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev2"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev5.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 7)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev2"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev6.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 8)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev2"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev7.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 9)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev3"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev8.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 10)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev5"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev9.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 11)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev4"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev10.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 12)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev4"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev11.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 13)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev12.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 14)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev13.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev14 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 15)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev14.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev15 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 16)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev15.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev16 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 17)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev16.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DIAL CONTROL MIB")
cvdcMIBComplianceRev17 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 18)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev17.setDescription("The compliance statement for the entities\nthat implement CISCO-VOICE-DIAL-CONTROL-MIB.")
cvdcMIBComplianceRev18 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 19)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolumeGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev18.setDescription("The compliance statement for the entities\nthat implement CISCO-VOICE-DIAL-CONTROL-MIB.")
cvdcMIBComplianceRev19 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 20)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgISACGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolumeGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev19.setDescription("The compliance statement for the entities\nthat implement CISCO-VOICE-DIAL-CONTROL-MIB.")
cvdcMIBComplianceRev20 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 21)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupSup2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgISACGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolumeGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev20.setDescription("The compliance statement for the entities\nthat implement CISCO-VOICE-DIAL-CONTROL-MIB.")
cvdcMIBComplianceRev21 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 22)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgISACGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupSup3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolumeGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev21.setDescription("The compliance statement for the entities\nthat implement CISCO-VOICE-DIAL-CONTROL-MIB.")
cvdcMIBComplianceRev22 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 63, 3, 1, 23)).setObjects(*(("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgISACGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcNotificationGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoiceCfgGroupRev2"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallIlbcGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgGroupRev4"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallVolumeGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupRev5"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallRateMonitorGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcCallVolumeStatsHistory"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallGroupSup3"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcGeneralCfgGroupRev6"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvVoIPCallAmrNbGroup"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvCallGroupSup1"), ("CISCO-VOICE-DIAL-CONTROL-MIB", "cvdcVoIPCfgIlbcGroup"), ) )
if mibBuilder.loadTexts: cvdcMIBComplianceRev22.setDescription("The compliance statement for the entities\nthat implement CISCO-VOICE-DIAL-CONTROL-MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-VOICE-DIAL-CONTROL-MIB", PYSNMP_MODULE_ID=ciscoVoiceDialControlMIB)

# Types
mibBuilder.exportSymbols("CISCO-VOICE-DIAL-CONTROL-MIB", CvAmrNbBitRateMode=CvAmrNbBitRateMode, CvAmrNbRtpEncap=CvAmrNbRtpEncap, CvCallConnectionType=CvCallConnectionType, CvCallVolumeStatsIntvlType=CvCallVolumeStatsIntvlType, CvCallVolumeWMIntvlType=CvCallVolumeWMIntvlType, CvCasGroup=CvCasGroup, CvIlbcFrameMode=CvIlbcFrameMode, CvSessionProtocol=CvSessionProtocol)

# Objects
mibBuilder.exportSymbols("CISCO-VOICE-DIAL-CONTROL-MIB", ciscoVoiceDialControlMIB=ciscoVoiceDialControlMIB, cvdcMIBObjects=cvdcMIBObjects, cvGeneralConfiguration=cvGeneralConfiguration, cvGeneralPoorQoVNotificationEnable=cvGeneralPoorQoVNotificationEnable, cvGeneralFallbackNotificationEnable=cvGeneralFallbackNotificationEnable, cvGeneralDSCPPolicyNotificationEnable=cvGeneralDSCPPolicyNotificationEnable, cvGeneralMediaPolicyNotificationEnable=cvGeneralMediaPolicyNotificationEnable, cvPeer=cvPeer, cvPeerCfgTable=cvPeerCfgTable, cvPeerCfgEntry=cvPeerCfgEntry, cvPeerCfgIndex=cvPeerCfgIndex, cvPeerCfgIfIndex=cvPeerCfgIfIndex, cvPeerCfgType=cvPeerCfgType, cvPeerCfgRowStatus=cvPeerCfgRowStatus, cvPeerCfgPeerType=cvPeerCfgPeerType, cvVoicePeerCfgTable=cvVoicePeerCfgTable, cvVoicePeerCfgEntry=cvVoicePeerCfgEntry, cvVoicePeerCfgSessionTarget=cvVoicePeerCfgSessionTarget, cvVoicePeerCfgDialDigitsPrefix=cvVoicePeerCfgDialDigitsPrefix, cvVoicePeerCfgDIDCallEnable=cvVoicePeerCfgDIDCallEnable, cvVoicePeerCfgCasGroup=cvVoicePeerCfgCasGroup, cvVoicePeerCfgRegisterE164=cvVoicePeerCfgRegisterE164, cvVoicePeerCfgForwardDigits=cvVoicePeerCfgForwardDigits, cvVoicePeerCfgEchoCancellerTest=cvVoicePeerCfgEchoCancellerTest, cvVoIPPeerCfgTable=cvVoIPPeerCfgTable, cvVoIPPeerCfgEntry=cvVoIPPeerCfgEntry, cvVoIPPeerCfgSessionProtocol=cvVoIPPeerCfgSessionProtocol, cvVoIPPeerCfgDesiredQoS=cvVoIPPeerCfgDesiredQoS, cvVoIPPeerCfgMinAcceptableQoS=cvVoIPPeerCfgMinAcceptableQoS, cvVoIPPeerCfgSessionTarget=cvVoIPPeerCfgSessionTarget, cvVoIPPeerCfgCoderRate=cvVoIPPeerCfgCoderRate, cvVoIPPeerCfgFaxRate=cvVoIPPeerCfgFaxRate, cvVoIPPeerCfgVADEnable=cvVoIPPeerCfgVADEnable, cvVoIPPeerCfgExpectFactor=cvVoIPPeerCfgExpectFactor, cvVoIPPeerCfgIcpif=cvVoIPPeerCfgIcpif, cvVoIPPeerCfgPoorQoVNotificationEnable=cvVoIPPeerCfgPoorQoVNotificationEnable, cvVoIPPeerCfgUDPChecksumEnable=cvVoIPPeerCfgUDPChecksumEnable, cvVoIPPeerCfgIPPrecedence=cvVoIPPeerCfgIPPrecedence, cvVoIPPeerCfgTechPrefix=cvVoIPPeerCfgTechPrefix, cvVoIPPeerCfgDigitRelay=cvVoIPPeerCfgDigitRelay, cvVoIPPeerCfgCoderBytes=cvVoIPPeerCfgCoderBytes, cvVoIPPeerCfgFaxBytes=cvVoIPPeerCfgFaxBytes, cvVoIPPeerCfgInBandSignaling=cvVoIPPeerCfgInBandSignaling, cvVoIPPeerCfgMediaSetting=cvVoIPPeerCfgMediaSetting, cvVoIPPeerCfgDesiredQoSVideo=cvVoIPPeerCfgDesiredQoSVideo, cvVoIPPeerCfgMinAcceptableQoSVideo=cvVoIPPeerCfgMinAcceptableQoSVideo, cvVoIPPeerCfgRedirectip2ip=cvVoIPPeerCfgRedirectip2ip, cvVoIPPeerCfgOctetAligned=cvVoIPPeerCfgOctetAligned, cvVoIPPeerCfgBitRates=cvVoIPPeerCfgBitRates, cvVoIPPeerCfgCRC=cvVoIPPeerCfgCRC, cvVoIPPeerCfgCoderMode=cvVoIPPeerCfgCoderMode, cvVoIPPeerCfgCodingMode=cvVoIPPeerCfgCodingMode, cvVoIPPeerCfgBitRate=cvVoIPPeerCfgBitRate, cvVoIPPeerCfgFrameSize=cvVoIPPeerCfgFrameSize, cvVoIPPeerCfgDSCPPolicyNotificationEnable=cvVoIPPeerCfgDSCPPolicyNotificationEnable, cvVoIPPeerCfgMediaPolicyNotificationEnable=cvVoIPPeerCfgMediaPolicyNotificationEnable, cvPeerCommonCfgTable=cvPeerCommonCfgTable, cvPeerCommonCfgEntry=cvPeerCommonCfgEntry, cvPeerCommonCfgIncomingDnisDigits=cvPeerCommonCfgIncomingDnisDigits, cvPeerCommonCfgMaxConnections=cvPeerCommonCfgMaxConnections, cvPeerCommonCfgApplicationName=cvPeerCommonCfgApplicationName, cvPeerCommonCfgPreference=cvPeerCommonCfgPreference, cvPeerCommonCfgHuntStop=cvPeerCommonCfgHuntStop, cvPeerCommonCfgDnisMappingName=cvPeerCommonCfgDnisMappingName, cvPeerCommonCfgSourceCarrierId=cvPeerCommonCfgSourceCarrierId, cvPeerCommonCfgTargetCarrierId=cvPeerCommonCfgTargetCarrierId, cvPeerCommonCfgSourceTrunkGrpLabel=cvPeerCommonCfgSourceTrunkGrpLabel, cvPeerCommonCfgTargetTrunkGrpLabel=cvPeerCommonCfgTargetTrunkGrpLabel, cvGatewayCallActive=cvGatewayCallActive, cvCallActiveTable=cvCallActiveTable, cvCallActiveEntry=cvCallActiveEntry, cvCallActiveConnectionId=cvCallActiveConnectionId, cvCallActiveTxDuration=cvCallActiveTxDuration, cvCallActiveVoiceTxDuration=cvCallActiveVoiceTxDuration, cvCallActiveFaxTxDuration=cvCallActiveFaxTxDuration, cvCallActiveCoderTypeRate=cvCallActiveCoderTypeRate, cvCallActiveNoiseLevel=cvCallActiveNoiseLevel, cvCallActiveACOMLevel=cvCallActiveACOMLevel, cvCallActiveOutSignalLevel=cvCallActiveOutSignalLevel, cvCallActiveInSignalLevel=cvCallActiveInSignalLevel, cvCallActiveERLLevel=cvCallActiveERLLevel, cvCallActiveSessionTarget=cvCallActiveSessionTarget, cvCallActiveImgPageCount=cvCallActiveImgPageCount, cvCallActiveCallingName=cvCallActiveCallingName, cvCallActiveCallerIDBlock=cvCallActiveCallerIDBlock, cvCallActiveEcanReflectorLocation=cvCallActiveEcanReflectorLocation, cvCallActiveAccountCode=cvCallActiveAccountCode, cvCallActiveERLLevelRev1=cvCallActiveERLLevelRev1, cvCallActiveCallId=cvCallActiveCallId, cvVoIPCallActiveTable=cvVoIPCallActiveTable, cvVoIPCallActiveEntry=cvVoIPCallActiveEntry, cvVoIPCallActiveConnectionId=cvVoIPCallActiveConnectionId, cvVoIPCallActiveRemoteIPAddress=cvVoIPCallActiveRemoteIPAddress, cvVoIPCallActiveRemoteUDPPort=cvVoIPCallActiveRemoteUDPPort, cvVoIPCallActiveRoundTripDelay=cvVoIPCallActiveRoundTripDelay, cvVoIPCallActiveSelectedQoS=cvVoIPCallActiveSelectedQoS, cvVoIPCallActiveSessionProtocol=cvVoIPCallActiveSessionProtocol, cvVoIPCallActiveSessionTarget=cvVoIPCallActiveSessionTarget, cvVoIPCallActiveOnTimeRvPlayout=cvVoIPCallActiveOnTimeRvPlayout, cvVoIPCallActiveGapFillWithSilence=cvVoIPCallActiveGapFillWithSilence, cvVoIPCallActiveGapFillWithPrediction=cvVoIPCallActiveGapFillWithPrediction, cvVoIPCallActiveGapFillWithInterpolation=cvVoIPCallActiveGapFillWithInterpolation, cvVoIPCallActiveGapFillWithRedundancy=cvVoIPCallActiveGapFillWithRedundancy, cvVoIPCallActiveHiWaterPlayoutDelay=cvVoIPCallActiveHiWaterPlayoutDelay, cvVoIPCallActiveLoWaterPlayoutDelay=cvVoIPCallActiveLoWaterPlayoutDelay, cvVoIPCallActiveReceiveDelay=cvVoIPCallActiveReceiveDelay, cvVoIPCallActiveVADEnable=cvVoIPCallActiveVADEnable, cvVoIPCallActiveCoderTypeRate=cvVoIPCallActiveCoderTypeRate, cvVoIPCallActiveLostPackets=cvVoIPCallActiveLostPackets, cvVoIPCallActiveEarlyPackets=cvVoIPCallActiveEarlyPackets, cvVoIPCallActiveLatePackets=cvVoIPCallActiveLatePackets, cvVoIPCallActiveUsername=cvVoIPCallActiveUsername, cvVoIPCallActiveProtocolCallId=cvVoIPCallActiveProtocolCallId, cvVoIPCallActiveRemSigIPAddrT=cvVoIPCallActiveRemSigIPAddrT, cvVoIPCallActiveRemSigIPAddr=cvVoIPCallActiveRemSigIPAddr, cvVoIPCallActiveRemSigPort=cvVoIPCallActiveRemSigPort, cvVoIPCallActiveRemMediaIPAddrT=cvVoIPCallActiveRemMediaIPAddrT, cvVoIPCallActiveRemMediaIPAddr=cvVoIPCallActiveRemMediaIPAddr, cvVoIPCallActiveRemMediaPort=cvVoIPCallActiveRemMediaPort, cvVoIPCallActiveSRTPEnable=cvVoIPCallActiveSRTPEnable, cvVoIPCallActiveOctetAligned=cvVoIPCallActiveOctetAligned, cvVoIPCallActiveBitRates=cvVoIPCallActiveBitRates, cvVoIPCallActiveModeChgPeriod=cvVoIPCallActiveModeChgPeriod, cvVoIPCallActiveModeChgNeighbor=cvVoIPCallActiveModeChgNeighbor, cvVoIPCallActiveMaxPtime=cvVoIPCallActiveMaxPtime, cvVoIPCallActiveCRC=cvVoIPCallActiveCRC)
mibBuilder.exportSymbols("CISCO-VOICE-DIAL-CONTROL-MIB", cvVoIPCallActiveRobustSorting=cvVoIPCallActiveRobustSorting, cvVoIPCallActiveEncap=cvVoIPCallActiveEncap, cvVoIPCallActiveInterleaving=cvVoIPCallActiveInterleaving, cvVoIPCallActivePtime=cvVoIPCallActivePtime, cvVoIPCallActiveChannels=cvVoIPCallActiveChannels, cvVoIPCallActiveCoderMode=cvVoIPCallActiveCoderMode, cvVoIPCallActiveCallId=cvVoIPCallActiveCallId, cvVoIPCallActiveCallReferenceId=cvVoIPCallActiveCallReferenceId, ccVoIPCallActivePolicyName=ccVoIPCallActivePolicyName, cvVoIPCallActiveReversedDirectionPeerAddress=cvVoIPCallActiveReversedDirectionPeerAddress, cvVoIPCallActiveSessionId=cvVoIPCallActiveSessionId, cvCallActiveDS0s=cvCallActiveDS0s, cvCallActiveDS0sHighThreshold=cvCallActiveDS0sHighThreshold, cvCallActiveDS0sLowThreshold=cvCallActiveDS0sLowThreshold, cvCallActiveDS0sHighNotifyEnable=cvCallActiveDS0sHighNotifyEnable, cvCallActiveDS0sLowNotifyEnable=cvCallActiveDS0sLowNotifyEnable, cvCallVolume=cvCallVolume, cvCallVolConnTable=cvCallVolConnTable, cvCallVolConnEntry=cvCallVolConnEntry, cvCallVolConnIndex=cvCallVolConnIndex, cvCallVolConnActiveConnection=cvCallVolConnActiveConnection, cvCallVolConnTotalActiveConnections=cvCallVolConnTotalActiveConnections, cvCallVolConnMaxCallConnectionLicenese=cvCallVolConnMaxCallConnectionLicenese, cvCallVolPeerTable=cvCallVolPeerTable, cvCallVolPeerEntry=cvCallVolPeerEntry, cvCallVolPeerIncomingCalls=cvCallVolPeerIncomingCalls, cvCallVolPeerOutgoingCalls=cvCallVolPeerOutgoingCalls, cvCallVolIfTable=cvCallVolIfTable, cvCallVolIfEntry=cvCallVolIfEntry, cvCallVolMediaIncomingCalls=cvCallVolMediaIncomingCalls, cvCallVolMediaOutgoingCalls=cvCallVolMediaOutgoingCalls, cvCallRateMonitor=cvCallRateMonitor, cvCallRateMonitorEnable=cvCallRateMonitorEnable, cvCallRateMonitorTime=cvCallRateMonitorTime, cvCallRate=cvCallRate, cvCallRateHiWaterMark=cvCallRateHiWaterMark, cvGatewayCallHistory=cvGatewayCallHistory, cvCallHistoryTable=cvCallHistoryTable, cvCallHistoryEntry=cvCallHistoryEntry, cvCallHistoryConnectionId=cvCallHistoryConnectionId, cvCallHistoryTxDuration=cvCallHistoryTxDuration, cvCallHistoryVoiceTxDuration=cvCallHistoryVoiceTxDuration, cvCallHistoryFaxTxDuration=cvCallHistoryFaxTxDuration, cvCallHistoryCoderTypeRate=cvCallHistoryCoderTypeRate, cvCallHistoryNoiseLevel=cvCallHistoryNoiseLevel, cvCallHistoryACOMLevel=cvCallHistoryACOMLevel, cvCallHistorySessionTarget=cvCallHistorySessionTarget, cvCallHistoryImgPageCount=cvCallHistoryImgPageCount, cvCallHistoryCallingName=cvCallHistoryCallingName, cvCallHistoryCallerIDBlock=cvCallHistoryCallerIDBlock, cvCallHistoryAccountCode=cvCallHistoryAccountCode, cvCallHistoryCallId=cvCallHistoryCallId, cvVoIPCallHistoryTable=cvVoIPCallHistoryTable, cvVoIPCallHistoryEntry=cvVoIPCallHistoryEntry, cvVoIPCallHistoryConnectionId=cvVoIPCallHistoryConnectionId, cvVoIPCallHistoryRemoteIPAddress=cvVoIPCallHistoryRemoteIPAddress, cvVoIPCallHistoryRemoteUDPPort=cvVoIPCallHistoryRemoteUDPPort, cvVoIPCallHistoryRoundTripDelay=cvVoIPCallHistoryRoundTripDelay, cvVoIPCallHistorySelectedQoS=cvVoIPCallHistorySelectedQoS, cvVoIPCallHistorySessionProtocol=cvVoIPCallHistorySessionProtocol, cvVoIPCallHistorySessionTarget=cvVoIPCallHistorySessionTarget, cvVoIPCallHistoryOnTimeRvPlayout=cvVoIPCallHistoryOnTimeRvPlayout, cvVoIPCallHistoryGapFillWithSilence=cvVoIPCallHistoryGapFillWithSilence, cvVoIPCallHistoryGapFillWithPrediction=cvVoIPCallHistoryGapFillWithPrediction, cvVoIPCallHistoryGapFillWithInterpolation=cvVoIPCallHistoryGapFillWithInterpolation, cvVoIPCallHistoryGapFillWithRedundancy=cvVoIPCallHistoryGapFillWithRedundancy, cvVoIPCallHistoryHiWaterPlayoutDelay=cvVoIPCallHistoryHiWaterPlayoutDelay, cvVoIPCallHistoryLoWaterPlayoutDelay=cvVoIPCallHistoryLoWaterPlayoutDelay, cvVoIPCallHistoryReceiveDelay=cvVoIPCallHistoryReceiveDelay, cvVoIPCallHistoryVADEnable=cvVoIPCallHistoryVADEnable, cvVoIPCallHistoryCoderTypeRate=cvVoIPCallHistoryCoderTypeRate, cvVoIPCallHistoryIcpif=cvVoIPCallHistoryIcpif, cvVoIPCallHistoryLostPackets=cvVoIPCallHistoryLostPackets, cvVoIPCallHistoryEarlyPackets=cvVoIPCallHistoryEarlyPackets, cvVoIPCallHistoryLatePackets=cvVoIPCallHistoryLatePackets, cvVoIPCallHistoryUsername=cvVoIPCallHistoryUsername, cvVoIPCallHistoryProtocolCallId=cvVoIPCallHistoryProtocolCallId, cvVoIPCallHistoryRemSigIPAddrT=cvVoIPCallHistoryRemSigIPAddrT, cvVoIPCallHistoryRemSigIPAddr=cvVoIPCallHistoryRemSigIPAddr, cvVoIPCallHistoryRemSigPort=cvVoIPCallHistoryRemSigPort, cvVoIPCallHistoryRemMediaIPAddrT=cvVoIPCallHistoryRemMediaIPAddrT, cvVoIPCallHistoryRemMediaIPAddr=cvVoIPCallHistoryRemMediaIPAddr, cvVoIPCallHistoryRemMediaPort=cvVoIPCallHistoryRemMediaPort, cvVoIPCallHistorySRTPEnable=cvVoIPCallHistorySRTPEnable, cvVoIPCallHistoryFallbackIcpif=cvVoIPCallHistoryFallbackIcpif, cvVoIPCallHistoryFallbackLoss=cvVoIPCallHistoryFallbackLoss, cvVoIPCallHistoryFallbackDelay=cvVoIPCallHistoryFallbackDelay, cvVoIPCallHistoryOctetAligned=cvVoIPCallHistoryOctetAligned, cvVoIPCallHistoryBitRates=cvVoIPCallHistoryBitRates, cvVoIPCallHistoryModeChgPeriod=cvVoIPCallHistoryModeChgPeriod, cvVoIPCallHistoryModeChgNeighbor=cvVoIPCallHistoryModeChgNeighbor, cvVoIPCallHistoryMaxPtime=cvVoIPCallHistoryMaxPtime, cvVoIPCallHistoryCRC=cvVoIPCallHistoryCRC, cvVoIPCallHistoryRobustSorting=cvVoIPCallHistoryRobustSorting, cvVoIPCallHistoryEncap=cvVoIPCallHistoryEncap, cvVoIPCallHistoryInterleaving=cvVoIPCallHistoryInterleaving, cvVoIPCallHistoryPtime=cvVoIPCallHistoryPtime, cvVoIPCallHistoryChannels=cvVoIPCallHistoryChannels, cvVoIPCallHistoryCoderMode=cvVoIPCallHistoryCoderMode, cvVoIPCallHistoryCallId=cvVoIPCallHistoryCallId, cvVoIPCallHistoryCallReferenceId=cvVoIPCallHistoryCallReferenceId, cvVoIPCallHistorySessionId=cvVoIPCallHistorySessionId, cvCallVolumeStatsHistory=cvCallVolumeStatsHistory, cvCallRateStatsTable=cvCallRateStatsTable, cvCallRateStatsEntry=cvCallRateStatsEntry, cvCallRateStatsIntvlDurUnits=cvCallRateStatsIntvlDurUnits, cvCallRateStatsIntvlDur=cvCallRateStatsIntvlDur, cvCallRateStatsMaxVal=cvCallRateStatsMaxVal, cvCallRateStatsAvgVal=cvCallRateStatsAvgVal, cvCallLegRateStatsTable=cvCallLegRateStatsTable, cvCallLegRateStatsEntry=cvCallLegRateStatsEntry, cvCallLegRateStatsIntvlDurUnits=cvCallLegRateStatsIntvlDurUnits, cvCallLegRateStatsIntvlDur=cvCallLegRateStatsIntvlDur, cvCallLegRateStatsMaxVal=cvCallLegRateStatsMaxVal, cvCallLegRateStatsAvgVal=cvCallLegRateStatsAvgVal, cvActiveCallStatsTable=cvActiveCallStatsTable, cvActiveCallStatsEntry=cvActiveCallStatsEntry, cvActiveCallStatsIntvlDurUnits=cvActiveCallStatsIntvlDurUnits, cvActiveCallStatsIntvlDur=cvActiveCallStatsIntvlDur, cvActiveCallStatsMaxVal=cvActiveCallStatsMaxVal, cvActiveCallStatsAvgVal=cvActiveCallStatsAvgVal, cvCallDurationStatsTable=cvCallDurationStatsTable, cvCallDurationStatsEntry=cvCallDurationStatsEntry, cvCallDurationStatsIntvlDurUnits=cvCallDurationStatsIntvlDurUnits, cvCallDurationStatsIntvlDur=cvCallDurationStatsIntvlDur, cvCallDurationStatsMaxVal=cvCallDurationStatsMaxVal, cvCallDurationStatsAvgVal=cvCallDurationStatsAvgVal)
mibBuilder.exportSymbols("CISCO-VOICE-DIAL-CONTROL-MIB", cvSipMsgRateStatsTable=cvSipMsgRateStatsTable, cvSipMsgRateStatsEntry=cvSipMsgRateStatsEntry, cvSipMsgRateStatsIntvlDurUnits=cvSipMsgRateStatsIntvlDurUnits, cvSipMsgRateStatsIntvlDur=cvSipMsgRateStatsIntvlDur, cvSipMsgRateStatsMaxVal=cvSipMsgRateStatsMaxVal, cvSipMsgRateStatsAvgVal=cvSipMsgRateStatsAvgVal, cvCallRateWMTable=cvCallRateWMTable, cvCallRateWMEntry=cvCallRateWMEntry, cvCallRateWMIntvlDurUnits=cvCallRateWMIntvlDurUnits, cvCallRateWMIndex=cvCallRateWMIndex, cvCallRateWMValue=cvCallRateWMValue, cvCallRateWMts=cvCallRateWMts, cvCallLegRateWMTable=cvCallLegRateWMTable, cvCallLegRateWMEntry=cvCallLegRateWMEntry, cvCallLegRateWMIntvlDurUnits=cvCallLegRateWMIntvlDurUnits, cvCallLegRateWMIndex=cvCallLegRateWMIndex, cvCallLegRateWMValue=cvCallLegRateWMValue, cvCallLegRateWMts=cvCallLegRateWMts, cvActiveCallWMTable=cvActiveCallWMTable, cvActiveCallWMEntry=cvActiveCallWMEntry, cvActiveCallWMIntvlDurUnits=cvActiveCallWMIntvlDurUnits, cvActiveCallWMIndex=cvActiveCallWMIndex, cvActiveCallWMValue=cvActiveCallWMValue, cvActiveCallWMts=cvActiveCallWMts, cvSipMsgRateWMTable=cvSipMsgRateWMTable, cvSipMsgRateWMEntry=cvSipMsgRateWMEntry, cvSipMsgRateWMIntvlDurUnits=cvSipMsgRateWMIntvlDurUnits, cvSipMsgRateWMIndex=cvSipMsgRateWMIndex, cvSipMsgRateWMValue=cvSipMsgRateWMValue, cvSipMsgRateWMts=cvSipMsgRateWMts, cvCallDurationStatsThreshold=cvCallDurationStatsThreshold, cvCallVolumeWMTableSize=cvCallVolumeWMTableSize, cvdcMIBNotificationPrefix=cvdcMIBNotificationPrefix, cvdcMIBNotifications=cvdcMIBNotifications, cvdcMIBConformance=cvdcMIBConformance, cvdcMIBCompliances=cvdcMIBCompliances, cvdcMIBGroups=cvdcMIBGroups)

# Notifications
mibBuilder.exportSymbols("CISCO-VOICE-DIAL-CONTROL-MIB", cvdcPoorQoVNotification=cvdcPoorQoVNotification, cvdcPoorQoVNotificationRev1=cvdcPoorQoVNotificationRev1, cvdcActiveDS0sHighNotification=cvdcActiveDS0sHighNotification, cvdcActiveDS0sLowNotification=cvdcActiveDS0sLowNotification, cvdcFallbackNotification=cvdcFallbackNotification, cvdcPolicyViolationNotification=cvdcPolicyViolationNotification)

# Groups
mibBuilder.exportSymbols("CISCO-VOICE-DIAL-CONTROL-MIB", cvdcGeneralCfgGroup=cvdcGeneralCfgGroup, cvdcVoiceCfgGroup=cvdcVoiceCfgGroup, cvdcVoIPCfgGroup=cvdcVoIPCfgGroup, cvCallGroup=cvCallGroup, cvVoIPCallGroup=cvVoIPCallGroup, cvdcGeneralCfgGroupRev1=cvdcGeneralCfgGroupRev1, cvdcVoiceCfgGroupRev1=cvdcVoiceCfgGroupRev1, cvVoIPCallGroupRev1=cvVoIPCallGroupRev1, cvCallGroupRev1=cvCallGroupRev1, cvdcGeneralCfgGroupRev2=cvdcGeneralCfgGroupRev2, cvdcVoIPCfgGroupRev1=cvdcVoIPCfgGroupRev1, cvdcGeneralCfgGroupRev3=cvdcGeneralCfgGroupRev3, cvdcVoiceCfgGroupRev2=cvdcVoiceCfgGroupRev2, cvdcVoIPCfgGroupRev2=cvdcVoIPCfgGroupRev2, cvVoIPCallGroupRev3=cvVoIPCallGroupRev3, cvdcNotificationGroup=cvdcNotificationGroup, cvCallGroupRev2=cvCallGroupRev2, cvdcGeneralCfgGroupRev4=cvdcGeneralCfgGroupRev4, cvVoIPCallGroupRev4=cvVoIPCallGroupRev4, cvdcNotificationGroupRev1=cvdcNotificationGroupRev1, cvdcVoIPCfgGroupRev3=cvdcVoIPCfgGroupRev3, cvdcGeneralCfgGroupRev5=cvdcGeneralCfgGroupRev5, cvdcVoIPCfgGroupRev4=cvdcVoIPCfgGroupRev4, cvCallGroupRev3=cvCallGroupRev3, cvCallGroupRev4=cvCallGroupRev4, cvVoIPCallGroupRev5=cvVoIPCallGroupRev5, cvCallGroupRev5=cvCallGroupRev5, cvdcNotificationGroupRev2=cvdcNotificationGroupRev2, cvVoIPCallGroupRev6=cvVoIPCallGroupRev6, cvdcGeneralCfgGroupRev6=cvdcGeneralCfgGroupRev6, cvdcNotificationGroupRev3=cvdcNotificationGroupRev3, cvdcVoIPCfgAmrNbGroup=cvdcVoIPCfgAmrNbGroup, cvVoIPCallAmrNbGroup=cvVoIPCallAmrNbGroup, cvdcVoIPCfgIlbcGroup=cvdcVoIPCfgIlbcGroup, cvVoIPCallIlbcGroup=cvVoIPCallIlbcGroup, cvCallGroupSup1=cvCallGroupSup1, cvVoIPCallGroupSup1=cvVoIPCallGroupSup1, cvCallVolumeGroup=cvCallVolumeGroup, cvCallRateMonitorGroup=cvCallRateMonitorGroup, cvdcVoIPCfgISACGroup=cvdcVoIPCfgISACGroup, cvdcNotificationGroupRev4=cvdcNotificationGroupRev4, cvVoIPCallGroupSup2=cvVoIPCallGroupSup2, cvVoIPCallGroupSup3=cvVoIPCallGroupSup3, cvdcCallVolumeStatsHistory=cvdcCallVolumeStatsHistory)

# Compliances
mibBuilder.exportSymbols("CISCO-VOICE-DIAL-CONTROL-MIB", cvdcMIBCompliance=cvdcMIBCompliance, cvdcMIBComplianceRev1=cvdcMIBComplianceRev1, cvdcMIBComplianceRev2=cvdcMIBComplianceRev2, cvdcMIBComplianceRev3=cvdcMIBComplianceRev3, cvdcMIBComplianceRev4=cvdcMIBComplianceRev4, cvdcMIBComplianceRev5=cvdcMIBComplianceRev5, cvdcMIBComplianceRev6=cvdcMIBComplianceRev6, cvdcMIBComplianceRev7=cvdcMIBComplianceRev7, cvdcMIBComplianceRev8=cvdcMIBComplianceRev8, cvdcMIBComplianceRev9=cvdcMIBComplianceRev9, cvdcMIBComplianceRev10=cvdcMIBComplianceRev10, cvdcMIBComplianceRev11=cvdcMIBComplianceRev11, cvdcMIBComplianceRev12=cvdcMIBComplianceRev12, cvdcMIBComplianceRev13=cvdcMIBComplianceRev13, cvdcMIBComplianceRev14=cvdcMIBComplianceRev14, cvdcMIBComplianceRev15=cvdcMIBComplianceRev15, cvdcMIBComplianceRev16=cvdcMIBComplianceRev16, cvdcMIBComplianceRev17=cvdcMIBComplianceRev17, cvdcMIBComplianceRev18=cvdcMIBComplianceRev18, cvdcMIBComplianceRev19=cvdcMIBComplianceRev19, cvdcMIBComplianceRev20=cvdcMIBComplianceRev20, cvdcMIBComplianceRev21=cvdcMIBComplianceRev21, cvdcMIBComplianceRev22=cvdcMIBComplianceRev22)
