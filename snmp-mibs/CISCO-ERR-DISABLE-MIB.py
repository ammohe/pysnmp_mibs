# PySNMP SMI module. Autogenerated from smidump -f python CISCO-ERR-DISABLE-MIB
# by libsmi2pysnmp-0.1.3 at Fri Aug  1 21:51:52 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( VlanIndexOrZero, ) = mibBuilder.importSymbols("CISCO-PRIVATE-VLAN-MIB", "VlanIndexOrZero")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( TimeIntervalSec, ) = mibBuilder.importSymbols("CISCO-TC", "TimeIntervalSec")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue")

# Types

class CErrDisableFeatureID(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(35,33,9,28,16,14,10,34,26,5,3,27,29,20,11,6,18,7,17,12,13,15,25,4,8,22,21,31,30,19,2,23,1,24,32,)
    namedValues = NamedValues(("udld", 1), ("gbicInvalid", 10), ("dhcpRateLimit", 11), ("unicastFlood", 12), ("vmps", 13), ("stormControl", 14), ("inlinePower", 15), ("arpInspection", 16), ("portLoopback", 17), ("packetBuffer", 18), ("macLimit", 19), ("bpduGuard", 2), ("linkMonitorFailure", 20), ("oamRemoteFailure", 21), ("dot1adIncompEtype", 22), ("dot1adIncompTunnel", 23), ("sfpConfigMismatch", 24), ("communityLimit", 25), ("invalidPolicy", 26), ("lsGroup", 27), ("ekey", 28), ("portModeFailure", 29), ("channelMisconfig", 3), ("pppoeIaRateLimit", 30), ("oamRemoteCriticalEvent", 31), ("oamRemoteDyingGasp", 32), ("oamRemoteLinkFault", 33), ("mvrp", 34), ("tranceiverIncomp", 35), ("pagpFlap", 4), ("dtpFlap", 5), ("linkFlap", 6), ("l2ptGuard", 7), ("dot1xSecurityViolation", 8), ("portSecurityViolation", 9), )
    

# Objects

ciscoErrDisableMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 548)).setRevisions(("2013-04-23 00:00","2010-10-19 00:00","2009-03-23 00:00","2008-04-07 00:00","2006-05-31 00:00",))
if mibBuilder.loadTexts: ciscoErrDisableMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoErrDisableMIB.setContactInfo("Cisco Systems\nCustomer Service\n\nPostal: 170 W Tasman Drive\nSan Jose, CA  95134\nUSA\n\nTel: +1 800 553-NETS\n\nE-mail: cs-lan-switch-snmp@cisco.com")
if mibBuilder.loadTexts: ciscoErrDisableMIB.setDescription("This MIB module provides the ability for a Network\nManagement Station (NMS) to configure and monitor the\nerror-disable feature via SNMP.\n\nThe error-disable feature allows other software\nfeatures running in a system to operationally disable a\nsystem entity upon detecting abnormal conditions. \n\nExamples of such a system entity include interfaces, a\nvlan configured in the system, or a VLAN allowed on\nspecific layer 2 multi-vlan interface.\n\nMore specific examples:\n\n    a) When BPDU guard is enabled on an interface\n    it is expected that no BPDU packets are received by\n    the interface. If a BPDU packet is received, then the\n    BPDU guard will operationally disable the\n    interface. \n\n    b) Users can configure a particular threshold of\n    broadcast packets received on an interface. If the\n    number of packets received exceeds the threshold, then\n    storm-control will disable the interface. \n\n    c) When unidirectional Link Detection (UDLD) detects a\n    unidirectional link on an interface, it can disable\n    the interface.\n\n    d) On a trunk or a multi-vlan layer 2 port, if\n    port-security detects violation on a particular vlan,\n    then it can operationally disable that vlan on that\n    port.\n\nThe definition of 'abnormal condition' is under the\ncontrol of features that make use of the error-disable\nfeature to disable system entities.\n\nThe error-disable feature supports the following\nconfiguration:\n\n    1) Whether software features can in fact use the\n    error-disable feature upon detecting abnormal\n    conditions.\n       NOTE: Some software features will ALWAYS use the\n       error-disable feature to disable entities upon\n       detection of error.\n\n    2) Whether the system can attempt to automatically\n    recover after a system entity has been disabled (e.g., \n    A system can attempt to bring up a physical interface\n    which had been disabled earlier)\n\n    3) If error recovery is possible, then the time\n    interval to wait before the system starts the recovery\n    attempt.")
ciscoErrDisableMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 0))
cErrDisableNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 0, 1))
ciscoErrDisableMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 1))
cErrDisableGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 1))
cErrDisableRecoveryInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 1, 1), TimeIntervalSec()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableRecoveryInterval.setDescription("This object specifies the error-disable recovery time\ninterval.\nWhen a system entity is operationally disabled upon\ndetecting abnormal condition by a particular feature,\nthe system waits for a period equal to this time interval,\nand then re-enable the entity if automatic recovery is\nenabled for the feature.")
cErrDisableNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableNotifEnable.setDescription("This object specifies whether cErrDisableInterfaceEvent\nand cErrDisableInterfaceEventRev1\nnotifications should be generated when a system entity is\nerror-disabled.")
cErrDisableNotifRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite").setUnits("Notification/Minute")
if mibBuilder.loadTexts: cErrDisableNotifRate.setDescription("The value of this object specifies the maximum number of\nerror-disable notifications the device will generate per\nminute. \n\nA value of '0' specifies no limit and the device\nwill generate a notification for each error-disable\nevent.")
cErrDisableFeatureObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2))
cErrDisableFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1))
if mibBuilder.loadTexts: cErrDisableFeatureTable.setDescription("This table contains the error-disable related info\nfor each feature employing the error-disable\nfeature.")
cErrDisableFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1)).setIndexNames((0, "CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureIndex"))
if mibBuilder.loadTexts: cErrDisableFeatureEntry.setDescription("An entry is created for each feature that employs the\nerror-disable feature.")
cErrDisableFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 1), CErrDisableFeatureID()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cErrDisableFeatureIndex.setDescription("This object uniquely identifies a feature that makes\nuse of the error-disable feature.")
cErrDisableFeatureConfigurable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 2), Bits().subtype(namedValues=NamedValues(("detectionEnable", 0), ("recoveryEnable", 1), ("recoveryInterval", 2), ("detectShutdownVlan", 3), ("flapControl", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cErrDisableFeatureConfigurable.setDescription("This object indicates whether the error-disable related\nconfiguration is configurable for this feature. If a bit\nis set to 1, then the corresponding error-disable\nconfiguration can be configured.\n\n'detectionEnable'    - indicates the error-disable detection\n                       can be enabled/disabled for this feature\n                       via cErrDisableFeatureDetectEnable.\n'recoveryEnable'     - indicates the error-disable recovery\n                       can be enabled/disabled for this feature\n                       via cErrDisableFeatureRecoveryEnable.\n'recoveryInterval'   - indicates the error-disable recovery\n                       Interval can be configured via\n                       cErrDisableFeatureRecoveryInterval.\n'detectShutdownVlan' - indicates the error-disable detection\n                       shutdown vlan mode can be configured for\n                       this feature via \n                       cErrDisableFeatureDetectShutdownVlan. \n'flapControl'        - indicates the error-disable flap control\n                       can be configured via \n                       cErrDisableFeatureMaxFlapCount and\n                       cErrDisableFeatureFlapTimePeriod.")
cErrDisableFeatureDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableFeatureDetectEnable.setDescription("This object specifies whether the error-disable detection\nis enabled for the feature.\n\nNote:\n   This object is read-write only for those features\n   that are configurable, meaning:\n   cErrDisableFeatureConfigurable.<featureIndex> has the\n   first bit set to 1.")
cErrDisableFeatureRecoveryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableFeatureRecoveryEnable.setDescription("This object specifies whether the system can\nautomatically recover a system entity that has been\ndisabled by the feature.")
cErrDisableFeatureRecoveryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 5), TimeIntervalSec()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableFeatureRecoveryInterval.setDescription("This object specifies the error-recovery time interval\nthat will be used by the system for any system entity that\nis error-disabled by this particular feature.\n\nIf the value of this object is '0', then the device will\nuse the value specified by the global configuration object\ncErrDisableRecoveryInterval.")
cErrDisableFeatureDetectShutdownVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableFeatureDetectShutdownVlan.setDescription("This object specifies whether shutting down the violating\nVLAN on an interface is enabled or not. The value of 'true'\nindicates that shutting down the violating VLAN on an \ninterface is enabled. The value of 'false' indicates that \nshutting down the violating VLAN on an interface is \ndisabled.")
cErrDisableFeatureMaxFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableFeatureMaxFlapCount.setDescription("This object specifies the maximum number of flaps that\nare allowed to occur before setting to error disable state.\nA read-only value of zero indicates that no flap control\nis present.")
cErrDisableFeatureFlapTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cErrDisableFeatureFlapTimePeriod.setDescription("This object specifies the period of time counting the number of\nflaps that are allowed before setting to error disable state.\nA read-only value of zero indicates that no flap control\nis present.")
cErrDisableIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 3))
cErrDisableIfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 3, 1))
if mibBuilder.loadTexts: cErrDisableIfStatusTable.setDescription("This table provides interface (port) specific\nerror-disable status information. Each conceptual row\nprovides status information about a {interface, vlan}\ndisabled by a feature.\n\nOn a trunk or multi-vlan access interface, a given vlan on\nthe interface can be error-disabled. In this case, the row is\nindexed by the ifIndex for the interface and the vlan\nindex corresponding to the vlan in question.\n\nIf the interface is carrying only 1 vlan or the entire\ntrunk interface is error-disabled (due to link flaps, for\nexample) then the vlan index portion of the row index is\n0.")
cErrDisableIfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 3, 1, 1)).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ERR-DISABLE-MIB", "cErrDisableIfStatusVlanIndex"))
if mibBuilder.loadTexts: cErrDisableIfStatusEntry.setDescription("A collection of objects that specify the status of an\nerror-disabled Interface or {interface, vlan}.")
cErrDisableIfStatusVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 3, 1, 1, 1), VlanIndexOrZero()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cErrDisableIfStatusVlanIndex.setDescription("This object specifies the vlan of the given interface\nthat has been error-disabled. If the physical interface is\nerror-disabled then the value of this object is 0.")
cErrDisableIfStatusCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 3, 1, 1, 2), CErrDisableFeatureID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cErrDisableIfStatusCause.setDescription("This object specifies the feature/event that caused the\n{interface, vlan} (or the entire interface) to be\nerror-disabled.")
cErrDisableIfStatusTimeToRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 548, 1, 3, 1, 1, 3), TimeIntervalSec()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cErrDisableIfStatusTimeToRecover.setDescription("Time left before the system attempts an automatic\nrecovery of the interface or the vlan of the given \ninterface. If no recovery is scheduled, then the value \nof this object is '0'.")
ciscoErrDisableMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 2))
ciscoErrDisableMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 1))
ciscoErrDisableMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2))

# Augmentions

# Notifications

cErrDisableInterfaceEvent = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 548, 0, 1, 1)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "cErrDisableIfStatusCause"), ) )
if mibBuilder.loadTexts: cErrDisableInterfaceEvent.setDescription("The cErrDisableInterfaceEvent is generated when an interface\nor {interface, vlan} is error-disabled by the feature\nspecified in cErrDisableIfStatusCause.\n\ncErrDisableInterfaceEvent is deprecated and replaced by \ncErrDisableInterfaceEventRev1.")
cErrDisableInterfaceEventRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 548, 0, 2)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "cErrDisableIfStatusCause"), ) )
if mibBuilder.loadTexts: cErrDisableInterfaceEventRev1.setDescription("The cErrDisableInterfaceEventRev1 is generated when an\ninterface or {interface, vlan} is error-disabled by the \nfeature specified in cErrDisableIfStatusCause.\n\ncErrDisableInterfaceEventRev1 deprecates \ncErrDisableInterfaceEvent to make it RFC 2578 compliant. \nAccording to section 8.5 of RFC 2578, the next\nto last sub-identifier in the name of any newly-defined\nnotification must have the value zero.")

# Groups

ciscoErrDisableGlobalCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 1)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "cErrDisableRecoveryInterval"), ) )
if mibBuilder.loadTexts: ciscoErrDisableGlobalCfgGroup.setDescription("A collection of objects to configure error-disable\nfunctionality.")
ciscoErrDisableFeatureCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 2)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureRecoveryEnable"), ("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureConfigurable"), ("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureDetectEnable"), ("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureRecoveryInterval"), ) )
if mibBuilder.loadTexts: ciscoErrDisableFeatureCfgGroup.setDescription("A collection of objects to manage the configuration of\nthe error-disable feature.")
ciscoErrDisableIfStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 3)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "cErrDisableIfStatusCause"), ("CISCO-ERR-DISABLE-MIB", "cErrDisableIfStatusTimeToRecover"), ) )
if mibBuilder.loadTexts: ciscoErrDisableIfStatusGroup.setDescription("A collection of error-disable interface status objects.")
ciscoErrDisableNotifCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 4)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "cErrDisableNotifRate"), ("CISCO-ERR-DISABLE-MIB", "cErrDisableNotifEnable"), ) )
if mibBuilder.loadTexts: ciscoErrDisableNotifCfgGroup.setDescription("A collection of objects to configure error-disable\nnotifications.")
ciscoErrDisableNotifGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 5)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "cErrDisableInterfaceEvent"), ) )
if mibBuilder.loadTexts: ciscoErrDisableNotifGroup.setDescription("A collection of error-disable notification objects.")
ciscoErrDisableNotifGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 6)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "cErrDisableInterfaceEventRev1"), ) )
if mibBuilder.loadTexts: ciscoErrDisableNotifGroupRev1.setDescription("A collection of error-disable notification objects.")
ciscoErrDisableShutdownVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 7)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureDetectShutdownVlan"), ) )
if mibBuilder.loadTexts: ciscoErrDisableShutdownVlanGroup.setDescription("A collection of objects to manage the configuration of\nerror-disable detection shutdown vlan mode.")
ciscoErrDisableFeatureFlapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 2, 8)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureFlapTimePeriod"), ("CISCO-ERR-DISABLE-MIB", "cErrDisableFeatureMaxFlapCount"), ) )
if mibBuilder.loadTexts: ciscoErrDisableFeatureFlapGroup.setDescription("A collection of objects to manage the configuration of\nthe error-disable flap control.")

# Compliances

ciscoErrDisableMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 1, 1)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableNotifGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableGlobalCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableIfStatusGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableFeatureCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableNotifCfgGroup"), ) )
if mibBuilder.loadTexts: ciscoErrDisableMIBCompliance.setDescription("The compliance statement for the cisco errdisable MIB.")
ciscoErrDisableMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 1, 2)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableNotifGroupRev1"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableIfStatusGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableGlobalCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableFeatureCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableNotifCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableShutdownVlanGroup"), ) )
if mibBuilder.loadTexts: ciscoErrDisableMIBComplianceRev1.setDescription("The compliance statement for the cisco errdisable MIB.")
ciscoErrDisableMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 548, 2, 1, 3)).setObjects(*(("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableNotifGroupRev1"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableFeatureFlapGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableIfStatusGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableGlobalCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableFeatureCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableNotifCfgGroup"), ("CISCO-ERR-DISABLE-MIB", "ciscoErrDisableShutdownVlanGroup"), ) )
if mibBuilder.loadTexts: ciscoErrDisableMIBComplianceRev2.setDescription("The compliance statement for the cisco errdisable MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-ERR-DISABLE-MIB", PYSNMP_MODULE_ID=ciscoErrDisableMIB)

# Types
mibBuilder.exportSymbols("CISCO-ERR-DISABLE-MIB", CErrDisableFeatureID=CErrDisableFeatureID)

# Objects
mibBuilder.exportSymbols("CISCO-ERR-DISABLE-MIB", ciscoErrDisableMIB=ciscoErrDisableMIB, ciscoErrDisableMIBNotifs=ciscoErrDisableMIBNotifs, cErrDisableNotificationsPrefix=cErrDisableNotificationsPrefix, ciscoErrDisableMIBObjects=ciscoErrDisableMIBObjects, cErrDisableGlobalObjects=cErrDisableGlobalObjects, cErrDisableRecoveryInterval=cErrDisableRecoveryInterval, cErrDisableNotifEnable=cErrDisableNotifEnable, cErrDisableNotifRate=cErrDisableNotifRate, cErrDisableFeatureObjects=cErrDisableFeatureObjects, cErrDisableFeatureTable=cErrDisableFeatureTable, cErrDisableFeatureEntry=cErrDisableFeatureEntry, cErrDisableFeatureIndex=cErrDisableFeatureIndex, cErrDisableFeatureConfigurable=cErrDisableFeatureConfigurable, cErrDisableFeatureDetectEnable=cErrDisableFeatureDetectEnable, cErrDisableFeatureRecoveryEnable=cErrDisableFeatureRecoveryEnable, cErrDisableFeatureRecoveryInterval=cErrDisableFeatureRecoveryInterval, cErrDisableFeatureDetectShutdownVlan=cErrDisableFeatureDetectShutdownVlan, cErrDisableFeatureMaxFlapCount=cErrDisableFeatureMaxFlapCount, cErrDisableFeatureFlapTimePeriod=cErrDisableFeatureFlapTimePeriod, cErrDisableIfObjects=cErrDisableIfObjects, cErrDisableIfStatusTable=cErrDisableIfStatusTable, cErrDisableIfStatusEntry=cErrDisableIfStatusEntry, cErrDisableIfStatusVlanIndex=cErrDisableIfStatusVlanIndex, cErrDisableIfStatusCause=cErrDisableIfStatusCause, cErrDisableIfStatusTimeToRecover=cErrDisableIfStatusTimeToRecover, ciscoErrDisableMIBConform=ciscoErrDisableMIBConform, ciscoErrDisableMIBCompliances=ciscoErrDisableMIBCompliances, ciscoErrDisableMIBGroups=ciscoErrDisableMIBGroups)

# Notifications
mibBuilder.exportSymbols("CISCO-ERR-DISABLE-MIB", cErrDisableInterfaceEvent=cErrDisableInterfaceEvent, cErrDisableInterfaceEventRev1=cErrDisableInterfaceEventRev1)

# Groups
mibBuilder.exportSymbols("CISCO-ERR-DISABLE-MIB", ciscoErrDisableGlobalCfgGroup=ciscoErrDisableGlobalCfgGroup, ciscoErrDisableFeatureCfgGroup=ciscoErrDisableFeatureCfgGroup, ciscoErrDisableIfStatusGroup=ciscoErrDisableIfStatusGroup, ciscoErrDisableNotifCfgGroup=ciscoErrDisableNotifCfgGroup, ciscoErrDisableNotifGroup=ciscoErrDisableNotifGroup, ciscoErrDisableNotifGroupRev1=ciscoErrDisableNotifGroupRev1, ciscoErrDisableShutdownVlanGroup=ciscoErrDisableShutdownVlanGroup, ciscoErrDisableFeatureFlapGroup=ciscoErrDisableFeatureFlapGroup)

# Compliances
mibBuilder.exportSymbols("CISCO-ERR-DISABLE-MIB", ciscoErrDisableMIBCompliance=ciscoErrDisableMIBCompliance, ciscoErrDisableMIBComplianceRev1=ciscoErrDisableMIBComplianceRev1, ciscoErrDisableMIBComplianceRev2=ciscoErrDisableMIBComplianceRev2)
