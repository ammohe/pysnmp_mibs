# PySNMP SMI module. Autogenerated from smidump -f python CISCO-AAA-SERVER-MIB
# by libsmi2pysnmp-0.1.3 at Fri Sep 19 07:16:50 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoExperiment, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( DisplayString, RowStatus, TextualConvention, TimeInterval, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TimeInterval", "TruthValue")

# Types

class CiscoAAAProtocol(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,2,1,6,5,7,3,)
    namedValues = NamedValues(("tacacsplus", 1), ("radius", 2), ("ldap", 3), ("kerberos", 4), ("ntlm", 5), ("sdi", 6), ("other", 7), )
    

# Objects

ciscoAAAServerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 56)).setRevisions(("2003-11-17 00:00","2002-03-28 00:00","2000-01-20 00:00",))
if mibBuilder.loadTexts: ciscoAAAServerMIB.setOrganization("Cisco Systems,	Inc.")
if mibBuilder.loadTexts: ciscoAAAServerMIB.setContactInfo("	Cisco Systems\nCustomer Service\n\nPostal:	170 W Tasman Drive\nSan Jose, CA  95134\nUSA\n\nTel:	+1 800 553-NETS\n\nE-mail:	cs-aaa@cisco.com")
if mibBuilder.loadTexts: ciscoAAAServerMIB.setDescription("The MIB module	for monitoring communications and status\nof AAA	Server operation")
cAAAServerMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 56, 1))
casConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 1))
casServerStateChangeEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: casServerStateChangeEnable.setDescription("This variable controls the	generation of\ncasServerStateChange notification.\n\nWhen this variable	is true(1), generation of\ncasServerStateChange notifications	is enabled.\nWhen this variable	is false(2), generation	of\ncasServerStateChange notifications	is disabled.\n\nThe default value is false(2).")
casConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 1, 2))
if mibBuilder.loadTexts: casConfigTable.setDescription("This table shows current configurations for each\nAAA server, allows existing servers to	be removed\nand new ones to be created.")
casConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 1, 2, 1)).setIndexNames((0, "CISCO-AAA-SERVER-MIB", "casProtocol"), (0, "CISCO-AAA-SERVER-MIB", "casIndex"))
if mibBuilder.loadTexts: casConfigEntry.setDescription("An	AAA server configuration identified by its protocol\nand its index.\n\nAn	entry is created/removed when a	server is defined\nor	undefined with IOS configuration commands via\nCLI or by issuing appropriate sets	to this	table\nusing snmp.\n\nA management station wishing to create an entry should\nfirst generate a random number to be used as the index\nto	this sparse table.  The	station	should then create the\nassociated	instance of the	row status and row index objects.\nIt	must also, either in the same or in successive PDUs,\ncreate an instance	of casAddress where casAddress is the\nIP	address	of the server to be added.\n\nIt	should also modify the default values for casAuthenPort,\ncasAcctPort if the	defaults are not appropriate.\n\nIf	casKey is a zero-length	string or is not explicitly set,\nthen the global key will be used.	Otherwise, this	value\nis	used as	the key	for this server	instance.\n\nOnce the appropriate instance of all the configuration\nobjects have been created,	either by an explicit SNMP set\nrequest or	by default, the	row status should be set to\nactive(1) to initiate the request.\n\nAfter the AAA server is made active, the entry can	not be\nmodified -	the only allowed operation after this is to\ndestroy the entry by setting casConfigRowStatus to	destroy(6).\n\ncasPriority is automatically assigned once	the entry is\nmade active and reflects the relative priority of the\ndefined server with respect to already configured servers.\nNewly-created servers will	be assigned the	lowest priority.\nTo	reassign server	priorities to existing server entries,\nit	may be necessary to destroy and	recreate entries in order\nof	priority.\n\nEntries in	this table with	casConfigRowStatus equal to\nactive(1) remain in the table until destroyed.\n\nEntries in	this table with	casConfigRowStatus equal to\nvalues other than active(1) will be destroyed after timeout\n(5	minutes).\n\nIf	a server address being created via SNMP	exists already\nin	another	active casConfigEntry, then a newly created row\ncan not be	made active until the original row with	the\nwith the same server address value	is destroyed.\n\nUpon reload, casIndex values may be changed, but the\npriorities	that were saved	before reload will be retained,\nwith lowest priority number corresponding to the higher\npriority servers.")
casProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 1, 2, 1, 1), CiscoAAAProtocol()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: casProtocol.setDescription("The variable denotes the protocol used by the\nmanaged device with the AAA server corresponding to\n this entry in the table.")
casIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: casIndex.setDescription("A management station wishing to initiate a	new AAA	server\nconfiguration should use a	random value for this object\nwhen creating an instance of casConfigEntry.\n\nThe RowStatus semantics of	the casConfigRowStatus object\nwill prevent access conflicts.\n\nIf	the randomly chosen casIndex value for row creation\nis	already	in use by an existing entry, snmp set to the\ncasIndex value will fail.")
casAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casAddress.setDescription("The IP address of the server.")
casAuthenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1645)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casAuthenPort.setDescription("UDP/TCP port used for authentication in the configuration\n\nFor TACACS+, this object should be	explictly set.\n\nDefault value is the IOS default for radius: 1645.")
casAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1646)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casAcctPort.setDescription("UDP/TCP port used for accounting service in the configuration\n\nFor TACACS+, the value of casAcctPort is ignored.\ncasAuthenPort will	be used	instead.\n\nDefault value is the IOS default for radius: 1646.")
casKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 1, 2, 1, 6), DisplayString().clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casKey.setDescription("The server key	to be used with	this server.\n\nRetrieving the	value of this object via SNMP will\nreturn	an empty string	for security reasons.")
casPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casPriority.setDescription("A number that indicates the priority of the server	in\nthis entry.  Lower	numbers	indicate higher	priority.")
casConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: casConfigRowStatus.setDescription("The status of this table entry.  Once the entry status	is\nset to	active,	the associated entry cannot be modified\nexcept	destroyed by setting this object to destroy(6).")
casStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2))
casStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1))
if mibBuilder.loadTexts: casStatisticsTable.setDescription("\nTable providing statistics for	each server.")
casStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1))
if mibBuilder.loadTexts: casStatisticsEntry.setDescription("Statistical information about a particular	server.\n\nObjects in	this table are read-only and appear\nautomatically whenever a row in the casConfigTable\nis	made active.\n\nObjects in	this table disappear when casConfigRowStatus\nfor the corresponding casConfigEntry is set to the\ndestroy(6)	state.")
casAuthenRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthenRequests.setDescription("The number	of authentication requests sent	to\nthis server since it is made active.\n\nRetransmissions due to request timeouts are\ncounted as	distinct requests.")
casAuthenRequestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthenRequestTimeouts.setDescription("The number	of authentication requests which have\ntimed out since it	is made	active.\n\nA timeout results in a retransmission of the request\nIf	the maximum number of attempts has been	reached,\nno	further	retransmissions	will be	attempted.")
casAuthenUnexpectedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthenUnexpectedResponses.setDescription("The number	of unexpected authentication responses received\nfrom this server since it is made active.\n\nAn	example	is a delayed response to a request which had\nalready timed out.")
casAuthenServerErrorResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthenServerErrorResponses.setDescription("The number	of server ERROR	authentication responses\nreceived from this	server since it	is made	active.\n\nThese are responses indicating that the server itself\nhas identified an error with its authentication\noperation.")
casAuthenIncorrectResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthenIncorrectResponses.setDescription("The number	of authentication responses which could	not\nbe	processed since	it is made active.\n\nReasons include inability to decrypt the response,\ninvalid fields, or	the response is	not valid based	on\nthe request.")
casAuthenResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 6), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthenResponseTime.setDescription("Average response time for authentication requests sent\nto	this server, excluding timeouts, since system\nre-initialization.")
casAuthenTransactionSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthenTransactionSuccesses.setDescription("The number	of authentication transactions with this\nserver which succeeded since it is	made active.\n\nA transaction may include multiple	request\nretransmissions if	timeouts occur.\n\nA transaction is successful if the	server responds\nwith either an authentication pass	or fail.")
casAuthenTransactionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthenTransactionFailures.setDescription("The number	of authentication transactions with this\nserver which failed since it is made active.\n\nA transaction may include multiple	request\nretransmissions if	timeouts occur.\n\nA transaction failure occurs if maximum resends have\nbeen met or the server aborts the transaction.")
casAuthorRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthorRequests.setDescription("The number	of authorization requests sent to\nthis server since it is made active.\n\nRetransmissions due to request timeouts are\ncounted as	distinct requests.\n\nThis object is not	instantiated for protocols which do\nnot support a distinct authorization function.")
casAuthorRequestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthorRequestTimeouts.setDescription("The number	of authorization requests which	have\ntimed out since it	is made	active.\n\nA timeout results in a retransmission of the request\nIf	the maximum number of attempts has been	reached,\nno	further	retransmissions	will be	attempted.\n\nThis object is not	instantiated for protocols which do\nnot support a distinct authorization function.")
casAuthorUnexpectedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthorUnexpectedResponses.setDescription("The number	of unexpected authorization responses received\nfrom this server since it is made active.\n\nAn	example	is a delayed response to a request which\nhad already timed out.\n\nThis object is not	instantiated for protocols which do\nnot support a distinct authorization function.")
casAuthorServerErrorResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthorServerErrorResponses.setDescription("The number	of server ERROR	authorization responses\nreceived from this	server since it	is made	active.\n\nThese are responses indicating that the server itself\nhas identified an error with its authorization\noperation.\n\nThis object is not	instantiated for protocols which do\nnot support a distinct authorization function.")
casAuthorIncorrectResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthorIncorrectResponses.setDescription("The number	of authorization responses which could not\nbe	processed since	it is made active.\n\nReasons include inability to decrypt the response,\ninvalid fields, or	the response is	not valid based	on\nthe request.\n\nThis object is not	instantiated for protocols which do\nnot support a distinct authorization function.")
casAuthorResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 14), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthorResponseTime.setDescription("Average response time for authorization requests sent\nto	this server, excluding timeouts, since system\nre-initialization.\n\nThis object is not	instantiated for protocols which do\nnot support a distinct authorization function.")
casAuthorTransactionSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthorTransactionSuccesses.setDescription("The number	of authorization transactions with this\nserver which succeeded since it is	made active.\n\nA transaction may include multiple	request\nretransmissions if	timeouts occur.\n\nA transaction is successful if the	server responds\nwith either an authorization pass or fail.\n\nThis object is not	instantiated for protocols which do\nnot support a distinct authorization function.")
casAuthorTransactionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAuthorTransactionFailures.setDescription("The number	of authorization transactions with this\nserver which failed since it is made active.\n\nA transaction may include multiple	request\nretransmissions if	timeouts occur.\n\nA transaction failure occurs if maximum resends have\nbeen met or the server aborts the transaction.\n\nThis object is not	instantiated for protocols which do\nnot support a distinct authorization function.")
casAcctRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAcctRequests.setDescription("The number	of accounting requests sent to\nthis server since system re-initialization.\n\nRetransmissions due to request timeouts are\ncounted as	distinct requests.")
casAcctRequestTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAcctRequestTimeouts.setDescription("The number	of accounting requests which have\ntimed out since system re-initialization.\n\nA timeout results in a retransmission of the request\nIf	the maximum number of attempts has been	reached,\nno	further	retransmissions	will be	attempted.")
casAcctUnexpectedResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAcctUnexpectedResponses.setDescription("The number	of unexpected accounting responses received\nfrom this server since system re-initialization.\n\nAn	example	is a delayed response to a request which had\nalready timed out.")
casAcctServerErrorResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAcctServerErrorResponses.setDescription("The number	of server ERROR	accounting responses received\nfrom this server since system re-initialization.\n\nThese are responses indicating that the server itself\nhas identified an error with its accounting\noperation.")
casAcctIncorrectResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAcctIncorrectResponses.setDescription("The number	of accounting responses	which could not\nbe	processed since	system re-initialization.\n\nReasons include inability to decrypt the response,\ninvalid fields, or	the response is	not valid based	on\nthe request.")
casAcctResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 22), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAcctResponseTime.setDescription("Average response time for accounting requests sent\nto	this server,, since system re-initialization\nexcluding timeouts.")
casAcctTransactionSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAcctTransactionSuccesses.setDescription("The number	of accounting transactions with	this\nserver which succeeded since system re-initialization.\n\nA transaction may include multiple	request\nretransmissions if	timeouts occur.\n\nA transaction is successful if the	server responds\nwith either an accounting pass or fail.")
casAcctTransactionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casAcctTransactionFailures.setDescription("The number	of accounting transactions with	this\nserver which failed since system re-initialization.\n\nA transaction may include multiple	request\nretransmissions if	timeouts occur.\n\nA transaction failure occurs if maximum resends have\nbeen met or the server aborts the transaction.")
casState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 25), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("up", 1), ("dead", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: casState.setDescription("Current state of this server.\n\nup(1)	 - Server responding to	requests\n\ndead(2) - Server failed to respond\n\nA server is marked	dead if	it does	not respond after\nmaximum retransmissions.\n\nA server is marked	up again either	after a	waiting\nperiod or if some response	is received from it.\n\nThe initial value of casState is 'up(1)' at system\nre-initialization.	This will only transistion to 'dead(2)'\nif	an attempt to communicate fails.")
casCurrentStateDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 26), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casCurrentStateDuration.setDescription("This object provides the elapsed time the server has\nbeen in its current state as shown	in casState.")
casPreviousStateDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 27), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casPreviousStateDuration.setDescription("This object provides the elapsed time the server was\nbeen in its previous state	prior to the most recent\ntransistion of casState.\n\nThis value	is zero	if the server has not changed state.")
casTotalDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 28), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casTotalDeadTime.setDescription("The total elapsed time this server's casState has\nhad the value 'dead(2)' since system re-initialization.")
casDeadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 56, 1, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: casDeadCount.setDescription("The number	of times this server's casState	has\ntransitioned to 'dead(2)' since system re-initialization.")
cAAAServerMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 56, 2))
cAAAServerMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 56, 2, 0))
cAAAServerMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 56, 3))
casMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 56, 3, 1))
casMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 56, 3, 2))

# Augmentions
casConfigEntry.registerAugmentions(("CISCO-AAA-SERVER-MIB", "casStatisticsEntry"))
casStatisticsEntry.setIndexNames(*casConfigEntry.getIndexNames())

# Notifications

casServerStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 56, 2, 0, 1)).setObjects(*(("CISCO-AAA-SERVER-MIB", "casPreviousStateDuration"), ("CISCO-AAA-SERVER-MIB", "casTotalDeadTime"), ("CISCO-AAA-SERVER-MIB", "casState"), ) )
if mibBuilder.loadTexts: casServerStateChange.setDescription("An AAA	server state change notification is generated\nwhenever casState changes value.")

# Groups

casStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 56, 3, 2, 1)).setObjects(*(("CISCO-AAA-SERVER-MIB", "casAcctTransactionSuccesses"), ("CISCO-AAA-SERVER-MIB", "casAuthorTransactionSuccesses"), ("CISCO-AAA-SERVER-MIB", "casAcctUnexpectedResponses"), ("CISCO-AAA-SERVER-MIB", "casAuthenIncorrectResponses"), ("CISCO-AAA-SERVER-MIB", "casPreviousStateDuration"), ("CISCO-AAA-SERVER-MIB", "casAuthorServerErrorResponses"), ("CISCO-AAA-SERVER-MIB", "casAcctRequests"), ("CISCO-AAA-SERVER-MIB", "casAuthenResponseTime"), ("CISCO-AAA-SERVER-MIB", "casState"), ("CISCO-AAA-SERVER-MIB", "casAuthenTransactionSuccesses"), ("CISCO-AAA-SERVER-MIB", "casAuthenTransactionFailures"), ("CISCO-AAA-SERVER-MIB", "casAuthorTransactionFailures"), ("CISCO-AAA-SERVER-MIB", "casAcctServerErrorResponses"), ("CISCO-AAA-SERVER-MIB", "casCurrentStateDuration"), ("CISCO-AAA-SERVER-MIB", "casAuthorUnexpectedResponses"), ("CISCO-AAA-SERVER-MIB", "casDeadCount"), ("CISCO-AAA-SERVER-MIB", "casTotalDeadTime"), ("CISCO-AAA-SERVER-MIB", "casAuthorRequestTimeouts"), ("CISCO-AAA-SERVER-MIB", "casAuthenUnexpectedResponses"), ("CISCO-AAA-SERVER-MIB", "casAcctTransactionFailures"), ("CISCO-AAA-SERVER-MIB", "casAcctIncorrectResponses"), ("CISCO-AAA-SERVER-MIB", "casAuthorResponseTime"), ("CISCO-AAA-SERVER-MIB", "casAuthenServerErrorResponses"), ("CISCO-AAA-SERVER-MIB", "casAuthorRequests"), ("CISCO-AAA-SERVER-MIB", "casAuthenRequests"), ("CISCO-AAA-SERVER-MIB", "casAcctRequestTimeouts"), ("CISCO-AAA-SERVER-MIB", "casAuthorIncorrectResponses"), ("CISCO-AAA-SERVER-MIB", "casAuthenRequestTimeouts"), ("CISCO-AAA-SERVER-MIB", "casAcctResponseTime"), ) )
if mibBuilder.loadTexts: casStatisticsGroup.setDescription("Objects for providing AAA server statistics and status.")
casConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 56, 3, 2, 2)).setObjects(*(("CISCO-AAA-SERVER-MIB", "casAuthenPort"), ("CISCO-AAA-SERVER-MIB", "casServerStateChangeEnable"), ("CISCO-AAA-SERVER-MIB", "casAcctPort"), ("CISCO-AAA-SERVER-MIB", "casPriority"), ("CISCO-AAA-SERVER-MIB", "casKey"), ("CISCO-AAA-SERVER-MIB", "casConfigRowStatus"), ("CISCO-AAA-SERVER-MIB", "casAddress"), ) )
if mibBuilder.loadTexts: casConfigGroup.setDescription("Objects for configuring the AAA servers.")
casServerNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 56, 3, 2, 3)).setObjects(*(("CISCO-AAA-SERVER-MIB", "casServerStateChange"), ) )
if mibBuilder.loadTexts: casServerNotificationGroup.setDescription("The collection of notifications	used for\nmonitoring AAA server status")

# Compliances

casMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 56, 3, 1, 1)).setObjects(*(("CISCO-AAA-SERVER-MIB", "casConfigGroup"), ("CISCO-AAA-SERVER-MIB", "casStatisticsGroup"), ("CISCO-AAA-SERVER-MIB", "casServerNotificationGroup"), ) )
if mibBuilder.loadTexts: casMIBCompliance.setDescription("The compliance statement for entities which\nimplement the CISCO AAA Server MIB")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-AAA-SERVER-MIB", PYSNMP_MODULE_ID=ciscoAAAServerMIB)

# Types
mibBuilder.exportSymbols("CISCO-AAA-SERVER-MIB", CiscoAAAProtocol=CiscoAAAProtocol)

# Objects
mibBuilder.exportSymbols("CISCO-AAA-SERVER-MIB", ciscoAAAServerMIB=ciscoAAAServerMIB, cAAAServerMIBObjects=cAAAServerMIBObjects, casConfig=casConfig, casServerStateChangeEnable=casServerStateChangeEnable, casConfigTable=casConfigTable, casConfigEntry=casConfigEntry, casProtocol=casProtocol, casIndex=casIndex, casAddress=casAddress, casAuthenPort=casAuthenPort, casAcctPort=casAcctPort, casKey=casKey, casPriority=casPriority, casConfigRowStatus=casConfigRowStatus, casStatistics=casStatistics, casStatisticsTable=casStatisticsTable, casStatisticsEntry=casStatisticsEntry, casAuthenRequests=casAuthenRequests, casAuthenRequestTimeouts=casAuthenRequestTimeouts, casAuthenUnexpectedResponses=casAuthenUnexpectedResponses, casAuthenServerErrorResponses=casAuthenServerErrorResponses, casAuthenIncorrectResponses=casAuthenIncorrectResponses, casAuthenResponseTime=casAuthenResponseTime, casAuthenTransactionSuccesses=casAuthenTransactionSuccesses, casAuthenTransactionFailures=casAuthenTransactionFailures, casAuthorRequests=casAuthorRequests, casAuthorRequestTimeouts=casAuthorRequestTimeouts, casAuthorUnexpectedResponses=casAuthorUnexpectedResponses, casAuthorServerErrorResponses=casAuthorServerErrorResponses, casAuthorIncorrectResponses=casAuthorIncorrectResponses, casAuthorResponseTime=casAuthorResponseTime, casAuthorTransactionSuccesses=casAuthorTransactionSuccesses, casAuthorTransactionFailures=casAuthorTransactionFailures, casAcctRequests=casAcctRequests, casAcctRequestTimeouts=casAcctRequestTimeouts, casAcctUnexpectedResponses=casAcctUnexpectedResponses, casAcctServerErrorResponses=casAcctServerErrorResponses, casAcctIncorrectResponses=casAcctIncorrectResponses, casAcctResponseTime=casAcctResponseTime, casAcctTransactionSuccesses=casAcctTransactionSuccesses, casAcctTransactionFailures=casAcctTransactionFailures, casState=casState, casCurrentStateDuration=casCurrentStateDuration, casPreviousStateDuration=casPreviousStateDuration, casTotalDeadTime=casTotalDeadTime, casDeadCount=casDeadCount, cAAAServerMIBNotificationPrefix=cAAAServerMIBNotificationPrefix, cAAAServerMIBNotifications=cAAAServerMIBNotifications, cAAAServerMIBConformance=cAAAServerMIBConformance, casMIBCompliances=casMIBCompliances, casMIBGroups=casMIBGroups)

# Notifications
mibBuilder.exportSymbols("CISCO-AAA-SERVER-MIB", casServerStateChange=casServerStateChange)

# Groups
mibBuilder.exportSymbols("CISCO-AAA-SERVER-MIB", casStatisticsGroup=casStatisticsGroup, casConfigGroup=casConfigGroup, casServerNotificationGroup=casServerNotificationGroup)

# Compliances
mibBuilder.exportSymbols("CISCO-AAA-SERVER-MIB", casMIBCompliance=casMIBCompliance)
