# PySNMP SMI module. Autogenerated from smidump -f python CISCO-ENTITY-ALARM-MIB
# by libsmi2pysnmp-0.1.3 at Wed Jun 18 09:11:43 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( PhysicalIndex, entPhysicalIndex, ) = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Gauge32, Integer32, Unsigned32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "Unsigned32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( AutonomousType, DisplayString, RowStatus, TextualConvention, TimeStamp, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "DisplayString", "RowStatus", "TextualConvention", "TimeStamp", "TruthValue")

# Types

class AlarmFilterProfileType(Unsigned32):
    pass

class AlarmList(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,32)
    
class AlarmSeverity(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,2,1,3,)
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), )
    
class AlarmSeverityOrZero(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,4)
    
class AlarmType(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,255)
    

# Objects

ciscoEntityAlarmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 138)).setRevisions(("1999-07-06 21:50",))
if mibBuilder.loadTexts: ciscoEntityAlarmMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoEntityAlarmMIB.setContactInfo("Cisco Systems\nCustomer Service\n\nPostal: 170 W Tasman Drive\nSan Jose, CA 95134\n\nTel: +1 800 553-NETS\n\nE-mail: cs-dslam@cisco.com")
if mibBuilder.loadTexts: ciscoEntityAlarmMIB.setDescription("This MIB module defines the managed objects that support the\nmonitoring of alarms generated by physical entities contained\nby the system, including chassis, slots, modules, ports, power\nsupplies, and fans.  In order to monitor alarms generated by a\nphysical entity, it must be represented by a row in the\nentPhysicalTable (see ENTITY-MIB).")
ciscoEntityAlarmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 1))
ceAlarmDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1))
ceAlarmDescrMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 1))
if mibBuilder.loadTexts: ceAlarmDescrMapTable.setDescription("For each type of entity (represented entPhysicalVendorType\nOID), this table contains a mapping between a unique \nceAlarmDescrIndex and entPhysicalvendorType OID.")
ceAlarmDescrMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 1, 1)).setIndexNames((0, "CISCO-ENTITY-ALARM-MIB", "ceAlarmDescrIndex"))
if mibBuilder.loadTexts: ceAlarmDescrMapEntry.setDescription("A mapping between an alarm description and a vendor type.")
ceAlarmDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 1, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ceAlarmDescrIndex.setDescription("This object uniquely identifies an alarm description.")
ceAlarmDescrVendorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 1, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmDescrVendorType.setDescription("This object specifies an object identifier (typically an\nenterprise-specific OID) that uniquely identifies the vendor\ntype of those physical entities that this alarm description\napplies to.")
ceAlarmDescrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 2))
if mibBuilder.loadTexts: ceAlarmDescrTable.setDescription("This table contains a description for each alarm type\ndefined by each vendor type employed by the system.\nObserve that this table is sparse in nature, as it is\nrarely the case that a physical entity type needs to \ndefine every alarm in its alarm space.")
ceAlarmDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 2, 1)).setIndexNames((0, "CISCO-ENTITY-ALARM-MIB", "ceAlarmDescrIndex"), (0, "CISCO-ENTITY-ALARM-MIB", "ceAlarmDescrAlarmType"))
if mibBuilder.loadTexts: ceAlarmDescrEntry.setDescription("A collection of attributes that describe an alarm type.")
ceAlarmDescrAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 2, 1, 1), AlarmType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ceAlarmDescrAlarmType.setDescription("This object specifies the alarm type being described.")
ceAlarmDescrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 2, 1, 2), AlarmSeverityOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAlarmDescrSeverity.setDescription("This object specifies the severity associated with the\nalarm type.\n\nAn implementation may chose to not allow dynamic severity\nassignment, in which case it would restrict access to this\nobject to be read-only.\n\nIf an implementation allows dynamic severity assignment, then\na management client can revert to the default severity by\nwriting the value '0' to this object.\n\nThere exists a class of systems that should implement dynamic\nseverity assignment.  For example, consider a DSLAM (Digital\nSubscriber Loop Access Multiplexor) designed for both the\ncentral office and pedestal environments.  A 'pedestal' is\ntypically a dark-green metal box mounted on a concrete or stone\nfoundation in which carrier-class companies house equipment.\nThe central office typically controls the temperature and\nhumidity of the environment, reducing reliance on a system's\nfans.  Thus, the customer probably has a desire to reduce the \nseverity of alarms indicating the failure of a fan.  However, a\npedestal environment has a much greater reliance on a system's\nfans.  Thus, the customer probably has a desire to increase the\nseverity of alarms indicating the failure of a fan.")
ceAlarmDescrText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmDescrText.setDescription("This object specifies a human-readable message describing\nthe alarm.")
ceAlarmMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2))
ceAlarmCriticalCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmCriticalCount.setDescription("The value of this object specifies the number of alarms\ncurrently asserted with a severity of 'critical'.")
ceAlarmMajorCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmMajorCount.setDescription("The value of this object specifies the number of alarms\ncurrently asserted with a severity of 'major'.")
ceAlarmMinorCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmMinorCount.setDescription("The value of this object specifies the number of alarms\ncurrently asserted with a severity of 'minor'.")
ceAlarmCutOff = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAlarmCutOff.setDescription("If the management client writes a value of 'true' to this\nobject, the agent stops signalling all external audible alarms\nunder the control of the agent.  Reading this object should\nalways result in a value of 'false'.\n\nObserve that alarm cutoff does not have an effect on monitoring,\nhistory logging, generation of notifications, or syslog message\ngeneration.  It also does not prevent the agent from signalling\nexternal audible alarms for alarms asserted after alarm-cutoff.\n\nThis object emulates the 'alarm cut-off' mechanism typically\ninstalled in a central office (e.g., a big red button).  Observe\nthis object should neither affect external visual alarms under\nthe control of the agent, nor should it affect the current state\nof alarms being asserted by the system.")
ceAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 5))
if mibBuilder.loadTexts: ceAlarmTable.setDescription("This table specifies alarm control and status information\nrelated to each physical entity contained by the system,\nincluding the alarms currently being asserted by each physical\nentity capable of generating alarms.")
ceAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 5, 1)).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ceAlarmEntry.setDescription("Alarm control and status information related to the \ncorresponding physical entity, including a list of those\nalarms currently being asserted by that physical entity.")
ceAlarmFilterProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 5, 1, 1), AlarmFilterProfileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAlarmFilterProfile.setDescription("This object specifies the alarm filter profile associated\nwith the corresponding physical entity.  An alarm filter\nprofile controls which alarm types the agent will monitor\nand signal for the corresponding physical entity.\n\nIf the value of this object is '0', then the agent monitors\nand signals all alarms associated with the corresponding\nphysical entity.")
ceAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 5, 1, 2), AlarmSeverityOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmSeverity.setDescription("This object specifies the highest severity alarm currently\nbeing asserted by the corresponding physical entity.  A value\nof '0' indicates that there the corresponding physical entity\ncurrently is not asserting any alarms.")
ceAlarmList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 5, 1, 3), AlarmList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmList.setDescription("This object specifies those alarms currently being asserted\nby the corresponding physical entity.  Note, an alarm indicates\na condition, not an event.  An alarm has two states:\n\n    'asserted'  Indicates that the condition described by the\n                alarm exists.\n\n    'cleared'   Indicates that the condition described by the\n                alarm does not exist.\n\nFor example, a slot in a chassis may define an alarm that\nspecifies whether the slot contains a module.  At the time of\nmodule insertion, the physical entity corresponding to the slot\nasserts this alarm, and the alarm remains asserted until the \nslot becomes empty.\n\nIf an alarm is being asserted by the physical entity, then the\ncorresponding bit in the alarm list is set to a one. Observe\nthat if the physical entity is not currently asserting any\nalarms, then the list will have a length of zero.")
ceAlarmHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3))
ceAlarmHistTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAlarmHistTableSize.setDescription("This object specifies the number of entries that the \nceAlarmHistTable can contain.  When a physical entity\ngenerates an unfiltered alarm, and the capacity of the\nceAlarmHistTable has reached the value specified by\nthis object, then the agent deletes the oldest entity in\norder to accommodate the new entry. A value of '0' prevents\nany history from being retained.  ")
ceAlarmHistLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmHistLastIndex.setDescription("This object specifies the value of the ceAlarmHistIndex\nobject corresponding to the last entry added to the table by the\nagent.\n\nIf the management client uses the notifications defined by this\nmodule, then it can poll this object to determine whether it has\nmissed a notification sent by the agent.")
ceAlarmHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3))
if mibBuilder.loadTexts: ceAlarmHistTable.setDescription("This table contains a history of ceAlarmIndicate and\nceAlarmClear traps generated by the agent.")
ceAlarmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1)).setIndexNames((0, "CISCO-ENTITY-ALARM-MIB", "ceAlarmHistIndex"))
if mibBuilder.loadTexts: ceAlarmHistEntry.setDescription("The information conveyed by a ceAlarmIndicate or\nceAlarmClear trap.")
ceAlarmHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1, 1), Unsigned32()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ceAlarmHistIndex.setDescription("An integer value uniquely identifying the entry in the table.\nThe value of this object starts at '1' and monotonically\nincreases for each alarm condition transition monitored by the\nagent.  If the value of this object is '4294967295', the agent\nwill reset it to '1' upon monitoring the next alarm condition\ntransition.")
ceAlarmHistType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("asserted", 1), ("cleared", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmHistType.setDescription("This object specifies whether the agent created the entry as\nthe result of an alarm being asserted or cleared.")
ceAlarmHistEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmHistEntPhysicalIndex.setDescription("This object specifies the physical entity that generated\nthe alarm.")
ceAlarmHistAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1, 4), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmHistAlarmType.setDescription("This object specifies the type of alarm generated.")
ceAlarmHistSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1, 5), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmHistSeverity.setDescription("This object specifies the severity of the alarm generated.")
ceAlarmHistTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmHistTimeStamp.setDescription("This object specifies the value of the sysUpTime object at\nthe time the alarm was generated.")
ceAlarmFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4))
ceAlarmNotifiesEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 1), AlarmSeverityOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAlarmNotifiesEnable.setDescription("This object specifies a severity threshold governing the\ngeneration of ceAlarmAsserted and ceAlarmCleared\nnotifications.  For example, if the value of this object is\nset to 'major', then the agent generates these notifications\nif and only if the severity of the alarm being indicated is\n'major' or 'critical'.  The value of '0' disables the \ngeneration of notifications.\n\nObserve that this setting overrides the value of the \nceAlarmFilterNotifiesEnabled object.\n\nThis object affects notification generation only; that is, it\ndoes not affect monitoring, history logging, and syslog message\ngeneration.")
ceAlarmSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 2), AlarmSeverityOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAlarmSyslogEnable.setDescription("This object specifies a severity threshold governing the\ngeneration of syslog messages corresponding to alarms.  For\nexample, if the value of this object is set to 'major', then\nthe agent generates these a syslog message if and only if the\nseverity of the alarm being indicated is 'major' or 'critical'.\nThe value of '0' disables the generation of syslog messages\ncorresponding to alarms.\n\nObserve that this setting overrides the value of the \nceAlarmFilterSyslogEnabled object.\n\nThis object affects syslog message generation only; that is, it\ndoes not have an effect on monitoring, history logging, and\ngeneration of notifications.")
ceAlarmFilterProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 3), AlarmFilterProfileType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmFilterProfileIndexNext.setDescription("This object contains an appropriate value to be used\nfor ceAlarmFilterIndex when creating entries in the\nceAlarmFilterProfileTable.  The value '0' indicates\nthat no unassigned entries are available.  To obtain\na ceAlarmFilterIndex, the management client issues\na get request.  The agent has the responsibility of \nmodifying the value of this object following each \nsuccessful get request.")
ceAlarmFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4))
if mibBuilder.loadTexts: ceAlarmFilterProfileTable.setDescription("This table contains a list of alarm filter profiles.")
ceAlarmFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1)).setIndexNames((0, "CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterIndex"))
if mibBuilder.loadTexts: ceAlarmFilterProfileEntry.setDescription("When a physical entity asserts/clears an alarm AND the\nceAlarmFilterProfile object is not '0', the agent applies\nthe specified alarm filter profile in processing the alarm.\nThe agent uses the following procedure in processing the\ntransition of an alarm condition of a given type:\n\n1)  If the alarm list specified by the alarm filter profile's\n    ceAlarmFilterAlarmsEnabled object specifies that the alarm\n    type is disabled, then the agent performs no further\n    processing.\n\n2)  The agent creates an entry in the ceAlarmHistTable.\n\n3)  If the alarm list specified by the alarm filter profile's \n    ceAlarmFilterNotifiesEnabled object specifies that the alarm\n    type is enabled, then the agent generates the appropriate\n    notification.\n\n4)  If the alarm list specified by the alarm filter profile's\n    ceAlarmFilterSyslogEnabled object specifies that the alarm\n    type is enabled, then the agent generates the appropriate\n    syslog message.")
ceAlarmFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1, 1), AlarmFilterProfileType()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ceAlarmFilterIndex.setDescription("This object uniquely identifies the alarm filter profile.")
ceAlarmFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceAlarmFilterStatus.setDescription("This object facilitates the creation, modification, or \ndeletion of a conceptual row in this table.\n\nA management client can create a conceptual row in this\ntable by setting this object to 'createAndWait' or \n'createAndGo'.  If a request to create a conceptual row\nin this table fails, then the system is not capable of\nsupporting any more alarm filters.\n\nBefore modifying a conceptual row in this table, the \nmanagement client must set this object to 'notInService'.\nAfter modifying a conceptual row in this table, the \nmanagement client must set this object to 'active'.\nThis operation causes the modifications made to an\nalarm filter profile to take effect.\n\nAn implementation should not allow a conceptual row in\nthis table to be deleted if one or more physical entities\nreference it.")
ceAlarmFilterAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceAlarmFilterAlias.setDescription("This object specifies an arbitrary name associated with the\nalarm filter profile by the management client, and provides\na non-volatile 'handle' for the alarm filter profile.\n\nOn the first instantiation of an alarm filter profile, the\nvalue of this object is a zero-length string.  However, an\nagent may choose to set the value to a locally unique default\nvalue.\n\nIf an implementation supports write access to this object,\nthen the agent is responsible for ensuring the retention\nof any value written to this object until a management client\ndeletes it.  The level of retention must span reboots and \nreinitializations of the network management system, including\nthose that result in different assignments to the value of\nthe entPhysicalIndex associated with the physical entity.")
ceAlarmFilterAlarmsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1, 4), AlarmList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceAlarmFilterAlarmsEnabled.setDescription("This object specifies a list of alarms that are enabled.")
ceAlarmFilterNotifiesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1, 5), AlarmList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceAlarmFilterNotifiesEnabled.setDescription("This object specifies a list of alarms for which notification\ngeneration is enabled.")
ceAlarmFilterSyslogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1, 6), AlarmList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceAlarmFilterSyslogEnabled.setDescription("This object specifies a list of alarms for which syslog\nmessage generation is enabled.")
ciscoEntityAlarmMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 2))
ciscoEntityAlarmMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 2, 0))
ciscoEntityAlarmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 3))
ciscoEntityAlarmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 1))
ciscoEntityAlarmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 2))

# Augmentions

# Notifications

ceAlarmAsserted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 138, 2, 0, 1)).setObjects(*(("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistEntPhysicalIndex"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistSeverity"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistAlarmType"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistTimeStamp"), ) )
if mibBuilder.loadTexts: ceAlarmAsserted.setDescription("The agent generates this trap when a physical entity\nasserts an alarm.")
ceAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 138, 2, 0, 2)).setObjects(*(("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistEntPhysicalIndex"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistSeverity"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistAlarmType"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistTimeStamp"), ) )
if mibBuilder.loadTexts: ceAlarmCleared.setDescription("The agent generates this trap when a physical entity\nclears a previously asserted alarm.")

# Groups

ceAlarmDescriptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 2, 1)).setObjects(*(("CISCO-ENTITY-ALARM-MIB", "ceAlarmDescrSeverity"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmDescrText"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmDescrVendorType"), ) )
if mibBuilder.loadTexts: ceAlarmDescriptionGroup.setDescription("A collection of managed objects defining the description\nof alarms.")
ceAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 2, 2)).setObjects(*(("CISCO-ENTITY-ALARM-MIB", "ceAlarmMinorCount"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmList"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmCriticalCount"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterProfile"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmCutOff"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmSeverity"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmMajorCount"), ) )
if mibBuilder.loadTexts: ceAlarmGroup.setDescription("A collection of managed objects defining alarm reporting\nby physical entity.")
ceAlarmHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 2, 3)).setObjects(*(("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistTableSize"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistType"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistAlarmType"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistSeverity"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistLastIndex"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistEntPhysicalIndex"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistTimeStamp"), ) )
if mibBuilder.loadTexts: ceAlarmHistGroup.setDescription("A collection of managed objects defining alarm logging.")
ceAlarmFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 2, 4)).setObjects(*(("CISCO-ENTITY-ALARM-MIB", "ceAlarmNotifiesEnable"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmSyslogEnable"), ) )
if mibBuilder.loadTexts: ceAlarmFilterGroup.setDescription("A collection of managed objects that control the generation\nof all notifications and syslog messages.")
ceAlarmFilterProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 2, 5)).setObjects(*(("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterAlias"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterProfileIndexNext"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterStatus"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterAlarmsEnabled"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterNotifiesEnabled"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterSyslogEnabled"), ) )
if mibBuilder.loadTexts: ceAlarmFilterProfileGroup.setDescription("A collection of managed objects that support alarm filtering.")

# Compliances

ceAlarmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 1, 1)).setObjects(*(("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistGroup"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterGroup"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterProfileGroup"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmDescriptionGroup"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmGroup"), ) )
if mibBuilder.loadTexts: ceAlarmMIBCompliance.setDescription("The compliance statement for entities that implement the\nCISCO-ALARM-MIB.  Implementation of this MIB module is strongly\nrecommended for any platform targeted for a carrier-class\nenvironment.")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-ENTITY-ALARM-MIB", PYSNMP_MODULE_ID=ciscoEntityAlarmMIB)

# Types
mibBuilder.exportSymbols("CISCO-ENTITY-ALARM-MIB", AlarmFilterProfileType=AlarmFilterProfileType, AlarmList=AlarmList, AlarmSeverity=AlarmSeverity, AlarmSeverityOrZero=AlarmSeverityOrZero, AlarmType=AlarmType)

# Objects
mibBuilder.exportSymbols("CISCO-ENTITY-ALARM-MIB", ciscoEntityAlarmMIB=ciscoEntityAlarmMIB, ciscoEntityAlarmMIBObjects=ciscoEntityAlarmMIBObjects, ceAlarmDescription=ceAlarmDescription, ceAlarmDescrMapTable=ceAlarmDescrMapTable, ceAlarmDescrMapEntry=ceAlarmDescrMapEntry, ceAlarmDescrIndex=ceAlarmDescrIndex, ceAlarmDescrVendorType=ceAlarmDescrVendorType, ceAlarmDescrTable=ceAlarmDescrTable, ceAlarmDescrEntry=ceAlarmDescrEntry, ceAlarmDescrAlarmType=ceAlarmDescrAlarmType, ceAlarmDescrSeverity=ceAlarmDescrSeverity, ceAlarmDescrText=ceAlarmDescrText, ceAlarmMonitoring=ceAlarmMonitoring, ceAlarmCriticalCount=ceAlarmCriticalCount, ceAlarmMajorCount=ceAlarmMajorCount, ceAlarmMinorCount=ceAlarmMinorCount, ceAlarmCutOff=ceAlarmCutOff, ceAlarmTable=ceAlarmTable, ceAlarmEntry=ceAlarmEntry, ceAlarmFilterProfile=ceAlarmFilterProfile, ceAlarmSeverity=ceAlarmSeverity, ceAlarmList=ceAlarmList, ceAlarmHistory=ceAlarmHistory, ceAlarmHistTableSize=ceAlarmHistTableSize, ceAlarmHistLastIndex=ceAlarmHistLastIndex, ceAlarmHistTable=ceAlarmHistTable, ceAlarmHistEntry=ceAlarmHistEntry, ceAlarmHistIndex=ceAlarmHistIndex, ceAlarmHistType=ceAlarmHistType, ceAlarmHistEntPhysicalIndex=ceAlarmHistEntPhysicalIndex, ceAlarmHistAlarmType=ceAlarmHistAlarmType, ceAlarmHistSeverity=ceAlarmHistSeverity, ceAlarmHistTimeStamp=ceAlarmHistTimeStamp, ceAlarmFiltering=ceAlarmFiltering, ceAlarmNotifiesEnable=ceAlarmNotifiesEnable, ceAlarmSyslogEnable=ceAlarmSyslogEnable, ceAlarmFilterProfileIndexNext=ceAlarmFilterProfileIndexNext, ceAlarmFilterProfileTable=ceAlarmFilterProfileTable, ceAlarmFilterProfileEntry=ceAlarmFilterProfileEntry, ceAlarmFilterIndex=ceAlarmFilterIndex, ceAlarmFilterStatus=ceAlarmFilterStatus, ceAlarmFilterAlias=ceAlarmFilterAlias, ceAlarmFilterAlarmsEnabled=ceAlarmFilterAlarmsEnabled, ceAlarmFilterNotifiesEnabled=ceAlarmFilterNotifiesEnabled, ceAlarmFilterSyslogEnabled=ceAlarmFilterSyslogEnabled, ciscoEntityAlarmMIBNotificationsPrefix=ciscoEntityAlarmMIBNotificationsPrefix, ciscoEntityAlarmMIBNotifications=ciscoEntityAlarmMIBNotifications, ciscoEntityAlarmMIBConformance=ciscoEntityAlarmMIBConformance, ciscoEntityAlarmMIBCompliances=ciscoEntityAlarmMIBCompliances, ciscoEntityAlarmMIBGroups=ciscoEntityAlarmMIBGroups)

# Notifications
mibBuilder.exportSymbols("CISCO-ENTITY-ALARM-MIB", ceAlarmAsserted=ceAlarmAsserted, ceAlarmCleared=ceAlarmCleared)

# Groups
mibBuilder.exportSymbols("CISCO-ENTITY-ALARM-MIB", ceAlarmDescriptionGroup=ceAlarmDescriptionGroup, ceAlarmGroup=ceAlarmGroup, ceAlarmHistGroup=ceAlarmHistGroup, ceAlarmFilterGroup=ceAlarmFilterGroup, ceAlarmFilterProfileGroup=ceAlarmFilterProfileGroup)

# Compliances
mibBuilder.exportSymbols("CISCO-ENTITY-ALARM-MIB", ceAlarmMIBCompliance=ceAlarmMIBCompliance)
