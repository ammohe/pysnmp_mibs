# PySNMP SMI module. Autogenerated from smidump -f python F5-BIGIP-GLOBAL-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 18:17:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( LongDisplayString, bigipCompliances, bigipGroups, bigipTrafficMgmt, ) = mibBuilder.importSymbols("F5-BIGIP-COMMON-MIB", "LongDisplayString", "bigipCompliances", "bigipGroups", "bigipTrafficMgmt")
( CounterBasedGauge64, ) = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
( InetAddress, InetAddressType, InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
( Gauge, ) = mibBuilder.importSymbols("RFC1155-SMI", "Gauge")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Counter64, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, TimeTicks, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Opaque", "TimeTicks", "TimeTicks", "enterprises")
( MacAddress, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention")

# Objects

bigipGlobalTM = ModuleIdentity((1, 3, 6, 1, 4, 1, 3375, 2, 3)).setRevisions(("2013-03-13 23:39",))
if mibBuilder.loadTexts: bigipGlobalTM.setOrganization("F5 Networks, Inc.")
if mibBuilder.loadTexts: bigipGlobalTM.setContactInfo("postal: F5 Networks, Inc. \n401 Elliott Ave. West \nSeattle, WA 98119\nphone:  (206) 272-5555\nemail:  support@f5.com")
if mibBuilder.loadTexts: bigipGlobalTM.setDescription("Top-level infrastructure of the F5 enterprise MIB tree.")
gtmGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1))
gtmGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1))
gtmGlobalAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1))
gtmAttrDumpTopology = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDumpTopology.setDescription("Deprecated!.\nThe state indicating whether or not to dump the topology.")
gtmAttrCacheLdns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrCacheLdns.setDescription("Deprecated!.\nThe state indicating whether or not to cache LDNSes.")
gtmAttrAolAware = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrAolAware.setDescription("Deprecated!.\nThe state indicating whether or not local DNS servers that \nbelong to AOL (America Online) are recognized.")
gtmAttrCheckStaticDepends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrCheckStaticDepends.setDescription("Deprecated!.\nThe state indicating whether or not to check the availability \nof virtual servers.")
gtmAttrCheckDynamicDepends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrCheckDynamicDepends.setDescription("Deprecated!.\nThe state indicating whether or not to check availability of \na path before it uses the path for load balancing.")
gtmAttrDrainRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDrainRequests.setDescription("Deprecated!.\nThe state indicating whether or not persistent connections \nare allowed to remain connected, until TTL expires, \nwhen disabling a pool.")
gtmAttrEnableResetsRipeness = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrEnableResetsRipeness.setDescription("Deprecated!.\nThe state indicating whether or not ripeness value is allowed \nto be reset.")
gtmAttrFbRespectDepends = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrFbRespectDepends.setDescription("Deprecated!.\nThe state indicating whether or not to respect virtual server \nstatus when load balancing switches to the fallback mode.")
gtmAttrFbRespectAcl = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrFbRespectAcl.setDescription("Deprecated!.\nDeprecated! The state indicating whether or not to respect ACL. \n This is part of an outdated mechanism for disabling virtual servers")
gtmAttrDefaultAlternate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(10,9,3,5,18,16,7,0,15,11,17,6,8,13,2,1,12,14,4,)).subtype(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vssore", 18), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersist", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDefaultAlternate.setDescription("Deprecated!.\nThe default alternate LB method.")
gtmAttrDefaultFallback = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(10,9,18,3,16,7,0,15,5,11,17,6,8,13,2,1,12,14,4,)).subtype(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDefaultFallback.setDescription("Deprecated!.\nThe default fallback LB method.")
gtmAttrPersistMask = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrPersistMask.setDescription("Deprecated!.\nDeprecated! Replaced by gtmAttrStaticPersistCidr and gtmAttrStaticPersistV6Cidr.\nThe persistence mask which is used to determine the netmask applied\nfor static persistance requests.")
gtmAttrGtmSetsRecursion = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrGtmSetsRecursion.setDescription("Deprecated!.\nThe state indicating whether set recursion by global \ntraffic management object(GTM) is enable or not.")
gtmAttrQosFactorLcs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorLcs.setDescription("Deprecated!.\nThe factor used to normalize link capacity values \nwhen the load balancing mode is set to LB_METHOD_QOS.")
gtmAttrQosFactorRtt = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorRtt.setDescription("Deprecated!.\nThe factor used to normalize round-trip time values \nwhen the load balancing mode is set to LB_METHOD_QOS.")
gtmAttrQosFactorHops = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorHops.setDescription("Deprecated!.\nThe factor used to normalize hops when the load \nbalancing mode is set to LB_METHOD_QOS.")
gtmAttrQosFactorHitRatio = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorHitRatio.setDescription("Deprecated!.\nThe factor used to normalize ping packet completion \nrates when the load balancing mode is set to LB_METHOD_QOS.")
gtmAttrQosFactorPacketRate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorPacketRate.setDescription("Deprecated!.\nThe factor used to normalize packet rates when the load \nbalancing mode is set to LB_METHOD_QOS.")
gtmAttrQosFactorBps = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorBps.setDescription("Deprecated!.\nThe factor used to normalize kilobytes per second \nwhen the load balancing mode is set to LB_METHOD_QOS.")
gtmAttrQosFactorVsCapacity = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorVsCapacity.setDescription("Deprecated!.\nThe factor used to normalize virtual server capacity \nvalues when the load balancing mode is set to LB_METHOD_QOS.")
gtmAttrQosFactorTopology = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorTopology.setDescription("Deprecated!.\nThe factor used to normalize topology values when the load \nbalancing mode is set to LB_METHOD_QOS.")
gtmAttrQosFactorConnRate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorConnRate.setDescription("Deprecated!.\nDeprecated! \nReplaced by gtmAttrQosFactorVsScore. \nThe factor used to normalize connection rates when the load \nbalancing mode is set to LB_METHOD_QOS.")
gtmAttrTimerRetryPathData = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimerRetryPathData.setDescription("Deprecated!.\nThe frequency at which to retrieve path data.")
gtmAttrTimerGetAutoconfigData = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimerGetAutoconfigData.setDescription("Deprecated!.\nThe frequency at which to retrieve auto-configuration data.")
gtmAttrTimerPersistCache = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimerPersistCache.setDescription("Deprecated!.\nThe frequency at which to retrieve path and metrics \ndata from the system cache.")
gtmAttrDefaultProbeLimit = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDefaultProbeLimit.setDescription("Deprecated!.\nThe default probe limit, the number of times to probe a path.")
gtmAttrDownThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDownThreshold.setDescription("Deprecated!.\nThe down_threshold value. If a host server or a host virtual server \nhas been marked down for the last down_threshold probing cycles \n(timer_get_host_data or timer_get_vs_data respectively), then perform \nservice checks every down_multiple * timer period instead.")
gtmAttrDownMultiple = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrDownMultiple.setDescription("Deprecated!.\nThe down_multiple value. If a host server or a host virtual server \nhas been marked down for the last down_threshold probing cycles \n(timer_get_host_data or timer_get_vs_data respectively), then perform \nservice checks every down_multiple * timer period instead.")
gtmAttrPathTtl = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrPathTtl.setDescription("Deprecated!.\nThe TTL for the path information.")
gtmAttrTraceTtl = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTraceTtl.setDescription("Deprecated!.\nThe TTL for the traceroute information.")
gtmAttrLdnsDuration = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLdnsDuration.setDescription("Deprecated!.\nThe number of seconds that an inactive LDNS remains cached.")
gtmAttrPathDuration = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrPathDuration.setDescription("Deprecated!.\nThe number of seconds that a path remains cached after its last access.")
gtmAttrRttSampleCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrRttSampleCount.setDescription("Deprecated!.\nThe number of packets to send out in a probe request to determine \npath information.")
gtmAttrRttPacketLength = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrRttPacketLength.setDescription("Deprecated!.\nThe length of the packet sent out in a probe request to determine \npath information.")
gtmAttrRttTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrRttTimeout.setDescription("Deprecated!.\nThe timeout for RTT, in seconds.")
gtmAttrMaxMonReqs = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrMaxMonReqs.setDescription("Deprecated!.\nThe maximum synchronous monitor request, which is used to control \nthe maximum number of monitor requests being sent out at one time \nfor a given probing interval. This will allow the user to smooth out \nmonitor probe requests as much as they desire.")
gtmAttrTraceroutePort = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 37), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTraceroutePort.setDescription("Deprecated!.\nThe port to use to collect traceroute (hops) data.")
gtmAttrPathsNeverDie = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 38), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrPathsNeverDie.setDescription("Deprecated!.\nThe state indicating whether the dynamic load balancing modes \ncan use path data even after the TTL for the path data has expired.")
gtmAttrProbeDisabledObjects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 39), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrProbeDisabledObjects.setDescription("Deprecated!.\nThe state indicating whether probing disabled objects by global\ntraffic management object(GTM) is enabled or not.")
gtmAttrLinkLimitFactor = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkLimitFactor.setDescription("Deprecated!.\nThe link limit factor, which is used to set a target percentage \nfor traffic. For example, if it is set to 90, the ratio cost \nbased load-balancing will set a ratio with a maximum value equal \nto 90% of the limit value for the link. Default is 95%.")
gtmAttrOverLimitLinkLimitFactor = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrOverLimitLinkLimitFactor.setDescription("Deprecated!.\nThe over-limit link limit factor. If traffic on a link exceeds \nthe limit, this factor will be used instead of the link_limit_factor \nuntil the traffic is over limit for more than max_link_over_limit_count \ntimes. Once the limit has been exceeded too many times, all traffic\nis shut off for the link. The default for \nover_limit_link_limit_factor is 90%.")
gtmAttrLinkPrepaidFactor = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkPrepaidFactor.setDescription("Deprecated!.\nThe link prepaid factor. Maximum percentage of traffic allocated \nto link which has a traffic allotment which has been prepaid. \nDefault is 95%.")
gtmAttrLinkCompensateInbound = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkCompensateInbound.setDescription("Deprecated!.\nThe link compensate inbound. If set, the link allotment calculation \nwill take into account traffic which does not flow through the BIGIP, \ni.e. if more traffic is flowing through a link as measured by SNMP \non the router than is flowing through the BIGIP. This applies to \ninbound traffic which the major volume will initiate from internal \nclients.")
gtmAttrLinkCompensateOutbound = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkCompensateOutbound.setDescription("Deprecated!.\nThe link compensate outbound. If set, the link allotment calculation \nwill take into account traffic which does not flow through the BIGIP, \ni.e. if more traffic is flowing through a link as measured by SNMP \non the router than is flowing through the BIGIP. This applies to \noutbound traffic which the major volume will initiate from internal \nclients.")
gtmAttrLinkCompensationHistory = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLinkCompensationHistory.setDescription("Deprecated!.\nThe link compensation history.")
gtmAttrMaxLinkOverLimitCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrMaxLinkOverLimitCount.setDescription("Deprecated!.\nThe maximum link over limit count. The count of how many times \nin a row traffic may be over the defined limit for the link before \nit is shut off entirely. Default is 1.")
gtmAttrLowerBoundPctRow = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLowerBoundPctRow.setDescription("Deprecated!.\nDeprecated! No longer useful.	\nThe lower bound percentage row option in Internet Weather Map.")
gtmAttrLowerBoundPctCol = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrLowerBoundPctCol.setDescription("Deprecated!.\nDeprecated! No longer useful.\nThe lower bound percentage column option in Internet Weather Map.")
gtmAttrAutoconf = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 49), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrAutoconf.setDescription("Deprecated!.\nThe state indicating whether to auto configure BIGIP/3DNS servers \n(automatic addition and deletion of self IPs and virtual servers).")
gtmAttrAutosync = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 50), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrAutosync.setDescription("Deprecated!.\nThe state indicating whether or not to autosync. \nAllows automatic updates of wideip.conf to/from other 3-DNSes.")
gtmAttrSyncNamedConf = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 51), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrSyncNamedConf.setDescription("Deprecated!.\nThe state indicating whether or not to auto-synchronize named \nconfiguration. Allows automatic updates of named.conf to/from other 3-DNSes.")
gtmAttrSyncGroup = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 52), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrSyncGroup.setDescription("Deprecated!.\nThe name of sync group.")
gtmAttrSyncTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrSyncTimeout.setDescription("Deprecated!.\nThe sync timeout.  If synch'ing from a remote 3-DNS takes longer than \nthis timeout, then abort the connection.")
gtmAttrSyncZonesTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrSyncZonesTimeout.setDescription("Deprecated!.\nThe sync zones timeout. If synch'ing named and zone configuration \ntakes this timeout, then abort the connection.")
gtmAttrTimeTolerance = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimeTolerance.setDescription("Deprecated!.\nThe allowable time difference for data to be out of sync between \nmembers of a sync group.")
gtmAttrTopologyLongestMatch = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 56), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTopologyLongestMatch.setDescription("Deprecated!.\nThe state indicating  whether or not the 3-DNS Controller selects \nthe topology record that is most specific and, thus, has the longest \nmatch, in cases where there are several IP/netmask items that match \na particular IP address.  \nIf it is set to false, the 3-DNS Controller uses the first topology record \nthat matches (according to the order of entry) in the topology statement.")
gtmAttrTopologyAclThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTopologyAclThreshold.setDescription("Deprecated!.\nDeprecated! The threshold of the topology ACL. \n This is an outdated mechanism for disabling a node.")
gtmAttrStaticPersistCidr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrStaticPersistCidr.setDescription("Deprecated!.\nThe variable used with the static persistence load balancing mode \nto allow users to specify what cidr should be used. \nThis is used for IPv4.")
gtmAttrStaticPersistV6Cidr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrStaticPersistV6Cidr.setDescription("Deprecated!.\nThe variable used with the static persistence load balancing mode \nto allow users to specify what cidr should be used. \nThis is used for IPv6.")
gtmAttrQosFactorVsScore = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrQosFactorVsScore.setDescription("Deprecated!.\nThe factor used to normalize virtual server (VS) score \nwhen the load balancing mode is set to LB_METHOD_QOS.")
gtmAttrTimerSendKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrTimerSendKeepAlive.setDescription("Deprecated!.\nThe frequency of GTM keep alive messages (strictly the config timestamps).")
gtmAttrCertificateDepth = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrCertificateDepth.setDescription("Deprecated!.\nDeprecated! No longer updated.\nWhen non-zero, customers may use their own SSL certificates by setting the certificate depth.")
gtmAttrMaxMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttrMaxMemoryUsage.setDescription("Deprecated!.\nDeprecated! The maximum amount of memory (in MB) allocated to GTM.")
gtmGlobalLdnsProbeProto = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2))
gtmGlobalLdnsProbeProtoNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoNumber.setDescription("The number of gtmGlobalLdnsProbeProto entries in the table.")
gtmGlobalLdnsProbeProtoTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2))
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoTable.setDescription("A table containing information of global LDSN probe protocols for GTM (Global Traffic Management).")
gtmGlobalLdnsProbeProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoIndex"))
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoEntry.setDescription("Columns in the gtmGlobalLdnsProbeProto Table")
gtmGlobalLdnsProbeProtoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoIndex.setDescription("The index of LDNS probe protocols.")
gtmGlobalLdnsProbeProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,0,)).subtype(namedValues=NamedValues(("icmp", 0), ("tcp", 1), ("udp", 2), ("dnsdot", 3), ("dnsrev", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoType.setDescription("The LDNS probe protocol. The less index is, the more preferred protocol is.")
gtmGlobalLdnsProbeProtoName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoName.setDescription("name as a key.")
gtmGlobalAttr2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3))
gtmAttr2Number = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2Number.setDescription("The number of gtmGlobalAttr2 entries in the table.")
gtmAttr2Table = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2))
if mibBuilder.loadTexts: gtmAttr2Table.setDescription("The information of the global attributes for GTM (Global Traffic Management).")
gtmAttr2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAttr2Name"))
if mibBuilder.loadTexts: gtmAttr2Entry.setDescription("Columns in the gtmAttr2 Table")
gtmAttr2DumpTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DumpTopology.setDescription("The state indicating whether or not to dump the topology.")
gtmAttr2CacheLdns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2CacheLdns.setDescription("The state indicating whether or not to cache LDNSes.")
gtmAttr2AolAware = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2AolAware.setDescription("The state indicating whether or not local DNS servers that \nbelong to AOL (America Online) are recognized.")
gtmAttr2CheckStaticDepends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2CheckStaticDepends.setDescription("The state indicating whether or not to check the availability \nof virtual servers.")
gtmAttr2CheckDynamicDepends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2CheckDynamicDepends.setDescription("The state indicating whether or not to check availability of \na path before it uses the path for load balancing.")
gtmAttr2DrainRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DrainRequests.setDescription("The state indicating whether or not persistent connections \nare allowed to remain connected, until TTL expires, \nwhen disabling a pool.")
gtmAttr2EnableResetsRipeness = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2EnableResetsRipeness.setDescription("The state indicating whether or not ripeness value is allowed \nto be reset.")
gtmAttr2FbRespectDepends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2FbRespectDepends.setDescription("The state indicating whether or not to respect virtual server \nstatus when load balancing switches to the fallback mode.")
gtmAttr2FbRespectAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2FbRespectAcl.setDescription("Deprecated! The state indicating whether or not to respect ACL. \nThis is part of an outdated mechanism for disabling virtual servers")
gtmAttr2DefaultAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(10,9,3,5,18,16,7,0,15,11,17,6,8,13,2,1,12,14,4,)).subtype(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vssore", 18), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersist", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DefaultAlternate.setDescription("The default alternate LB method.")
gtmAttr2DefaultFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(10,9,18,3,16,7,0,15,5,11,17,6,8,13,2,1,12,14,4,)).subtype(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DefaultFallback.setDescription("The default fallback LB method.")
gtmAttr2PersistMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2PersistMask.setDescription("Deprecated! Replaced by gtmAttrStaticPersistCidr and gtmAttrStaticPersistV6Cidr.\nThe persistence mask which is used to determine the netmask applied\nfor static persistance requests.")
gtmAttr2GtmSetsRecursion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2GtmSetsRecursion.setDescription("The state indicating whether set recursion by global \ntraffic management object(GTM) is enable or not.")
gtmAttr2QosFactorLcs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorLcs.setDescription("The factor used to normalize link capacity values \nwhen the load balancing mode is set to LB_METHOD_QOS.")
gtmAttr2QosFactorRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorRtt.setDescription("The factor used to normalize round-trip time values \nwhen the load balancing mode is set to LB_METHOD_QOS.")
gtmAttr2QosFactorHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorHops.setDescription("The factor used to normalize hops when the load \nbalancing mode is set to LB_METHOD_QOS.")
gtmAttr2QosFactorHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorHitRatio.setDescription("The factor used to normalize ping packet completion \nrates when the load balancing mode is set to LB_METHOD_QOS.")
gtmAttr2QosFactorPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorPacketRate.setDescription("The factor used to normalize packet rates when the load \nbalancing mode is set to LB_METHOD_QOS.")
gtmAttr2QosFactorBps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorBps.setDescription("The factor used to normalize kilobytes per second \nwhen the load balancing mode is set to LB_METHOD_QOS.")
gtmAttr2QosFactorVsCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorVsCapacity.setDescription("The factor used to normalize virtual server capacity \nvalues when the load balancing mode is set to LB_METHOD_QOS.")
gtmAttr2QosFactorTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorTopology.setDescription("The factor used to normalize topology values when the load \nbalancing mode is set to LB_METHOD_QOS.")
gtmAttr2QosFactorConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorConnRate.setDescription("Deprecated! \nReplaced by gtmAttrQosFactorVsScore. \nThe factor used to normalize connection rates when the load \nbalancing mode is set to LB_METHOD_QOS.")
gtmAttr2TimerRetryPathData = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimerRetryPathData.setDescription("The frequency at which to retrieve path data.")
gtmAttr2TimerGetAutoconfigData = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimerGetAutoconfigData.setDescription("The frequency at which to retrieve auto-configuration data.")
gtmAttr2TimerPersistCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimerPersistCache.setDescription("The frequency at which to retrieve path and metrics \ndata from the system cache.")
gtmAttr2DefaultProbeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DefaultProbeLimit.setDescription("The default probe limit, the number of times to probe a path.")
gtmAttr2DownThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DownThreshold.setDescription("The down_threshold value. If a host server or a host virtual server \nhas been marked down for the last down_threshold probing cycles \n(timer_get_host_data or timer_get_vs_data respectively), then perform \nservice checks every down_multiple * timer period instead.")
gtmAttr2DownMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2DownMultiple.setDescription("The down_multiple value. If a host server or a host virtual server \nhas been marked down for the last down_threshold probing cycles \n(timer_get_host_data or timer_get_vs_data respectively), then perform \nservice checks every down_multiple * timer period instead.")
gtmAttr2PathTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2PathTtl.setDescription("The TTL for the path information.")
gtmAttr2TraceTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TraceTtl.setDescription("The TTL for the traceroute information.")
gtmAttr2LdnsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LdnsDuration.setDescription("The number of seconds that an inactive LDNS remains cached.")
gtmAttr2PathDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2PathDuration.setDescription("The number of seconds that a path remains cached after its last access.")
gtmAttr2RttSampleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2RttSampleCount.setDescription("The number of packets to send out in a probe request to determine \npath information.")
gtmAttr2RttPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2RttPacketLength.setDescription("The length of the packet sent out in a probe request to determine \npath information.")
gtmAttr2RttTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2RttTimeout.setDescription("The timeout for RTT, in seconds.")
gtmAttr2MaxMonReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2MaxMonReqs.setDescription("The maximum synchronous monitor request, which is used to control \nthe maximum number of monitor requests being sent out at one time \nfor a given probing interval. This will allow the user to smooth out \nmonitor probe requests as much as they desire.")
gtmAttr2TraceroutePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 37), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TraceroutePort.setDescription("The port to use to collect traceroute (hops) data.")
gtmAttr2PathsNeverDie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 38), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2PathsNeverDie.setDescription("The state indicating whether the dynamic load balancing modes \ncan use path data even after the TTL for the path data has expired.")
gtmAttr2ProbeDisabledObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 39), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2ProbeDisabledObjects.setDescription("The state indicating whether probing disabled objects by global\ntraffic management object(GTM) is enabled or not.")
gtmAttr2LinkLimitFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkLimitFactor.setDescription("The link limit factor, which is used to set a target percentage \nfor traffic. For example, if it is set to 90, the ratio cost \nbased load-balancing will set a ratio with a maximum value equal \nto 90% of the limit value for the link. Default is 95%.")
gtmAttr2OverLimitLinkLimitFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2OverLimitLinkLimitFactor.setDescription("The over-limit link limit factor. If traffic on a link exceeds \nthe limit, this factor will be used instead of the link_limit_factor \nuntil the traffic is over limit for more than max_link_over_limit_count \ntimes. Once the limit has been exceeded too many times, all traffic\nis shut off for the link. The default for \nover_limit_link_limit_factor is 90%.")
gtmAttr2LinkPrepaidFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkPrepaidFactor.setDescription("The link prepaid factor. Maximum percentage of traffic allocated \nto link which has a traffic allotment which has been prepaid. \nDefault is 95%.")
gtmAttr2LinkCompensateInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkCompensateInbound.setDescription("The link compensate inbound. If set, the link allotment calculation \nwill take into account traffic which does not flow through the BIGIP, \ni.e. if more traffic is flowing through a link as measured by SNMP \non the router than is flowing through the BIGIP. This applies to \ninbound traffic which the major volume will initiate from internal \nclients.")
gtmAttr2LinkCompensateOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkCompensateOutbound.setDescription("The link compensate outbound. If set, the link allotment calculation \nwill take into account traffic which does not flow through the BIGIP, \ni.e. if more traffic is flowing through a link as measured by SNMP \non the router than is flowing through the BIGIP. This applies to \noutbound traffic which the major volume will initiate from internal \nclients.")
gtmAttr2LinkCompensationHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LinkCompensationHistory.setDescription("The link compensation history.")
gtmAttr2MaxLinkOverLimitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2MaxLinkOverLimitCount.setDescription("The maximum link over limit count. The count of how many times \nin a row traffic may be over the defined limit for the link before \nit is shut off entirely. Default is 1.")
gtmAttr2LowerBoundPctRow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LowerBoundPctRow.setDescription("Deprecated! No longer useful.\nThe lower bound percentage row option in Internet Weather Map.")
gtmAttr2LowerBoundPctCol = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2LowerBoundPctCol.setDescription("Deprecated! No longer useful.\nThe lower bound percentage column option in Internet Weather Map.")
gtmAttr2Autoconf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 49), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2Autoconf.setDescription("The state indicating whether to auto configure BIGIP/3DNS servers \n(automatic addition and deletion of self IPs and virtual servers).")
gtmAttr2Autosync = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 50), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2Autosync.setDescription("The state indicating whether or not to autosync. \nAllows automatic updates of wideip.conf to/from other 3-DNSes.")
gtmAttr2SyncNamedConf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 51), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2SyncNamedConf.setDescription("The state indicating whether or not to auto-synchronize named \nconfiguration. Allows automatic updates of named.conf to/from other 3-DNSes.")
gtmAttr2SyncGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 52), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2SyncGroup.setDescription("The name of sync group.")
gtmAttr2SyncTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2SyncTimeout.setDescription("The sync timeout.  If synch'ing from a remote 3-DNS takes longer than \nthis timeout, then abort the connection.")
gtmAttr2SyncZonesTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2SyncZonesTimeout.setDescription("The sync zones timeout. If synch'ing named and zone configuration \ntakes this timeout, then abort the connection.")
gtmAttr2TimeTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimeTolerance.setDescription("The allowable time difference for data to be out of sync between \nmembers of a sync group.")
gtmAttr2TopologyLongestMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 56), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TopologyLongestMatch.setDescription("The state indicating  whether or not the 3-DNS Controller selects \nthe topology record that is most specific and, thus, has the longest \nmatch, in cases where there are several IP/netmask items that match \na particular IP address.  \nIf it is set to false, the 3-DNS Controller uses the first topology record \nthat matches (according to the order of entry) in the topology statement.")
gtmAttr2TopologyAclThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TopologyAclThreshold.setDescription("Deprecated! The threshold of the topology ACL. \nThis is an outdated mechanism for disabling a node.")
gtmAttr2StaticPersistCidr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2StaticPersistCidr.setDescription("The variable used with the static persistence load balancing mode \nto allow users to specify what cidr should be used. \nThis is used for IPv4.")
gtmAttr2StaticPersistV6Cidr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2StaticPersistV6Cidr.setDescription("The variable used with the static persistence load balancing mode \nto allow users to specify what cidr should be used. \nThis is used for IPv6.")
gtmAttr2QosFactorVsScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2QosFactorVsScore.setDescription("The factor used to normalize virtual server (VS) score \nwhen the load balancing mode is set to LB_METHOD_QOS.")
gtmAttr2TimerSendKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2TimerSendKeepAlive.setDescription("The frequency of GTM keep alive messages (strictly the config timestamps).")
gtmAttr2CertificateDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2CertificateDepth.setDescription("Deprecated! No longer updated.\nWhen non-zero, customers may use their own SSL certificates by setting the certificate depth.")
gtmAttr2MaxMemoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2MaxMemoryUsage.setDescription("Deprecated! The maximum amount of memory (in MB) allocated to GTM.")
gtmAttr2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 64), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2Name.setDescription("name as a key.")
gtmAttr2ForwardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 1, 3, 2, 1, 65), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAttr2ForwardStatus.setDescription("The state indicating whether or not to forward object availability status change notifications.")
gtmGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2))
gtmGlobalStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1))
gtmStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmStatResetStats.setDescription("The action to reset resetable statistics data in  gtmGlobalStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
gtmStatRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatRequests.setDescription("The number of total requests for wide IPs for GTM (Global Traffic Management).")
gtmStatResolutions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatResolutions.setDescription("The number of total resolutions for wide IPs for GTM (Global Traffic Management).")
gtmStatPersisted = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatPersisted.setDescription("The number of persisted requests for wide IPs for GTM (Global Traffic Management).")
gtmStatPreferred = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatPreferred.setDescription("The number of times which the preferred load balance method is used \nfor wide IPs for GTM (Global Traffic Management).")
gtmStatAlternate = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatAlternate.setDescription("The number of times which the alternate load balance method is used\nfor wide IPs for GTM (Global Traffic Management).")
gtmStatFallback = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatFallback.setDescription("The number of times which the alternate load balance method is used\nfor wide IPs for GTM (Global Traffic Management).")
gtmStatDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatDropped.setDescription("The number of dropped DNS messages for wide IPs for GTM (Global Traffic Management).")
gtmStatExplicitIp = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatExplicitIp.setDescription("Deprecated! The number of times which a LDNS  was persisted to wide IPs\nby the explicit IP rule for GTM (Global Traffic Management).")
gtmStatReturnToDns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatReturnToDns.setDescription("The number of times which a resolve was returned to DNS (for resolution)\nfor wide IPs for GTM (Global Traffic Management).")
gtmStatReconnects = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatReconnects.setDescription("The number of total reconnects for GTM (Global Traffic Management).")
gtmStatBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatBytesReceived.setDescription("The total number of bytes received by the system for GTM (Global Traffic Management).")
gtmStatBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatBytesSent.setDescription("The total number of bytes sent out by the system for GTM (Global Traffic Management).")
gtmStatNumBacklogged = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatNumBacklogged.setDescription("The number of times when a send action was backlogged for GTM (Global Traffic Management).")
gtmStatBytesDropped = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatBytesDropped.setDescription("The total number of bytes dropped due to backlogged/unconnected \nfor GTM (Global Traffic Management).")
gtmStatLdnses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatLdnses.setDescription("The total current LDNSes for GTM (Global Traffic Management).")
gtmStatPaths = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 17), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatPaths.setDescription("The total current paths for GTM (Global Traffic Management).")
gtmStatReturnFromDns = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatReturnFromDns.setDescription("The number of times which a resolve was returned from DNS\nfor wide IPs for GTM (Global Traffic Management).")
gtmStatCnameResolutions = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatCnameResolutions.setDescription("The number of times which a query is resolved by the CNAME of pools\nassociated with a Wide IP for GTM (Global Traffic Management).")
gtmStatARequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatARequests.setDescription("The number of A requests for wide IPs for GTM (Global Traffic Management).")
gtmStatAaaaRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmStatAaaaRequests.setDescription("The number of AAAA requests for wide IPs for GTM (Global Traffic Management).")
gtmApplications = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2))
gtmApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1))
gtmAppNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppNumber.setDescription("The number of gtmApplication entries in the table.")
gtmAppTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2))
if mibBuilder.loadTexts: gtmAppTable.setDescription("A table containing information of applications for GTM (Global Traffic Management).")
gtmAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAppName"))
if mibBuilder.loadTexts: gtmAppEntry.setDescription("Columns in the gtmApp Table")
gtmAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppName.setDescription("The name of an application.")
gtmAppPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppPersist.setDescription("The state indicating whether persistence is enabled or not.")
gtmAppTtlPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppTtlPersist.setDescription("The persistence TTL value for the specified application.")
gtmAppAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,0,1,2,)).subtype(namedValues=NamedValues(("none", 0), ("server", 1), ("link", 2), ("datacenter", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppAvailability.setDescription("The availability dependency for the specified application.\nThe application object availability does not depend on anything, \nor it depends on at lease one of server, link, or data center being up.")
gtmApplicationStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2))
gtmAppStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusNumber.setDescription("The number of gtmApplicationStatus entries in the table.")
gtmAppStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2))
if mibBuilder.loadTexts: gtmAppStatusTable.setDescription("A table containing status information of applications for GTM (Global Traffic Management).")
gtmAppStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAppStatusName"))
if mibBuilder.loadTexts: gtmAppStatusEntry.setDescription("Columns in the gtmAppStatus Table")
gtmAppStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusName.setDescription("The name of an application.")
gtmAppStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusAvailState.setDescription("The availability of the specified application indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
gtmAppStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusEnabledState.setDescription("The activity status of the specified application, as specified \nby the user.")
gtmAppStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified application.")
gtmAppStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 2, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppStatusDetailReason.setDescription("The detail description of the specified application's status.")
gtmAppContextStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3))
gtmAppContStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatNumber.setDescription("The number of gtmAppContextStat entries in the table.")
gtmAppContStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2))
if mibBuilder.loadTexts: gtmAppContStatTable.setDescription("A table containing information of all able to used objects of \napplication contexts for GTM (Global Traffic Management).")
gtmAppContStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContStatAppName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContStatType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContStatName"))
if mibBuilder.loadTexts: gtmAppContStatEntry.setDescription("Columns in the gtmAppContStat Table")
gtmAppContStatAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatAppName.setDescription("The name of an application.")
gtmAppContStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("datacenter", 0), ("server", 1), ("link", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatType.setDescription("The object type of an application's context for the specified application.")
gtmAppContStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatName.setDescription("The object name of an application's context for the specified application.")
gtmAppContStatNumAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatNumAvail.setDescription("The minimum number of pool members per wide IP available \n(green + enabled) in this context.")
gtmAppContStatAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatAvailState.setDescription("The availability of the specified application context indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
gtmAppContStatEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatEnabledState.setDescription("The activity status of the specified application context, as specified \nby the user.")
gtmAppContStatParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified application context.")
gtmAppContStatDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 3, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContStatDetailReason.setDescription("The detail description of the specified application context 's status.")
gtmAppContextDisable = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4))
gtmAppContDisNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContDisNumber.setDescription("The number of gtmAppContextDisable entries in the table.")
gtmAppContDisTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2))
if mibBuilder.loadTexts: gtmAppContDisTable.setDescription("A table containing information of disabled objects of application \ncontexts for GTM (Global Traffic Management).")
gtmAppContDisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContDisAppName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContDisType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmAppContDisName"))
if mibBuilder.loadTexts: gtmAppContDisEntry.setDescription("Columns in the gtmAppContDis Table")
gtmAppContDisAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContDisAppName.setDescription("The name of an application.")
gtmAppContDisType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("datacenter", 0), ("server", 1), ("link", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContDisType.setDescription("The object type of a disabled application's context for the specified application..")
gtmAppContDisName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 2, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmAppContDisName.setDescription("The object name of a disabled application's context for the specified application.")
gtmDataCenters = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3))
gtmDataCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1))
gtmDcNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcNumber.setDescription("The number of gtmDataCenter entries in the table.")
gtmDcTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2))
if mibBuilder.loadTexts: gtmDcTable.setDescription("A table containing information of data centers for GTM (Global Traffic Management).")
gtmDcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDcName"))
if mibBuilder.loadTexts: gtmDcEntry.setDescription("Columns in the gtmDc Table")
gtmDcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcName.setDescription("The name of a data center.")
gtmDcLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcLocation.setDescription("The location information of the specified data center.")
gtmDcContact = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcContact.setDescription("The contact information of the specified data center.")
gtmDcEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcEnabled.setDescription("The state whether the specified data center is enabled or not.")
gtmDataCenterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2))
gtmDcStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmDcStatResetStats.setDescription("The action to reset resetable statistics data in  gtmDataCenterStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
gtmDcStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatNumber.setDescription("The number of gtmDataCenterStat entries in the table.")
gtmDcStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3))
if mibBuilder.loadTexts: gtmDcStatTable.setDescription("A table containing statistics information of data centers \nfor GTM (Global Traffic Management).")
gtmDcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDcStatName"))
if mibBuilder.loadTexts: gtmDcStatEntry.setDescription("Columns in the gtmDcStat Table")
gtmDcStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatName.setDescription("The name of a data center.")
gtmDcStatCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatCpuUsage.setDescription("The CPU usage in percentage for the specified data center.")
gtmDcStatMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatMemAvail.setDescription("The memory available in bytes for the specified data center.")
gtmDcStatBitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatBitsPerSecIn.setDescription("The number of bits per second received by the specified data center.")
gtmDcStatBitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatBitsPerSecOut.setDescription("The number of bits per second sent out from the specified data center.")
gtmDcStatPktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatPktsPerSecIn.setDescription("The number of packets per second received by the specified data center.")
gtmDcStatPktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatPktsPerSecOut.setDescription("The number of packets per second sent out from the specified data center.")
gtmDcStatConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatConnections.setDescription("The number of total connections to the specified data center.")
gtmDcStatConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatConnRate.setDescription("Deprecated! This feature has been eliminated.\nThe connection rate (current connection rate/connection rate limit) \nin percentage for the specified data center.")
gtmDataCenterStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3))
gtmDcStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusNumber.setDescription("The number of gtmDataCenterStatus entries in the table.")
gtmDcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2))
if mibBuilder.loadTexts: gtmDcStatusTable.setDescription("A table containing status information of data centers \nfor GTM (Global Traffic Management).")
gtmDcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmDcStatusName"))
if mibBuilder.loadTexts: gtmDcStatusEntry.setDescription("Columns in the gtmDcStatus Table")
gtmDcStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusName.setDescription("The name of a data center.")
gtmDcStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusAvailState.setDescription("The availability of the specified data center indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
gtmDcStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusEnabledState.setDescription("The activity status of the specified data center, as specified \nby the user.")
gtmDcStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified data center.")
gtmDcStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 3, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmDcStatusDetailReason.setDescription("The detail description of the specified data center's status.")
gtmIps = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4))
gtmIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1))
gtmIpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpNumber.setDescription("The number of gtmIp entries in the table.")
gtmIpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2))
if mibBuilder.loadTexts: gtmIpTable.setDescription("A table containing information of IPs for GTM (Global Traffic Management).")
gtmIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmIpIpType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmIpIp"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmIpLinkName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmIpServerName"))
if mibBuilder.loadTexts: gtmIpEntry.setDescription("Columns in the gtmIp Table")
gtmIpIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpIpType.setDescription("The IP address type of gtmIpIp.")
gtmIpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpIp.setDescription("The IP address that belong to the specified box. It is interpreted \nwithin the context of a gtmIpIpType value.")
gtmIpLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpLinkName.setDescription("The link name with which the specified IP address associates.")
gtmIpServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpServerName.setDescription("The name of the server with which the specified IP address is associated.")
gtmIpUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpUnitId.setDescription("Deprecated!  This is replaced by device_name.\nThe box ID with which the specified IP address associates.")
gtmIpIpXlatedType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpIpXlatedType.setDescription("The IP address type of gtmIpIpXlated.")
gtmIpIpXlated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpIpXlated.setDescription("The translated address for the specified IP. It is interpreted\nwithin the context of a gtmIpIpXlatedType value.")
gtmIpDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 4, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmIpDeviceName.setDescription("The box name with which the specified IP address associates.")
gtmLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5))
gtmLink = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1))
gtmLinkNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkNumber.setDescription("The number of gtmLink entries in the table.")
gtmLinkTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2))
if mibBuilder.loadTexts: gtmLinkTable.setDescription("A table containing information of links within associated data center \nfor GTM (Global Traffic Management).")
gtmLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkName"))
if mibBuilder.loadTexts: gtmLinkEntry.setDescription("Columns in the gtmLink Table")
gtmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkName.setDescription("The name of a link.")
gtmLinkDcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkDcName.setDescription("The name of the data center associated with the specified link.")
gtmLinkIspName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkIspName.setDescription("The ISP (Internet Service Provider) name for the specified link.")
gtmLinkUplinkAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkUplinkAddressType.setDescription("The IP address type of gtmLinkUplinkAddress.")
gtmLinkUplinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkUplinkAddress.setDescription("The IP address on the uplink side of the router, used for SNMP \nprobing only. It is interpreted within the context of an \ngtmUplinkAddressType value.")
gtmLinkLimitInCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInCpuUsageEnabled.setDescription("The state indicating whether to set limit of CPU usage is \nenabled or not for the inbound packets of the  specified link.")
gtmLinkLimitInMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInMemAvailEnabled.setDescription("The state indicating whether to set limit of available memory \nis enabled or not for the inbound packets of the  specified link.")
gtmLinkLimitInBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInBitsPerSecEnabled.setDescription("The state indicating whether to limit of number of bits per second \nis enabled or not for the inbound packets of the  specified link.")
gtmLinkLimitInPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInPktsPerSecEnabled.setDescription("The state indicating whether to set limit of number of packets \nper second is enabled or not for the inbound packets of \nthe specified link.")
gtmLinkLimitInConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInConnEnabled.setDescription("The state indicating whether to set limit of total connections \nis enabled or not for the inbound packets of the specified link.")
gtmLinkLimitInConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInConnPerSecEnabled.setDescription("Deprecated! This feature has been eliminated.\nThe state indicating whether to set limit of connections per second \nis enabled or not for the inbound packets of the link.")
gtmLinkLimitInCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInCpuUsage.setDescription("The limit of CPU usage as a percentage for the inbound packets \nof the specified link.")
gtmLinkLimitInMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInMemAvail.setDescription("The limit of memory available in bytes for the inbound packets \nof the specified link.")
gtmLinkLimitInBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInBitsPerSec.setDescription("The limit of number of bits per second for the inbound packets \nof the specified link.")
gtmLinkLimitInPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInPktsPerSec.setDescription("The limit of number of packets per second for the inbound packets \nof the specified link.")
gtmLinkLimitInConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInConn.setDescription("The limit of total number of connections for the inbound packets \nof the specified link.")
gtmLinkLimitInConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitInConnPerSec.setDescription("Deprecated! This feature has been eliminated.\nThe limit of number of connections per second for the inbound packets \nof the specified link.")
gtmLinkLimitOutCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutCpuUsageEnabled.setDescription("The state indicating whether to set limit of CPU usage is \nenabled or not for the outbound packets of the specified link.")
gtmLinkLimitOutMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutMemAvailEnabled.setDescription("The state indicating whether to set limit of available memory \nis enabled or not for the outbound packets of the specified link.")
gtmLinkLimitOutBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutBitsPerSecEnabled.setDescription("The state indicating whether to limit of number of bits per second \nis enabled or not for the outbound packets of the specified link.")
gtmLinkLimitOutPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutPktsPerSecEnabled.setDescription("The state indicating whether to set limit of number of packets \nper second is enabled or not for the outbound packets of the specified link.")
gtmLinkLimitOutConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutConnEnabled.setDescription("The state indicating whether to set limit of total connections \nis enabled or not for the outbound packets of the specified link.")
gtmLinkLimitOutConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutConnPerSecEnabled.setDescription("Deprecated! This feature has been eliminated.\nThe state indicating whether to set limit of connections per second \nis enabled or not for the outbound packets of the specified link.")
gtmLinkLimitOutCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutCpuUsage.setDescription("The limit of CPU usage as a percentage for the outbound packets \nof the specified link.")
gtmLinkLimitOutMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutMemAvail.setDescription("The limit of memory available in bytes for the outbound packets \nof the specified link.")
gtmLinkLimitOutBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutBitsPerSec.setDescription("The limit of number of bits per second for the outbound packets \nof the specified link.")
gtmLinkLimitOutPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutPktsPerSec.setDescription("The limit of number of packets per second for the outbound packets \nof the specified link.")
gtmLinkLimitOutConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutConn.setDescription("The limit of total number of connections for the outbound packets \nof the specified link.")
gtmLinkLimitOutConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitOutConnPerSec.setDescription("Deprecated! This feature has been eliminated.\nThe limit of number of connections per second for the outbound packets \nof the specified link.")
gtmLinkLimitTotalCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 30), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalCpuUsageEnabled.setDescription("The state indicating whether to set limit of CPU usage is enabled \nor not for the total packets of the specified link.")
gtmLinkLimitTotalMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 31), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalMemAvailEnabled.setDescription("The state indicating whether to set limit of available memory \nis enabled or not for the total packets of the specified link.")
gtmLinkLimitTotalBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 32), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalBitsPerSecEnabled.setDescription("The state indicating whether to limit of number of bits per second \nis enabled or not for the total packets of the specified link.")
gtmLinkLimitTotalPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 33), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalPktsPerSecEnabled.setDescription("The state indicating whether to set limit of number of packets \nper second is enabled or not for the total packets of the specified link.")
gtmLinkLimitTotalConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 34), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalConnEnabled.setDescription("The state indicating whether to set limit of total connections \nis enabled or not for the total packets of the specified link.")
gtmLinkLimitTotalConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 35), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalConnPerSecEnabled.setDescription("Deprecated! This feature has been eliminated.\nThe state indicating whether to set limit of connections per second \nis enabled or not for the total packets of the specified link.")
gtmLinkLimitTotalCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalCpuUsage.setDescription("The limit of CPU usage as a percentage for the total packets \nof the specified link.")
gtmLinkLimitTotalMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalMemAvail.setDescription("The limit of memory available in bytes for the total packets \nof the specified link.")
gtmLinkLimitTotalBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalBitsPerSec.setDescription("The limit of number of bits per second for the total packets \nof the specified link.")
gtmLinkLimitTotalPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalPktsPerSec.setDescription("The limit of number of packets per second for the total packets \nof the specified link.")
gtmLinkLimitTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalConn.setDescription("The limit of total number of connections for the total packets \nof the specified link.")
gtmLinkLimitTotalConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkLimitTotalConnPerSec.setDescription("Deprecated! This feature has been eliminated.\nThe limit of number of connections per second for the total packets \nof the specified link.")
gtmLinkMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 42), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkMonitorRule.setDescription("The name of the monitor rule for this link.")
gtmLinkDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 43), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkDuplex.setDescription("The state indicating whether the specified link uses duplex for\nthe specified link.")
gtmLinkEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 44), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkEnabled.setDescription("The state indicating whether the specified link is enabled or not \nfor the specified link.")
gtmLinkRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkRatio.setDescription("The ratio (in Kbps) used to load-balance the traffic for the specified link.")
gtmLinkPrepaid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkPrepaid.setDescription("Top end of prepaid bit rate the specified link.")
gtmLinkPrepaidInDollars = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkPrepaidInDollars.setDescription("Deprecated! The cost in dollars, derived from prepaid for the specified link.")
gtmLinkWeightingType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 1, 2, 1, 48), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("ratio", 0), ("cost", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkWeightingType.setDescription("The weight type for the specified link.\nratio - The region database based on user-defined settings;\ncost - The region database based on ACL lists.")
gtmLinkCost = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2))
gtmLinkCostNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostNumber.setDescription("The number of gtmLinkCost entries in the table.")
gtmLinkCostTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2))
if mibBuilder.loadTexts: gtmLinkCostTable.setDescription("A table containing information of costs of the specified links \nfor GTM (Global Traffic Management).")
gtmLinkCostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkCostName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkCostIndex"))
if mibBuilder.loadTexts: gtmLinkCostEntry.setDescription("Columns in the gtmLinkCost Table")
gtmLinkCostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostName.setDescription("The name of a link.")
gtmLinkCostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostIndex.setDescription("The index of cost for the specified link.")
gtmLinkCostUptoBps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostUptoBps.setDescription("The upper limit (bps) that defines the cost segment of the specified link.")
gtmLinkCostDollarsPerMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkCostDollarsPerMbps.setDescription("The dollars cost per mega byte per second, which is associated with \nthe specified link cost segment.")
gtmLinkStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3))
gtmLinkStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmLinkStatResetStats.setDescription("The action to reset resetable statistics data in  gtmLinkStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
gtmLinkStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatNumber.setDescription("The number of gtmLinkStat entries in the table.")
gtmLinkStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3))
if mibBuilder.loadTexts: gtmLinkStatTable.setDescription("A table containing statistic information of links within a data center.")
gtmLinkStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkStatName"))
if mibBuilder.loadTexts: gtmLinkStatEntry.setDescription("Columns in the gtmLinkStat Table")
gtmLinkStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatName.setDescription("The name of a link.")
gtmLinkStatRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRate.setDescription("The current bit rate of all traffic flowing through the specified link.")
gtmLinkStatRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateIn.setDescription("The current bit rate for all inbound traffic flowing through \nthe specified link.")
gtmLinkStatRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateOut.setDescription("The current bit rate for all outbound traffic flowing through\nthe specified link.")
gtmLinkStatRateNode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateNode.setDescription("The current bit rate of the traffic flowing through nodes of \nthe gateway pool for the the specified link.")
gtmLinkStatRateNodeIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateNodeIn.setDescription("The current bit rate of the traffic flowing inbound through nodes \nof the gateway pool for the the specified link.")
gtmLinkStatRateNodeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 7), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateNodeOut.setDescription("The current bit rate of the traffic flowing outbound through nodes \nof the gateway pool for the the specified link.")
gtmLinkStatRateVses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateVses.setDescription("The current of bit rate of traffic flowing through \nthe external virtual server for the specified link.")
gtmLinkStatRateVsesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateVsesIn.setDescription("The current of bit rate of inbound traffic flowing through \nthe external virtual server for the specified link.")
gtmLinkStatRateVsesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 10), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatRateVsesOut.setDescription("The current of bit rate of outbound traffic flowing through \nthe external virtual server for the specified link.")
gtmLinkStatLcsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatLcsIn.setDescription("The link capacity score is used to control inbound connections \nwhich are load-balanced through external virtual servers which are controlled \nby GTM (Global Traffic Management) daemon.")
gtmLinkStatLcsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatLcsOut.setDescription("The link capacity score is used to set dynamic ratios on the outbound gateway \npool members for the specified link. This controls the outbound connections.")
gtmLinkStatPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatPaths.setDescription("The total number of paths through the specified link.")
gtmLinkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4))
gtmLinkStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusNumber.setDescription("The number of gtmLinkStatus entries in the table.")
gtmLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2))
if mibBuilder.loadTexts: gtmLinkStatusTable.setDescription("A table containing status information of links within a data center.")
gtmLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusName"))
if mibBuilder.loadTexts: gtmLinkStatusEntry.setDescription("Columns in the gtmLinkStatus Table")
gtmLinkStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusName.setDescription("The name of a link.")
gtmLinkStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusAvailState.setDescription("The availability of the specified link indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
gtmLinkStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusEnabledState.setDescription("The activity status of the specified link, as specified \nby the user.")
gtmLinkStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified link.")
gtmLinkStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 5, 4, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmLinkStatusDetailReason.setDescription("The detail description of the specified link's status.")
gtmPools = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6))
gtmPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1))
gtmPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolNumber.setDescription("The number of gtmPool entries in the table.")
gtmPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2))
if mibBuilder.loadTexts: gtmPoolTable.setDescription("A table containing information of pools for GTM (Global Traffic Management).")
gtmPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolName"))
if mibBuilder.loadTexts: gtmPoolEntry.setDescription("Columns in the gtmPool Table")
gtmPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolName.setDescription("The name of a pool.")
gtmPoolTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolTtl.setDescription("The TTL value for the specified pool.")
gtmPoolEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolEnabled.setDescription("The state indicating whether the specified pool is enabled or not.")
gtmPoolVerifyMember = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolVerifyMember.setDescription("The state indicating whether or not to verify pool member availability before using it.")
gtmPoolDynamicRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolDynamicRatio.setDescription("The state indicating whether or not to use dynamic ratio to modify \nthe behavior of QOS (Quality Of Service) for the specified pool.")
gtmPoolAnswersToReturn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolAnswersToReturn.setDescription("The number of returns for a request from the specified pool.,\nIt's up to 16 returns for a request.")
gtmPoolLbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(10,9,18,3,16,7,0,15,5,11,17,6,8,13,2,1,12,14,4,)).subtype(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLbMode.setDescription("The preferred load balancing method for the specified pool.")
gtmPoolAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(10,9,18,3,16,7,0,15,5,11,17,6,8,13,2,1,12,14,4,)).subtype(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolAlternate.setDescription("The alternate load balancing method for the specified pool.")
gtmPoolFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(10,9,18,3,16,7,0,15,5,11,17,6,8,13,2,1,12,14,4,)).subtype(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallback.setDescription("The fallback load balancing method for the specified pool.")
gtmPoolManualResume = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolManualResume.setDescription("The state indicating whether or not to disable pool member \nwhen the pool member status goes from Green to Red.")
gtmPoolQosCoeffRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffRtt.setDescription("The round trip time QOS coefficient for the specified pool.")
gtmPoolQosCoeffHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffHops.setDescription("The hop count QOS coefficient for the specified pool.")
gtmPoolQosCoeffTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffTopology.setDescription("The topology QOS coefficient for the specified pool")
gtmPoolQosCoeffHitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffHitRatio.setDescription("The ping packet completion rate QOS coefficient for the specified pool.")
gtmPoolQosCoeffPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffPacketRate.setDescription("The packet rate QOS coefficient for the specified pool.")
gtmPoolQosCoeffVsCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffVsCapacity.setDescription("The virtual server capacity QOS coefficient for the specified pool.")
gtmPoolQosCoeffBps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffBps.setDescription("The bandwidth QOS coefficient for the specified pool.")
gtmPoolQosCoeffLcs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffLcs.setDescription("The link capacity QOS coefficient for the specified pool.")
gtmPoolQosCoeffConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffConnRate.setDescription("Deprecated!\nReplaced by gtmPoolQosCoeffVsScore.\nThe connection rate QOS coefficient for the specified pool.")
gtmPoolFallbackIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 20), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallbackIpType.setDescription("The IP address type of gtmPoolFallbackIp.")
gtmPoolFallbackIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallbackIp.setDescription("The fallback/emergency failure IP for the specified pool. It is \ninterpreted within the context of a gtmPoolFallbackIpType value.")
gtmPoolCname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 22), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolCname.setDescription("The CNAME (canonical name) for the specified pool.\nCNAME is also referred to as a CNAME record, a record \nin a DNS database that indicates the true, or canonical, \nhost name of a computer that its aliases are associated with. \n(eg. www.wip.d.com).")
gtmPoolLimitCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitCpuUsageEnabled.setDescription("The state indicating whether to set limit of CPU usage is enabled \nor not for the specified pool.")
gtmPoolLimitMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitMemAvailEnabled.setDescription("The state indicating whether to set limit of available memory \nis enabled or not for the specified pool.")
gtmPoolLimitBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 25), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitBitsPerSecEnabled.setDescription("The state indicating whether to limit of number of bits per second \nis enabled or not for the specified pool.")
gtmPoolLimitPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitPktsPerSecEnabled.setDescription("The state indicating whether to set limit of number of packets \nper second is enabled or not for the specified pool.")
gtmPoolLimitConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitConnEnabled.setDescription("The state indicating whether to set limit of total connections \nis enabled or not for the specified pool.")
gtmPoolLimitConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 28), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitConnPerSecEnabled.setDescription("Deprecated! This feature has been eliminated.\nThe state indicating whether to set limit of connections per second \nis enabled or not for the specified pool.")
gtmPoolLimitCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitCpuUsage.setDescription("The limit of CPU usage as a percentage for the specified pool.")
gtmPoolLimitMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitMemAvail.setDescription("The limit of memory available in bytes for the specified pool.")
gtmPoolLimitBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitBitsPerSec.setDescription("The limit of number of bits per second for the specified pool.")
gtmPoolLimitPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitPktsPerSec.setDescription("The limit of number of packets per second for the specified pool.")
gtmPoolLimitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitConn.setDescription("The limit of total number of connections for the specified pool.")
gtmPoolLimitConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolLimitConnPerSec.setDescription("Deprecated! This feature has been eliminated.\nThe limit of number of connections per second for the specified pool.")
gtmPoolMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 35), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMonitorRule.setDescription("The monitor rule used by the specified pool.")
gtmPoolQosCoeffVsScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolQosCoeffVsScore.setDescription("The relative weight for virtual server (VS) score \nwhen the load balancing mode is set to LB_METHOD_QOS for the specified pool.")
gtmPoolFallbackIpv6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 37), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallbackIpv6Type.setDescription("The IP address type of gtmPoolFallbackIpv6.")
gtmPoolFallbackIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 1, 2, 1, 38), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolFallbackIpv6.setDescription("The fallback/emergency failure IPv6 IP address for the specified pool. It is \ninterpreted within the context of a gtmPoolFallbackIpv6Type value.")
gtmPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2))
gtmPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmPoolStatResetStats.setDescription("The action to reset resetable statistics data in  gtmPoolStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
gtmPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatNumber.setDescription("The number of gtmPoolStat entries in the table.")
gtmPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3))
if mibBuilder.loadTexts: gtmPoolStatTable.setDescription("A table containing statistics information of pools in the GTM (Global Traffic Management).")
gtmPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolStatName"))
if mibBuilder.loadTexts: gtmPoolStatEntry.setDescription("Columns in the gtmPoolStat Table")
gtmPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatName.setDescription("The name of a pool.")
gtmPoolStatPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatPreferred.setDescription("The number of times which the preferred load balance method is used \nfor the specified pool.")
gtmPoolStatAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatAlternate.setDescription("The number of times which the alternate load balance method is used \nfor the specified pool.")
gtmPoolStatFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatFallback.setDescription("The number of times which the fallback load balance method is used\nfor the specified pool.")
gtmPoolStatDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatDropped.setDescription("The number of dropped DNS messages for the specified pool.")
gtmPoolStatExplicitIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatExplicitIp.setDescription("Deprecated! The number of times which a LDNS  was persisted to the\nspecified pool by the explicit IP rule.")
gtmPoolStatReturnToDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatReturnToDns.setDescription("The number of times which a resolve was returned to DNS (for resolution) \nfor the specified pool.")
gtmPoolStatReturnFromDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatReturnFromDns.setDescription("The number of times which a resolve was returned from DNS for the\nspecified pool.")
gtmPoolStatCnameResolutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatCnameResolutions.setDescription("The number of times which a query is resolved by the CNAME of the\nspecified pool.")
gtmPoolStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3))
gtmPoolStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusNumber.setDescription("The number of gtmPoolStatus entries in the table.")
gtmPoolStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2))
if mibBuilder.loadTexts: gtmPoolStatusTable.setDescription("A table containing status information of pools in the GTM (Global Traffic Management).")
gtmPoolStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusName"))
if mibBuilder.loadTexts: gtmPoolStatusEntry.setDescription("Columns in the gtmPoolStatus Table")
gtmPoolStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusName.setDescription("The name of a pool.")
gtmPoolStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusAvailState.setDescription("The availability of the specified pool indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
gtmPoolStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusEnabledState.setDescription("The activity status of the specified pool, as specified \nby the user.")
gtmPoolStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified pool.")
gtmPoolStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolStatusDetailReason.setDescription("The detail description of the specified pool's status.")
gtmPoolMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4))
gtmPoolMbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrNumber.setDescription("The number of gtmPoolMember entries in the table.")
gtmPoolMbrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2))
if mibBuilder.loadTexts: gtmPoolMbrTable.setDescription("A table containing information of pool members for GTM (Global Traffic Management).")
gtmPoolMbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrVsName"))
if mibBuilder.loadTexts: gtmPoolMbrEntry.setDescription("Columns in the gtmPoolMbr Table")
gtmPoolMbrPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrPoolName.setDescription("The name of the pool to which the specified member belongs.")
gtmPoolMbrIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrIpType.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address type of gtmPoolMemberIp.")
gtmPoolMbrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrIp.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address of a pool member. It is interpreted within\nthe context of gtmPoolMemberIpType value.")
gtmPoolMbrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrPort.setDescription("Deprecated! use server_name and vs_name instead, \nThe port of a pool member.")
gtmPoolMbrVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrVsName.setDescription("The name of the virtual server with which the specified pool member \nis associated.")
gtmPoolMbrOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrOrder.setDescription("The order of the specified pool member in the associated pool. \nIt is zero-based.")
gtmPoolMbrLimitCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitCpuUsageEnabled.setDescription("The state indicating whether to set limit of CPU usage is enabled \nor not for the specified pool member.")
gtmPoolMbrLimitMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitMemAvailEnabled.setDescription("The state indicating whether or not to set limit of available memory \nis enabled for the specified pool member.")
gtmPoolMbrLimitBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitBitsPerSecEnabled.setDescription("The state indicating whether or not to limit of number of bits per \nsecond is enabled  for the specified pool member.")
gtmPoolMbrLimitPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitPktsPerSecEnabled.setDescription("The state indicating whether or not to set limit of number of packets \nper second is enabled for the specified pool member.")
gtmPoolMbrLimitConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitConnEnabled.setDescription("The state indicating whether or not to set limit of total connections \nis enabled  for the specified pool member.")
gtmPoolMbrLimitConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitConnPerSecEnabled.setDescription("Deprecated! This feature has been eliminated.\nThe state indicating whether or not to set limit of connections \nper second is enabled for the specified pool member.")
gtmPoolMbrLimitCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitCpuUsage.setDescription("The limit of CPU usage as a percentage for the specified pool member.")
gtmPoolMbrLimitMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitMemAvail.setDescription("The limit of memory available in bytes for the specified pool member.")
gtmPoolMbrLimitBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitBitsPerSec.setDescription("The limit of number of bits per second for the specified pool member.")
gtmPoolMbrLimitPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitPktsPerSec.setDescription("The limit of number of packets per second for the specified pool member.")
gtmPoolMbrLimitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitConn.setDescription("The limit of total number of connections for the specified pool member.")
gtmPoolMbrLimitConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrLimitConnPerSec.setDescription("Deprecated! This feature has been eliminated.\nThe limit of number of connections per second for the specified pool member.")
gtmPoolMbrMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrMonitorRule.setDescription("The monitor rule used by the specified pool member.")
gtmPoolMbrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrEnabled.setDescription("The state indicating whether the specified pool member is enabled or not.")
gtmPoolMbrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrRatio.setDescription("The pool member ratio.")
gtmPoolMbrServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 4, 2, 1, 22), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrServerName.setDescription("The name of the server with which the specified pool_member is associated.")
gtmPoolMemberDepends = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5))
gtmPoolMbrDepsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsNumber.setDescription("The number of gtmPoolMemberDepends entries in the table.")
gtmPoolMbrDepsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2))
if mibBuilder.loadTexts: gtmPoolMbrDepsTable.setDescription("A table containing information of pool members' dependencies on virtual servers for GTM (Global Traffic Management).")
gtmPoolMbrDepsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVsName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsDependServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsDependVsName"))
if mibBuilder.loadTexts: gtmPoolMbrDepsEntry.setDescription("Columns in the gtmPoolMbrDeps Table")
gtmPoolMbrDepsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsIpType.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address type of gtmPoolMbrDepsIp.")
gtmPoolMbrDepsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsIp.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address of a pool member. It is interpreted within\nthe context of gtmPoolMbrDepsIpType value.")
gtmPoolMbrDepsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsPort.setDescription("Deprecated! use server_name and vs_name instead, \nThe port of a pool member.")
gtmPoolMbrDepsPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsPoolName.setDescription("The name of a pool to which the specified member belongs.")
gtmPoolMbrDepsVipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsVipType.setDescription("Deprecated! use depend server_name and vs_name instead, \nThe IP address type of gtmPoolMbrDepsVip")
gtmPoolMbrDepsVip = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsVip.setDescription("Deprecated! use depend server_name and vs_name instead, \nThe IP address of a virtual server on which the specified pool member depends. \nIt is interpreted within the context of gtmPoolMbrDepsVipType value.")
gtmPoolMbrDepsVport = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsVport.setDescription("Deprecated! use depend server_name and vs_name instead, \nThe port of a virtual server on  which the specified pool member depends.")
gtmPoolMbrDepsServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsServerName.setDescription("The name of the server with which the specified pool_member is associated.")
gtmPoolMbrDepsVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsVsName.setDescription("The virtual server name with which the pool member associated.")
gtmPoolMbrDepsDependServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsDependServerName.setDescription("The server name of a virtual server on which the specified pool member depends.")
gtmPoolMbrDepsDependVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 5, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrDepsDependVsName.setDescription("The virtual server name on which the specified pool member depends.")
gtmPoolMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6))
gtmPoolMbrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmPoolMbrStatResetStats.setDescription("The action to reset resetable statistics data in  gtmPoolMemberStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
gtmPoolMbrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatNumber.setDescription("The number of gtmPoolMemberStat entries in the table.")
gtmPoolMbrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3))
if mibBuilder.loadTexts: gtmPoolMbrStatTable.setDescription("A table containing statistics information of pool members for GTM (Global Traffic Management).")
gtmPoolMbrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatVsName"))
if mibBuilder.loadTexts: gtmPoolMbrStatEntry.setDescription("Columns in the gtmPoolMbrStat Table")
gtmPoolMbrStatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatPoolName.setDescription("The name of the parent pool to which the member belongs.")
gtmPoolMbrStatIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatIpType.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address type of gtmPoolMemberStatIp.")
gtmPoolMbrStatIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatIp.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address of a pool member. It is interpreted within\nthe context of gtmPoolMemberStatIpType value.")
gtmPoolMbrStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatPort.setDescription("Deprecated! use server_name and vs_name instead, \nThe port of a pool member.")
gtmPoolMbrStatPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatPreferred.setDescription("The number of times which the preferred load balance method is used \nfor the specified pool member.")
gtmPoolMbrStatAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatAlternate.setDescription("The number of times which the alternate load balance method is used \nfor the specified pool member.")
gtmPoolMbrStatFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatFallback.setDescription("The number of times which the fallback load balance method is used \nfor the specified pool member.")
gtmPoolMbrStatServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatServerName.setDescription("The name of the server with which the specified pool_member is associated.")
gtmPoolMbrStatVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 6, 3, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatVsName.setDescription("The name of the specified virtual server.")
gtmPoolMemberStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7))
gtmPoolMbrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusNumber.setDescription("The number of gtmPoolMemberStatus entries in the table.")
gtmPoolMbrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2))
if mibBuilder.loadTexts: gtmPoolMbrStatusTable.setDescription("A table containing status information of pool members for GTM (Global Traffic Management).")
gtmPoolMbrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusVsName"))
if mibBuilder.loadTexts: gtmPoolMbrStatusEntry.setDescription("Columns in the gtmPoolMbrStatus Table")
gtmPoolMbrStatusPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusPoolName.setDescription("The name of the pool to which the specified member belongs.")
gtmPoolMbrStatusIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusIpType.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address type of gtmPoolMbrStatusIp.")
gtmPoolMbrStatusIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusIp.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address of a pool member. It is interpreted within\nthe context of gtmPoolMbrStatusIpType value.")
gtmPoolMbrStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusPort.setDescription("Deprecated! use server_name and vs_name instead, \nThe port of a pool member.")
gtmPoolMbrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusAvailState.setDescription("The availability of the specified pool member indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
gtmPoolMbrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusEnabledState.setDescription("The activity status of the specified pool member, as specified \nby the user.")
gtmPoolMbrStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified pool member.")
gtmPoolMbrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusDetailReason.setDescription("The detail description of the specified node's status.")
gtmPoolMbrStatusVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusVsName.setDescription("The name of the virtual server with which the specified pool member \nis associated.")
gtmPoolMbrStatusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 6, 7, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmPoolMbrStatusServerName.setDescription("The name of the server with which the specified pool_member is associated.")
gtmRegions = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7))
gtmRegionEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1))
gtmRegionEntryNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegionEntryNumber.setDescription("The number of gtmRegionEntry entries in the table.")
gtmRegionEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 2))
if mibBuilder.loadTexts: gtmRegionEntryTable.setDescription("A table containing information of user-defined region definitions for GTM (Global Traffic Management).")
gtmRegionEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRegionEntryName"))
if mibBuilder.loadTexts: gtmRegionEntryEntry.setDescription("Columns in the gtmRegionEntry Table")
gtmRegionEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegionEntryName.setDescription("The name of region entry.")
gtmRegionEntryRegionDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,0,)).subtype(namedValues=NamedValues(("user", 0), ("acl", 1), ("isp", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegionEntryRegionDbType.setDescription("The region's database type.")
gtmRegItem = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2))
gtmRegItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemNumber.setDescription("The number of gtmRegItem entries in the table.")
gtmRegItemTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2))
if mibBuilder.loadTexts: gtmRegItemTable.setDescription("A table containing information of region items in associated region for GTM (Global Traffic Management).")
gtmRegItemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegionDbType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegionName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemNegate"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegEntry"))
if mibBuilder.loadTexts: gtmRegItemEntry.setDescription("Columns in the gtmRegItem Table")
gtmRegItemRegionDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,0,)).subtype(namedValues=NamedValues(("user", 0), ("acl", 1), ("isp", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemRegionDbType.setDescription("The region's database type.")
gtmRegItemRegionName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemRegionName.setDescription("The region name.")
gtmRegItemType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(6,4,7,8,3,0,1,5,2,)).subtype(namedValues=NamedValues(("cidr", 0), ("region", 1), ("continent", 2), ("country", 3), ("state", 4), ("pool", 5), ("datacenter", 6), ("ispregion", 7), ("geoip-isp", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemType.setDescription("The region item's type.")
gtmRegItemNegate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemNegate.setDescription("The state indicating whether the region member to be interpreted \nas not equal to the region member options selected.")
gtmRegItemRegEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 7, 2, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRegItemRegEntry.setDescription("The name of the region entry.")
gtmRules = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8))
gtmRule = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1))
gtmRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleNumber.setDescription("The number of gtmRule entries in the table.")
gtmRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2))
if mibBuilder.loadTexts: gtmRuleTable.setDescription("A table containing information of rules for GTM (Global Traffic Management).")
gtmRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleName"))
if mibBuilder.loadTexts: gtmRuleEntry.setDescription("Columns in the gtmRule Table")
gtmRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleName.setDescription("The name of a rule.")
gtmRuleDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleDefinition.setDescription("Deprecated!\nThe definition of the specified rule.")
gtmRuleConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleConfigSource.setDescription("The type of rule that the specified rule is associating with.\nIt is either a base/pre-configured rule or user defined rule.")
gtmRuleEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2))
gtmRuleEventNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventNumber.setDescription("The number of gtmRuleEvent entries in the table.")
gtmRuleEventTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2))
if mibBuilder.loadTexts: gtmRuleEventTable.setDescription("A table containing information of rule events for GTM (Global Traffic Management).")
gtmRuleEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventEventType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventPriority"))
if mibBuilder.loadTexts: gtmRuleEventEntry.setDescription("Columns in the gtmRuleEvent Table")
gtmRuleEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventName.setDescription("The name of a rule.")
gtmRuleEventEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventEventType.setDescription("The event type for which the specified rule is used.")
gtmRuleEventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventPriority.setDescription("The execution priority of the specified rule event.")
gtmRuleEventScript = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 2, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventScript.setDescription("Deprecated!\nThe TCL script for the specified rule event.")
gtmRuleEventStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3))
gtmRuleEventStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmRuleEventStatResetStats.setDescription("The action to reset resetable statistics data in  gtmRuleEventStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
gtmRuleEventStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatNumber.setDescription("The number of gtmRuleEventStat entries in the table.")
gtmRuleEventStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3))
if mibBuilder.loadTexts: gtmRuleEventStatTable.setDescription("A table containing statistics information of rules for GTM (Global Traffic Management).")
gtmRuleEventStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatEventType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatPriority"))
if mibBuilder.loadTexts: gtmRuleEventStatEntry.setDescription("Columns in the gtmRuleEventStat Table")
gtmRuleEventStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatName.setDescription("The name of the rule.")
gtmRuleEventStatEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatEventType.setDescription("The event type for which the rule is used.")
gtmRuleEventStatPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatPriority.setDescription("The execution priority of this rule event.")
gtmRuleEventStatFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatFailures.setDescription("The number of failures for executing this rule.")
gtmRuleEventStatAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatAborts.setDescription("The number of aborts when executing this rule.")
gtmRuleEventStatTotalExecutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 8, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmRuleEventStatTotalExecutions.setDescription("The total number of executions for this rule.")
gtmServers = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9))
gtmServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1))
gtmServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerNumber.setDescription("The number of gtmServer entries in the table.")
gtmServerTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2))
if mibBuilder.loadTexts: gtmServerTable.setDescription("A table containing information of servers within associated \ndata center for GTM (Global Traffic Management).")
gtmServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmServerName"))
if mibBuilder.loadTexts: gtmServerEntry.setDescription("Columns in the gtmServer Table")
gtmServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerName.setDescription("The name of a server.")
gtmServerDcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerDcName.setDescription("The name of the data center the specified server belongs to.")
gtmServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,11,15,10,14,5,6,4,8,16,7,2,9,3,12,13,0,)).subtype(namedValues=NamedValues(("bigipstandalone", 0), ("bigipredundant", 1), ("generichost", 10), ("cacheflow", 11), ("netapp", 12), ("windows2000", 13), ("windowsnt4", 14), ("solaris", 15), ("radware", 16), ("genericloadbalancer", 2), ("alteonacedirector", 3), ("ciscocss", 4), ("ciscolocaldirectorv2", 5), ("ciscolocaldirectorv3", 6), ("ciscoserverloadbalancer", 7), ("extreme", 8), ("foundryserveriron", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerType.setDescription("The type of the server.")
gtmServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerEnabled.setDescription("The state indicating whether the specified server is enabled or not.")
gtmServerLimitCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitCpuUsageEnabled.setDescription("The state indicating whether to set limit of CPU usage is enabled \nor not for the server.")
gtmServerLimitMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitMemAvailEnabled.setDescription("The state indicating whether to set limit of available memory is \nenabled or not for the server.")
gtmServerLimitBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitBitsPerSecEnabled.setDescription("The state indicating whether to limit of number of bits per second \nis enabled or not for the server.")
gtmServerLimitPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitPktsPerSecEnabled.setDescription("The state indicating whether to set limit of number of packets \nper second is enabled or not for the server.")
gtmServerLimitConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitConnEnabled.setDescription("The state indicating whether to set limit of total connections \nis enabled or not for the server.")
gtmServerLimitConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitConnPerSecEnabled.setDescription("Deprecated! This feature has been eliminated.\nThe state indicating whether to set limit of connections per second \nis enabled or not for the server.")
gtmServerLimitCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitCpuUsage.setDescription("The limit of CPU usage as a percentage for the server.")
gtmServerLimitMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitMemAvail.setDescription("The limit of memory available in bytes for the server.")
gtmServerLimitBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitBitsPerSec.setDescription("The limit of number of bits per second for the server.")
gtmServerLimitPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitPktsPerSec.setDescription("The limit of number of packets per second for the server.")
gtmServerLimitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitConn.setDescription("The limit of total number of connections for the server.")
gtmServerLimitConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLimitConnPerSec.setDescription("Deprecated! This feature has been eliminated.\nThe limit of number of connections per second for the server.")
gtmServerProberType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerProberType.setDescription("Deprecated! This is replaced by prober_pool.\nThe prober address type of gtmServerProber.")
gtmServerProber = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerProber.setDescription("Deprecated! This is replaced by prober_pool.\nThe prober address for the specified server. It is interpreted within \nthe context of an gtmServerProberType value.")
gtmServerMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerMonitorRule.setDescription("The name of monitor rule this server is used.")
gtmServerAllowSvcChk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerAllowSvcChk.setDescription("The state indicating whether service check is allowed for \nthe specified server.")
gtmServerAllowPath = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerAllowPath.setDescription("The state indicating whether path information gathering is allowed \nfor the specified server.")
gtmServerAllowSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerAllowSnmp.setDescription("The state indicating whether SNMP information gathering is allowed \nfor the specified server.")
gtmServerAutoconfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("enablednoautodelete", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerAutoconfState.setDescription("The state of auto configuration for BIGIP/3DNS servers. \nfor the specified server.")
gtmServerLinkAutoconfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 1, 2, 1, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("enablednoautodelete", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerLinkAutoconfState.setDescription("The state of link auto configuration for BIGIP/3DNS servers. \nfor the specified server.")
gtmServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2))
gtmServerStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmServerStatResetStats.setDescription("Deprecated!.\nThe action to reset resetable statistics data in  gtmServerStat. \n Setting this value to 1 will reset statistics data. \n Note, some statistics data may not be reset including data that are incremental counters.")
gtmServerStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatNumber.setDescription("Deprecated!.\nThe number of gtmServerStat entries in the table.")
gtmServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3))
if mibBuilder.loadTexts: gtmServerStatTable.setDescription("Deprecated! Replaced by gtmServerStat2 table.\nA table containing statistics information of servers within associated\n data center for GTM (Global Traffic Management).")
gtmServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmServerStatName"))
if mibBuilder.loadTexts: gtmServerStatEntry.setDescription("Columns in the gtmServerStat Table")
gtmServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatName.setDescription("Deprecated! Replaced by data in gtmServerStat2 table.\nThe name of a server.")
gtmServerStatUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatUnitId.setDescription("Deprecated! Replaced by data in gtmServerStat2 table.\nThe unit ID of the specified server.")
gtmServerStatVsPicks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatVsPicks.setDescription("Deprecated! Replaced by data in gtmServerStat2 table.\nHow many times a virtual server of the specified server was picked \nduring resolution of a domain name. I.E amazon.com got resolved to \na particular virtual address X times.")
gtmServerStatCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatCpuUsage.setDescription("Deprecated! Replaced by data in gtmServerStat2 table.\nThe CPU usage in percentage for the specified server.")
gtmServerStatMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatMemAvail.setDescription("Deprecated! Replaced by data in gtmServerStat2 table.\nThe memory available in bytes for the specified server.")
gtmServerStatBitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatBitsPerSecIn.setDescription("Deprecated! Replaced by data in gtmServerStat2 table.\nThe number of bits per second received by the specified server.")
gtmServerStatBitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatBitsPerSecOut.setDescription("Deprecated! Replaced by data in gtmServerStat2 table.\nThe number of bits per second sent out from the specified server.")
gtmServerStatPktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatPktsPerSecIn.setDescription("Deprecated! Replaced by data in gtmServerStat2 table.\nThe number of packets per second received by the specified server.")
gtmServerStatPktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatPktsPerSecOut.setDescription("Deprecated! Replaced by data in gtmServerStat2 table.\nThe number of packets per second sent out from the specified server.")
gtmServerStatConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatConnections.setDescription("Deprecated! Replaced by data in gtmServerStat2 table.\nThe number of total connections to the specified server.")
gtmServerStatConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatConnRate.setDescription("Deprecated! Replaced by data in gtmServerStat2 table.\nThe connection rate (current connection rate/connection rate limit)\nin percentage for the specified server.")
gtmServerStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3))
gtmServerStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusNumber.setDescription("The number of gtmServerStatus entries in the table.")
gtmServerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2))
if mibBuilder.loadTexts: gtmServerStatusTable.setDescription("A table containing status information of servers within associated\ndata center for GTM (Global Traffic Management).")
gtmServerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmServerStatusName"))
if mibBuilder.loadTexts: gtmServerStatusEntry.setDescription("Columns in the gtmServerStatus Table")
gtmServerStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusName.setDescription("The name of a server.")
gtmServerStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusAvailState.setDescription("The availability of the specified server indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
gtmServerStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusEnabledState.setDescription("The activity status of the specified server, as specified \nby the user.")
gtmServerStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified server.")
gtmServerStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStatusDetailReason.setDescription("The detail description of the specified node's status.")
gtmServerStat2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4))
gtmServerStat2ResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmServerStat2ResetStats.setDescription("The action to reset resetable statistics data in  gtmServerStat2. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
gtmServerStat2Number = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2Number.setDescription("The number of gtmServerStat2 entries in the table.")
gtmServerStat2Table = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3))
if mibBuilder.loadTexts: gtmServerStat2Table.setDescription("A table containing statistics information of servers within associated\ndata center for GTM (Global Traffic Management).")
gtmServerStat2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmServerStat2Name"))
if mibBuilder.loadTexts: gtmServerStat2Entry.setDescription("Columns in the gtmServerStat2 Table")
gtmServerStat2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2Name.setDescription("The name of a server.")
gtmServerStat2UnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2UnitId.setDescription("Deprecated! This feature has been eliminated.\nThe unit ID of the specified server.")
gtmServerStat2VsPicks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2VsPicks.setDescription("How many times a virtual server of the specified server was picked \nduring resolution of a domain name. I.E amazon.com got resolved to \na particular virtual address X times.")
gtmServerStat2CpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2CpuUsage.setDescription("The CPU usage in percentage for the specified server.")
gtmServerStat2MemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2MemAvail.setDescription("The memory available in bytes for the specified server.")
gtmServerStat2BitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2BitsPerSecIn.setDescription("The number of bits per second received by the specified server.")
gtmServerStat2BitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2BitsPerSecOut.setDescription("The number of bits per second sent out from the specified server.")
gtmServerStat2PktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2PktsPerSecIn.setDescription("The number of packets per second received by the specified server.")
gtmServerStat2PktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2PktsPerSecOut.setDescription("The number of packets per second sent out from the specified server.")
gtmServerStat2Connections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2Connections.setDescription("The number of total connections to the specified server.")
gtmServerStat2ConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 9, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmServerStat2ConnRate.setDescription("Deprecated! This feature has been eliminated.\nThe connection rate (current connection rate/connection rate limit)\nin percentage for the specified server.")
gtmTopologies = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10))
gtmTopItem = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1))
gtmTopItemNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemNumber.setDescription("The number of gtmTopItem entries in the table.")
gtmTopItemTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2))
if mibBuilder.loadTexts: gtmTopItemTable.setDescription("A table containing information of topology attributes for GTM (Global Traffic Management).")
gtmTopItemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsNegate"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsEntry"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerType"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerNegate"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerEntry"))
if mibBuilder.loadTexts: gtmTopItemEntry.setDescription("Columns in the gtmTopItem Table")
gtmTopItemLdnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(6,4,7,8,3,0,1,5,2,)).subtype(namedValues=NamedValues(("cidr", 0), ("region", 1), ("continent", 2), ("country", 3), ("state", 4), ("pool", 5), ("datacenter", 6), ("ispregion", 7), ("geoip-isp", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemLdnsType.setDescription("The type of topology end point for the LDNS.")
gtmTopItemLdnsNegate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemLdnsNegate.setDescription("The state indicating whether the end point is not equal to \nthe definition the LDNS.")
gtmTopItemLdnsEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemLdnsEntry.setDescription("The LDNS entry which could be an IP address, a region name, \na continent, etc.")
gtmTopItemServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(6,4,7,8,3,0,1,5,2,)).subtype(namedValues=NamedValues(("cidr", 0), ("region", 1), ("continent", 2), ("country", 3), ("state", 4), ("pool", 5), ("datacenter", 6), ("ispregion", 7), ("geoip-isp", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemServerType.setDescription("The type of topology end point for the virtual server.")
gtmTopItemServerNegate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemServerNegate.setDescription("The state indicating whether the end point is not equal to \nthe definition for the virtual server.")
gtmTopItemServerEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemServerEntry.setDescription("The server entry which could be an IP address, a region name, \na continent, etc.")
gtmTopItemWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemWeight.setDescription("The relative weight for the topology record.")
gtmTopItemOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 10, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmTopItemOrder.setDescription("The order of the record without longest match sorting.")
gtmVirtualServers = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11))
gtmVirtualServ = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1))
gtmVsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsNumber.setDescription("The number of gtmVirtualServ entries in the table.")
gtmVsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2))
if mibBuilder.loadTexts: gtmVsTable.setDescription("A table containing information of virtual servers for GTM (Global Traffic Management).")
gtmVsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmVsServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsName"))
if mibBuilder.loadTexts: gtmVsEntry.setDescription("Columns in the gtmVs Table")
gtmVsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsIpType.setDescription("The IP address type of gtmVirtualServIp.")
gtmVsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsIp.setDescription("The IP address of a virtual server. It is interpreted \nwithin the context of a gtmVirtualServIpType value.")
gtmVsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsPort.setDescription("The port of a virtual server.")
gtmVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsName.setDescription("The name of the specified virtual server.")
gtmVsServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsServerName.setDescription("The name of the server with which the specified virtual server associates.")
gtmVsIpXlatedType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsIpXlatedType.setDescription("The IP address type of gtmVirtualServIpXlated.")
gtmVsIpXlated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsIpXlated.setDescription("The translated IP address for the specified virtual server.\nIt is interpreted within the context of a gtmVirtualServIpXlatedType value.")
gtmVsPortXlated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsPortXlated.setDescription("The translated port for the specified virtual server.")
gtmVsLimitCpuUsageEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitCpuUsageEnabled.setDescription("The state indicating whether to set limit of CPU usage is enabled \nor not for the virtual server.")
gtmVsLimitMemAvailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitMemAvailEnabled.setDescription("The state indicating whether to set limit of available memory is \nenabled or not for the virtual server.")
gtmVsLimitBitsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitBitsPerSecEnabled.setDescription("The state indicating whether to limit of number of bits per second \nis enabled or not for the virtual server.")
gtmVsLimitPktsPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitPktsPerSecEnabled.setDescription("The state indicating whether to set limit of number of packets \nper second is enabled or not for the virtual server.")
gtmVsLimitConnEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitConnEnabled.setDescription("The state indicating whether to set limit of total connections \nis enabled or not for the virtual server.")
gtmVsLimitConnPerSecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitConnPerSecEnabled.setDescription("Deprecated! This feature has been eliminated.\nThe state indicating whether to set limit of connections per second \nis enabled or not for the virtual server.")
gtmVsLimitCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitCpuUsage.setDescription("The limit of CPU usage as a percentage for the virtual server.")
gtmVsLimitMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitMemAvail.setDescription("The limit of memory available in bytes for the virtual server.")
gtmVsLimitBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitBitsPerSec.setDescription("The limit of number of bits per second for the virtual server.")
gtmVsLimitPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitPktsPerSec.setDescription("The limit of number of packets per second for the virtual server.")
gtmVsLimitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitConn.setDescription("The limit of total number of connections for the virtual server.")
gtmVsLimitConnPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLimitConnPerSec.setDescription("Deprecated! This feature has been eliminated.\nThe limit of number of connections per second for the virtual server.")
gtmVsMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 21), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsMonitorRule.setDescription("The name of the monitor rule for this virtual server.")
gtmVsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsEnabled.setDescription("The state indicating whether the virtual server is enabled or not.")
gtmVsLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 1, 2, 1, 23), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsLinkName.setDescription("The parent link of this virtual server.")
gtmVirtualServDepends = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2))
gtmVsDepsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsNumber.setDescription("The number of gtmVirtualServDepends entries in the table.")
gtmVsDepsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2))
if mibBuilder.loadTexts: gtmVsDepsTable.setDescription("A table containing information of virtual servers' dependencies on other virtual servers for GTM (Global Traffic Management).")
gtmVsDepsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmVsDepsServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVsName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsDepsDependServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsDepsDependVsName"))
if mibBuilder.loadTexts: gtmVsDepsEntry.setDescription("Columns in the gtmVsDeps Table")
gtmVsDepsIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsIpType.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address type of gtmVsDepsIp.")
gtmVsDepsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsIp.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address of a virtual server. It is interpreted within\nthe context of gtmVsDepsIpType value.")
gtmVsDepsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsPort.setDescription("Deprecated! use server_name and vs_name instead, \nThe port of a virtual server.")
gtmVsDepsVipType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsVipType.setDescription("Deprecated! use depend server_name and vs_name instead, \nThe IP address type of gtmVsDepsVip")
gtmVsDepsVip = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsVip.setDescription("Deprecated! use depend server_name and vs_name instead, \nThe IP address of a virtual server on which the specified virtual server depends. \nIt is interpreted within the context of gtmVsDepsOnVipType value.")
gtmVsDepsVport = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsVport.setDescription("Deprecated! depend use server_name and vs_name instead, \nThe port of a virtual server on  which the specified virtual server depends.")
gtmVsDepsServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsServerName.setDescription("The name of the server with which the specified virtual server is associated.")
gtmVsDepsVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsVsName.setDescription("The virtual server name.")
gtmVsDepsDependServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsDependServerName.setDescription("The server name of a virtual server on which the specified virtual server depends.")
gtmVsDepsDependVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 2, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsDepsDependVsName.setDescription("The virtual server name on which the specified virtual server depends.")
gtmVirtualServStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3))
gtmVsStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmVsStatResetStats.setDescription("The action to reset resetable statistics data in  gtmVirtualServStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
gtmVsStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatNumber.setDescription("The number of gtmVirtualServStat entries in the table.")
gtmVsStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3))
if mibBuilder.loadTexts: gtmVsStatTable.setDescription("A table containing statistics information of virtual servers \nfor GTM (Global Traffic Management).")
gtmVsStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmVsStatServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsStatName"))
if mibBuilder.loadTexts: gtmVsStatEntry.setDescription("Columns in the gtmVsStat Table")
gtmVsStatIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatIpType.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address type of gtmVirtualServStatIp.")
gtmVsStatIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatIp.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address of a virtual server. It is interpreted within\nthe context of gtmVirtualServStatIpType value.")
gtmVsStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatPort.setDescription("Deprecated! use server_name and vs_name instead, \nThe port of a virtual server.")
gtmVsStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatName.setDescription("The name of the specified virtual server.")
gtmVsStatCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatCpuUsage.setDescription("The CPU usage in percentage for the specified virtual server.")
gtmVsStatMemAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatMemAvail.setDescription("The memory available in bytes for the specified virtual server.")
gtmVsStatBitsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatBitsPerSecIn.setDescription("The number of bits per second received by the specified virtual server.")
gtmVsStatBitsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatBitsPerSecOut.setDescription("The number of bits per second sent out from the specified virtual server.")
gtmVsStatPktsPerSecIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatPktsPerSecIn.setDescription("The number of packets per second received by the specified virtual server.")
gtmVsStatPktsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatPktsPerSecOut.setDescription("The number of packets per second sent out from the specified virtual server.")
gtmVsStatConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatConnections.setDescription("The number of total connections to the specified virtual server.")
gtmVsStatConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatConnRate.setDescription("Deprecated!\nReplaced by gtmVsStatVsScore.\nThe connection rate (current connection rate/connection rate limit)\nin percentage for the specified virtual server.")
gtmVsStatVsScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatVsScore.setDescription("A user-defined value that specifies the ranking of the virtual server \nwhen compared to other virtual servers within the same pool.")
gtmVsStatServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 3, 3, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatServerName.setDescription("The name of the server with which the specified virtual server is associated.")
gtmVirtualServStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4))
gtmVsStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusNumber.setDescription("The number of gtmVirtualServStatus entries in the table.")
gtmVsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2))
if mibBuilder.loadTexts: gtmVsStatusTable.setDescription("A table containing status information of virtual servers \nfor GTM (Global Traffic Management).")
gtmVsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmVsStatusServerName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmVsStatusVsName"))
if mibBuilder.loadTexts: gtmVsStatusEntry.setDescription("Columns in the gtmVsStatus Table")
gtmVsStatusIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusIpType.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address type of gtmVirtualServStatusIp.")
gtmVsStatusIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusIp.setDescription("Deprecated! use server_name and vs_name instead, \nThe IP address of a virtual server. It is interpreted within\nthe context of gtmVirtualServStatusIpType value.")
gtmVsStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusPort.setDescription("Deprecated! use server_name and vs_name instead, \nThe port of a virtual server.")
gtmVsStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusAvailState.setDescription("The availability of the specified virtual server indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
gtmVsStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusEnabledState.setDescription("The activity status of the specified virtual server, as specified \nby the user.")
gtmVsStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled this virtual server.")
gtmVsStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusDetailReason.setDescription("The detail description of the specified virtual server's status.")
gtmVsStatusVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusVsName.setDescription("The name of the specified virtual server.")
gtmVsStatusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 11, 4, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmVsStatusServerName.setDescription("The name of the server with which the specified virtual server is associated.")
gtmWideips = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12))
gtmWideip = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1))
gtmWideipNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipNumber.setDescription("The number of gtmWideip entries in the table.")
gtmWideipTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2))
if mibBuilder.loadTexts: gtmWideipTable.setDescription("A table containing information of wide IPs for GTM (Global Traffic Management).")
gtmWideipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipName"))
if mibBuilder.loadTexts: gtmWideipEntry.setDescription("Columns in the gtmWideip Table")
gtmWideipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipName.setDescription("The name of a wide IP.")
gtmWideipPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPersist.setDescription("The state indicating whether or not to maintain a connection between \na LDNS and a particular virtual server for the specified wide IP.")
gtmWideipTtlPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipTtlPersist.setDescription("The persistence TTL value of the specified wide IP.  \nThis value (in seconds) indicates the time to maintain a connection \nbetween an LDNS and a particular virtual server.")
gtmWideipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipEnabled.setDescription("The state indicating whether the specified wide IP is enabled or not.")
gtmWideipLbmodePool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(10,9,18,3,16,7,0,15,5,11,17,6,8,13,2,1,12,14,4,)).subtype(namedValues=NamedValues(("returntodns", 0), ("null", 1), ("lowesthops", 10), ("packetrate", 11), ("cpu", 12), ("hitratio", 13), ("qos", 14), ("bps", 15), ("droppacket", 16), ("explicitip", 17), ("vsscore", 18), ("roundrobin", 2), ("ratio", 3), ("topology", 4), ("statpersit", 5), ("ga", 6), ("vscapacity", 7), ("leastconn", 8), ("lowestrtt", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipLbmodePool.setDescription("The load balancing method for the specified wide IP.  \nThis is used by the wide IPs when picking a pool to use when \nresponding to a DNS request.")
gtmWideipApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipApplication.setDescription("The application name the specified wide IP is used for.")
gtmWideipLastResortPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipLastResortPool.setDescription("The name of the last-resort pool for the specified wide IP.")
gtmWideipIpv6Noerror = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipIpv6Noerror.setDescription("When enabled, all IPv6 wide IP requests will be returned with a noerror response.")
gtmWideipLoadBalancingDecisionLogVerbosity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipLoadBalancingDecisionLogVerbosity.setDescription("The log verbosity value when making load-balancing decisions. From\nthe least significant bit to the most significant bit, each bit\nrepresents enabling or disabling a certain load balancing log. When the\nfirst bit is 1, log will contain pool load-balancing algorithm\ndetails. When the second bit is 1, log will contain details of all\npools traversed during load-balancing. When the third bit is 1, log\nwill contain pool member load-balancing algorithm details. When the\nfourth bit is 1, log will contain details of all pool members\ntraversed during load-balancing.")
gtmWideipStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2))
gtmWideipStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmWideipStatResetStats.setDescription("The action to reset resetable statistics data in  gtmWideipStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
gtmWideipStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatNumber.setDescription("The number of gtmWideipStat entries in the table.")
gtmWideipStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3))
if mibBuilder.loadTexts: gtmWideipStatTable.setDescription("A table containing statistics information of wide IPs for GTM (Global Traffic Management).")
gtmWideipStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipStatName"))
if mibBuilder.loadTexts: gtmWideipStatEntry.setDescription("Columns in the gtmWideipStat Table")
gtmWideipStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatName.setDescription("The name of the wide IP.")
gtmWideipStatRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatRequests.setDescription("The number of total requests for the specified wide IP.")
gtmWideipStatResolutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatResolutions.setDescription("The number of total resolutions for the specified wide IP.")
gtmWideipStatPersisted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatPersisted.setDescription("The number of persisted requests for the specified wide IP.")
gtmWideipStatPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatPreferred.setDescription("The number of times which the preferred load balance method is used\nfor the specified wide IP.")
gtmWideipStatFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatFallback.setDescription("The number of times which the alternate load balance method is used\nfor the specified wide IP.")
gtmWideipStatDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatDropped.setDescription("The number of dropped DNS messages for the specified wide IP.")
gtmWideipStatExplicitIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatExplicitIp.setDescription("Deprecated! The number of times which a LDNS  was persisted to the\nspecified wide IP by the explicit IP rule.")
gtmWideipStatReturnToDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatReturnToDns.setDescription("The number of times which a resolve was returned to DNS (for resolution) \nfor the specified wide IP.")
gtmWideipStatReturnFromDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatReturnFromDns.setDescription("The number of times which a resolve was returned from DNS for the \nspecified wide IP.")
gtmWideipStatCnameResolutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatCnameResolutions.setDescription("The number of times which a query is resolved by the CNAME of pools\nassociated with the specified Wide IP.")
gtmWideipStatARequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatARequests.setDescription("The number of A requests for the specified wide IP.")
gtmWideipStatAaaaRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatAaaaRequests.setDescription("The number of AAAA requests for the specified wide IP.")
gtmWideipStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3))
gtmWideipStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusNumber.setDescription("The number of gtmWideipStatus entries in the table.")
gtmWideipStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2))
if mibBuilder.loadTexts: gtmWideipStatusTable.setDescription("A table containing status information of wide IPs for GTM (Global Traffic Management).")
gtmWideipStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusName"))
if mibBuilder.loadTexts: gtmWideipStatusEntry.setDescription("Columns in the gtmWideipStatus Table")
gtmWideipStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusName.setDescription("The name of a wide IP.")
gtmWideipStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusAvailState.setDescription("The availability of the specified wide IP indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
gtmWideipStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusEnabledState.setDescription("The activity status of the specified wide IP, as specified \nby the user.")
gtmWideipStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified wide IP.")
gtmWideipStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipStatusDetailReason.setDescription("The detail description of the specified wide IP's status.")
gtmWideipAlias = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4))
gtmWideipAliasNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipAliasNumber.setDescription("The number of gtmWideipAlias entries in the table.")
gtmWideipAliasTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2))
if mibBuilder.loadTexts: gtmWideipAliasTable.setDescription("A table containing information of aliases of the specified wide IPs \nfor GTM (Global Traffic Management).")
gtmWideipAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasWipName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasName"))
if mibBuilder.loadTexts: gtmWideipAliasEntry.setDescription("Columns in the gtmWideipAlias Table")
gtmWideipAliasWipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipAliasWipName.setDescription("The name of the wide IP.")
gtmWideipAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipAliasName.setDescription("The alias name of the specified wide IP.")
gtmWideipPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5))
gtmWideipPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolNumber.setDescription("The number of gtmWideipPool entries in the table.")
gtmWideipPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2))
if mibBuilder.loadTexts: gtmWideipPoolTable.setDescription("A table containing information of pools associated with \nthe specified wide IPs for GTM (Global Traffic Management).")
gtmWideipPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolWipName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolPoolName"))
if mibBuilder.loadTexts: gtmWideipPoolEntry.setDescription("Columns in the gtmWideipPool Table")
gtmWideipPoolWipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolWipName.setDescription("The name of the wide IP.")
gtmWideipPoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolPoolName.setDescription("The name of the pool which associates with the specified wide IP.")
gtmWideipPoolOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolOrder.setDescription("This determines order of pools in wip. zero-based.")
gtmWideipPoolRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipPoolRatio.setDescription("The load balancing ratio given to the specified pool.")
gtmWideipRule = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6))
gtmWideipRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRuleNumber.setDescription("The number of gtmWideipRule entries in the table.")
gtmWideipRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2))
if mibBuilder.loadTexts: gtmWideipRuleTable.setDescription("A table containing information of rules associated with \nthe specified wide IPs for GTM (Global Traffic Management).")
gtmWideipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleWipName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleRuleName"))
if mibBuilder.loadTexts: gtmWideipRuleEntry.setDescription("Columns in the gtmWideipRule Table")
gtmWideipRuleWipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRuleWipName.setDescription("The name of the wide IP.")
gtmWideipRuleRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRuleRuleName.setDescription("The name of the rule which associates with the specified wide IP.")
gtmWideipRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 12, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmWideipRulePriority.setDescription("The execution priority of the rule for the specified wide IP.")
gtmProberPools = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13))
gtmProberPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1))
gtmProberPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolNumber.setDescription("The number of gtmProberPool entries in the table.")
gtmProberPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2))
if mibBuilder.loadTexts: gtmProberPoolTable.setDescription("A table containing information for GTM prober pools.")
gtmProberPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolName"))
if mibBuilder.loadTexts: gtmProberPoolEntry.setDescription("Columns in the gtmProberPool Table")
gtmProberPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolName.setDescription("The name of a prober pool.")
gtmProberPoolLbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,6,)).subtype(namedValues=NamedValues(("roundrobin", 2), ("ga", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolLbMode.setDescription("The preferred load balancing method for the specified prober pool.")
gtmProberPoolEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolEnabled.setDescription("The state indicating whether the specified prober pool is enabled or not.")
gtmProberPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2))
gtmProberPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmProberPoolStatResetStats.setDescription("The action to reset resetable statistics data in  gtmProberPoolStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
gtmProberPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatNumber.setDescription("The number of gtmProberPoolStat entries in the table.")
gtmProberPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3))
if mibBuilder.loadTexts: gtmProberPoolStatTable.setDescription("A table containing statistics information for GTM prober pools.")
gtmProberPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatName"))
if mibBuilder.loadTexts: gtmProberPoolStatEntry.setDescription("Columns in the gtmProberPoolStat Table")
gtmProberPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatName.setDescription("The name of a prober pool.")
gtmProberPoolStatTotalProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatTotalProbes.setDescription("The number of total probes.")
gtmProberPoolStatSuccessfulProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatSuccessfulProbes.setDescription("The number of successful probes.")
gtmProberPoolStatFailedProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatFailedProbes.setDescription("The number of failed probes.")
gtmProberPoolStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3))
gtmProberPoolStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusNumber.setDescription("The number of gtmProberPoolStatus entries in the table.")
gtmProberPoolStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2))
if mibBuilder.loadTexts: gtmProberPoolStatusTable.setDescription("A table containing status information for GTM prober pools.")
gtmProberPoolStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusName"))
if mibBuilder.loadTexts: gtmProberPoolStatusEntry.setDescription("Columns in the gtmProberPoolStatus Table")
gtmProberPoolStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusName.setDescription("The name of a prober pool.")
gtmProberPoolStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusAvailState.setDescription("The availability of the specified pool indicated by color.\nnone - error;\ngreen - available;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
gtmProberPoolStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusEnabledState.setDescription("The activity status of the specified pool, as specified \nby the user.")
gtmProberPoolStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 3, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolStatusDetailReason.setDescription("The detail description of the specified pool's status.")
gtmProberPoolMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4))
gtmProberPoolMbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrNumber.setDescription("The number of gtmProberPoolMember entries in the table.")
gtmProberPoolMbrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2))
if mibBuilder.loadTexts: gtmProberPoolMbrTable.setDescription("A table containing information for GTM prober pool members.")
gtmProberPoolMbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrServerName"))
if mibBuilder.loadTexts: gtmProberPoolMbrEntry.setDescription("Columns in the gtmProberPoolMbr Table")
gtmProberPoolMbrPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrPoolName.setDescription("The name of a prober pool.")
gtmProberPoolMbrServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrServerName.setDescription("The name of a server.")
gtmProberPoolMbrPmbrOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrPmbrOrder.setDescription("The prober pool member order.")
gtmProberPoolMbrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 4, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrEnabled.setDescription("The state indicating whether the specified prober pool member \nis enabled or not.")
gtmProberPoolMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5))
gtmProberPoolMbrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gtmProberPoolMbrStatResetStats.setDescription("The action to reset resetable statistics data in  gtmProberPoolMemberStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
gtmProberPoolMbrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatNumber.setDescription("The number of gtmProberPoolMemberStat entries in the table.")
gtmProberPoolMbrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3))
if mibBuilder.loadTexts: gtmProberPoolMbrStatTable.setDescription("A table containing statistics information for GTM prober pool members.")
gtmProberPoolMbrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatServerName"))
if mibBuilder.loadTexts: gtmProberPoolMbrStatEntry.setDescription("Columns in the gtmProberPoolMbrStat Table")
gtmProberPoolMbrStatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatPoolName.setDescription("The name of a prober pool.")
gtmProberPoolMbrStatServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatServerName.setDescription("The name of a server.")
gtmProberPoolMbrStatTotalProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatTotalProbes.setDescription("The number of total probes issued by this pool member.")
gtmProberPoolMbrStatSuccessfulProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatSuccessfulProbes.setDescription("The number of successful probes issued by this pool member.")
gtmProberPoolMbrStatFailedProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatFailedProbes.setDescription("The number of failed probes issued by pool member.")
gtmProberPoolMemberStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6))
gtmProberPoolMbrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusNumber.setDescription("The number of gtmProberPoolMemberStatus entries in the table.")
gtmProberPoolMbrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2))
if mibBuilder.loadTexts: gtmProberPoolMbrStatusTable.setDescription("A table containing status information for GTM prober pool members.")
gtmProberPoolMbrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1)).setIndexNames((0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusPoolName"), (0, "F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusServerName"))
if mibBuilder.loadTexts: gtmProberPoolMbrStatusEntry.setDescription("Columns in the gtmProberPoolMbrStatus Table")
gtmProberPoolMbrStatusPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusPoolName.setDescription("The name of a prober pool.")
gtmProberPoolMbrStatusServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusServerName.setDescription("The name of a server.")
gtmProberPoolMbrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusAvailState.setDescription("The availability of the specified pool member indicated by color.\nnone - error;\ngreen - available;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
gtmProberPoolMbrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusEnabledState.setDescription("The activity status of the specified pool member, as specified \nby the user.")
gtmProberPoolMbrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 3, 13, 6, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtmProberPoolMbrStatusDetailReason.setDescription("The detail description of the specified pool member's status.")
bigipGlobalTMGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3))

# Augmentions

# Groups

gtmAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 1)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimerGetAutoconfigData"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrEnableResetsRipeness"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrRttPacketLength"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrProbeDisabledObjects"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorPacketRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkCompensateInbound"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrCacheLdns"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrFbRespectAcl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrSyncGroup"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDownMultiple"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrRttSampleCount"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrCheckStaticDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorBps"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrMaxMonReqs"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrAutoconf"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrSyncNamedConf"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDefaultFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLdnsDuration"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLowerBoundPctRow"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrStaticPersistV6Cidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTraceroutePort"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrStaticPersistCidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorHops"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrPathTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDefaultAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrCertificateDepth"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDrainRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrFbRespectDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorRtt"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorVsCapacity"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrCheckDynamicDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimerRetryPathData"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkLimitFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDownThreshold"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrSyncZonesTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLowerBoundPctCol"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrSyncTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrAolAware"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrAutosync"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTopologyAclThreshold"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimeTolerance"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrMaxLinkOverLimitCount"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrMaxMemoryUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrGtmSetsRecursion"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrPersistMask"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDumpTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTopologyLongestMatch"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkCompensationHistory"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrPathsNeverDie"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorVsScore"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimerSendKeepAlive"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkCompensateOutbound"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTimerPersistCache"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrPathDuration"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrOverLimitLinkLimitFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrDefaultProbeLimit"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrTraceTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrRttTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorLcs"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrQosFactorHitRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttrLinkPrepaidFactor"), ) )
if mibBuilder.loadTexts: gtmAttrGroup.setDescription("A collection of objects of gtmGlobalAttr MIB.")
gtmGlobalLdnsProbeProtoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 2)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoType"), ("F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoIndex"), ("F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmGlobalLdnsProbeProtoName"), ) )
if mibBuilder.loadTexts: gtmGlobalLdnsProbeProtoGroup.setDescription("A collection of objects of gtmGlobalLdnsProbeProto MIB.")
gtmStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 3)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmStatResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatAaaaRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatReturnToDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatCnameResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatPersisted"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatExplicitIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatARequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatPaths"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatNumBacklogged"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatLdnses"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatBytesDropped"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatPreferred"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatBytesReceived"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatReturnFromDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatBytesSent"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatDropped"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmStatReconnects"), ) )
if mibBuilder.loadTexts: gtmStatGroup.setDescription("A collection of objects of gtmGlobalStat MIB.")
gtmAppGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 4)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmAppNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppPersist"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppAvailability"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppTtlPersist"), ) )
if mibBuilder.loadTexts: gtmAppGroup.setDescription("A collection of objects of gtmApplication MIB.")
gtmAppStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 5)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppStatusEnabledState"), ) )
if mibBuilder.loadTexts: gtmAppStatusGroup.setDescription("A collection of objects of gtmApplicationStatus MIB.")
gtmAppContStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 6)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatType"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatNumAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatAppName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContStatEnabledState"), ) )
if mibBuilder.loadTexts: gtmAppContStatGroup.setDescription("A collection of objects of gtmAppContextStat MIB.")
gtmAppContDisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 7)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmAppContDisType"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContDisName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContDisAppName"), ("F5-BIGIP-GLOBAL-MIB", "gtmAppContDisNumber"), ) )
if mibBuilder.loadTexts: gtmAppContDisGroup.setDescription("A collection of objects of gtmAppContextDisable MIB.")
gtmDcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 8)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmDcName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcContact"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcLocation"), ) )
if mibBuilder.loadTexts: gtmDcGroup.setDescription("A collection of objects of gtmDataCenter MIB.")
gtmDcStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 9)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmDcStatPktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatConnections"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatPktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatBitsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatBitsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatResetStats"), ) )
if mibBuilder.loadTexts: gtmDcStatGroup.setDescription("A collection of objects of gtmDataCenterStat MIB.")
gtmDcStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 10)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmDcStatusEnabledState"), ) )
if mibBuilder.loadTexts: gtmDcStatusGroup.setDescription("A collection of objects of gtmDataCenterStatus MIB.")
gtmIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 11)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmIpDeviceName"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpIpXlated"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpUnitId"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpLinkName"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpIpXlatedType"), ("F5-BIGIP-GLOBAL-MIB", "gtmIpIpType"), ) )
if mibBuilder.loadTexts: gtmIpGroup.setDescription("A collection of objects of gtmIp MIB.")
gtmLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 12)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmLinkPrepaidInDollars"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkUplinkAddressType"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkDcName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkDuplex"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitOutBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkIspName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkPrepaid"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitTotalPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkWeightingType"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkLimitInBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkUplinkAddress"), ) )
if mibBuilder.loadTexts: gtmLinkGroup.setDescription("A collection of objects of gtmLink MIB.")
gtmLinkCostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 13)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostUptoBps"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostDollarsPerMbps"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostIndex"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkCostNumber"), ) )
if mibBuilder.loadTexts: gtmLinkCostGroup.setDescription("A collection of objects of gtmLinkCost MIB.")
gtmLinkStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 14)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateNode"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatLcsOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateNodeIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateVsesOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateVsesIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateVses"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatLcsIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatRateNodeOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatPaths"), ) )
if mibBuilder.loadTexts: gtmLinkStatGroup.setDescription("A collection of objects of gtmLinkStat MIB.")
gtmLinkStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 15)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmLinkStatusEnabledState"), ) )
if mibBuilder.loadTexts: gtmLinkStatusGroup.setDescription("A collection of objects of gtmLinkStatus MIB.")
gtmPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 16)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffHops"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolVerifyMember"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallbackIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffVsScore"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolCname"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolAnswersToReturn"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallbackIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffRtt"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolDynamicRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffVsCapacity"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffBps"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffPacketRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffLcs"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLbMode"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallbackIpv6Type"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolManualResume"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolLimitCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolQosCoeffHitRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolFallbackIpv6"), ) )
if mibBuilder.loadTexts: gtmPoolGroup.setDescription("A collection of objects of gtmPool MIB.")
gtmPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 17)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatCnameResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatExplicitIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatPreferred"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatReturnToDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatReturnFromDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatDropped"), ) )
if mibBuilder.loadTexts: gtmPoolStatGroup.setDescription("A collection of objects of gtmPoolStat MIB.")
gtmPoolMbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 18)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrOrder"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrLimitConnPerSecEnabled"), ) )
if mibBuilder.loadTexts: gtmPoolMbrGroup.setDescription("A collection of objects of gtmPoolMember MIB.")
gtmPoolStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 19)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolStatusNumber"), ) )
if mibBuilder.loadTexts: gtmPoolStatusGroup.setDescription("A collection of objects of gtmPoolStatus MIB.")
gtmPoolMbrDepsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 20)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsDependServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsDependVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVip"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVport"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrDepsVipType"), ) )
if mibBuilder.loadTexts: gtmPoolMbrDepsGroup.setDescription("A collection of objects of gtmPoolMemberDepends MIB.")
gtmPoolMbrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 21)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPreferred"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatResetStats"), ) )
if mibBuilder.loadTexts: gtmPoolMbrStatGroup.setDescription("A collection of objects of gtmPoolMemberStat MIB.")
gtmPoolMbrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 22)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmPoolMbrStatusNumber"), ) )
if mibBuilder.loadTexts: gtmPoolMbrStatusGroup.setDescription("A collection of objects of gtmPoolMemberStatus MIB.")
gtmRegionEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 23)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmRegionEntryRegionDbType"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegionEntryNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegionEntryName"), ) )
if mibBuilder.loadTexts: gtmRegionEntryGroup.setDescription("A collection of objects of gtmRegionEntry MIB.")
gtmRegItemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 24)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmRegItemType"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegionDbType"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegionName"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemNegate"), ("F5-BIGIP-GLOBAL-MIB", "gtmRegItemRegEntry"), ) )
if mibBuilder.loadTexts: gtmRegItemGroup.setDescription("A collection of objects of gtmRegItem MIB.")
gtmRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 25)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmRuleConfigSource"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleDefinition"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleName"), ) )
if mibBuilder.loadTexts: gtmRuleGroup.setDescription("A collection of objects of gtmRule MIB.")
gtmRuleEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 26)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventPriority"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventEventType"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventScript"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventName"), ) )
if mibBuilder.loadTexts: gtmRuleEventGroup.setDescription("A collection of objects of gtmRuleEvent MIB.")
gtmRuleEventStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 27)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatAborts"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatPriority"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatFailures"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatTotalExecutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmRuleEventStatEventType"), ) )
if mibBuilder.loadTexts: gtmRuleEventStatGroup.setDescription("A collection of objects of gtmRuleEventStat MIB.")
gtmServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 28)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerProber"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerAllowSvcChk"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLinkAutoconfState"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerType"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerProberType"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerAllowSnmp"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerAutoconfState"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerAllowPath"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerDcName"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerLimitCpuUsage"), ) )
if mibBuilder.loadTexts: gtmServerGroup.setDescription("A collection of objects of gtmServer MIB.")
gtmServerStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 29)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmServerStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatBitsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatUnitId"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatConnections"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatVsPicks"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatPktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatPktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatBitsPerSecOut"), ) )
if mibBuilder.loadTexts: gtmServerStatGroup.setDescription("A collection of objects of gtmServerStat MIB.")
gtmServerStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 30)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStatusName"), ) )
if mibBuilder.loadTexts: gtmServerStatusGroup.setDescription("A collection of objects of gtmServerStatus MIB.")
gtmTopItemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 31)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsType"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemWeight"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsEntry"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemLdnsNegate"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerEntry"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerNegate"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemOrder"), ("F5-BIGIP-GLOBAL-MIB", "gtmTopItemServerType"), ) )
if mibBuilder.loadTexts: gtmTopItemGroup.setDescription("A collection of objects of gtmTopItem MIB.")
gtmVsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 32)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitBitsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsIpXlatedType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitMemAvailEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitConnPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitPktsPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitConnPerSec"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitCpuUsageEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitPktsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitConn"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLinkName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsMonitorRule"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitConnEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsLimitBitsPerSecEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsIpXlated"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsPortXlated"), ) )
if mibBuilder.loadTexts: gtmVsGroup.setDescription("A collection of objects of gtmVirtualServ MIB.")
gtmVsDepsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 33)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVport"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVipType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsVip"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsDependVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsDepsDependServerName"), ) )
if mibBuilder.loadTexts: gtmVsDepsGroup.setDescription("A collection of objects of gtmVirtualServDepends MIB.")
gtmVsStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 34)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmVsStatBitsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatVsScore"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatCpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatMemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatPktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatConnections"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatPktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatBitsPerSecIn"), ) )
if mibBuilder.loadTexts: gtmVsStatGroup.setDescription("A collection of objects of gtmVirtualServStat MIB.")
gtmVsStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 35)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusVsName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusIpType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusPort"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmVsStatusIp"), ) )
if mibBuilder.loadTexts: gtmVsStatusGroup.setDescription("A collection of objects of gtmVirtualServStatus MIB.")
gtmWideipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 36)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmWideipLoadBalancingDecisionLogVerbosity"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipLbmodePool"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipTtlPersist"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPersist"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipApplication"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipIpv6Noerror"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipLastResortPool"), ) )
if mibBuilder.loadTexts: gtmWideipGroup.setDescription("A collection of objects of gtmWideip MIB.")
gtmWideipStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 37)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatAaaaRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatPersisted"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatExplicitIp"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatPreferred"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatARequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatCnameResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatResolutions"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatReturnToDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatReturnFromDns"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatDropped"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatResetStats"), ) )
if mibBuilder.loadTexts: gtmWideipStatGroup.setDescription("A collection of objects of gtmWideipStat MIB.")
gtmWideipStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 38)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusParentType"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusEnabledState"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipStatusNumber"), ) )
if mibBuilder.loadTexts: gtmWideipStatusGroup.setDescription("A collection of objects of gtmWideipStatus MIB.")
gtmWideipAliasGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 39)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasWipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipAliasNumber"), ) )
if mibBuilder.loadTexts: gtmWideipAliasGroup.setDescription("A collection of objects of gtmWideipAlias MIB.")
gtmWideipPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 40)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolOrder"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolWipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipPoolRatio"), ) )
if mibBuilder.loadTexts: gtmWideipPoolGroup.setDescription("A collection of objects of gtmWideipPool MIB.")
gtmWideipRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 41)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleRuleName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleWipName"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipRuleNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmWideipRulePriority"), ) )
if mibBuilder.loadTexts: gtmWideipRuleGroup.setDescription("A collection of objects of gtmWideipRule MIB.")
gtmServerStat2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 42)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2CpuUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2PktsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2BitsPerSecOut"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2MemAvail"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2ConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2Name"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2Connections"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2Number"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2PktsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2UnitId"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2BitsPerSecIn"), ("F5-BIGIP-GLOBAL-MIB", "gtmServerStat2VsPicks"), ) )
if mibBuilder.loadTexts: gtmServerStat2Group.setDescription("A collection of objects of gtmServerStat2 MIB.")
gtmProberPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 43)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolLbMode"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolEnabled"), ) )
if mibBuilder.loadTexts: gtmProberPoolGroup.setDescription("A collection of objects of gtmProberPool MIB.")
gtmProberPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 44)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatSuccessfulProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatTotalProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatFailedProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatResetStats"), ) )
if mibBuilder.loadTexts: gtmProberPoolStatGroup.setDescription("A collection of objects of gtmProberPoolStat MIB.")
gtmProberPoolStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 45)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolStatusEnabledState"), ) )
if mibBuilder.loadTexts: gtmProberPoolStatusGroup.setDescription("A collection of objects of gtmProberPoolStatus MIB.")
gtmProberPoolMbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 46)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrEnabled"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrPmbrOrder"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrServerName"), ) )
if mibBuilder.loadTexts: gtmProberPoolMbrGroup.setDescription("A collection of objects of gtmProberPoolMember MIB.")
gtmProberPoolMbrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 47)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatFailedProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatSuccessfulProbes"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatResetStats"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatTotalProbes"), ) )
if mibBuilder.loadTexts: gtmProberPoolMbrStatGroup.setDescription("A collection of objects of gtmProberPoolMemberStat MIB.")
gtmProberPoolMbrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 48)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusPoolName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusAvailState"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusDetailReason"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusServerName"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusNumber"), ("F5-BIGIP-GLOBAL-MIB", "gtmProberPoolMbrStatusEnabledState"), ) )
if mibBuilder.loadTexts: gtmProberPoolMbrStatusGroup.setDescription("A collection of objects of gtmProberPoolMemberStatus MIB.")
gtmAttr2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 3, 49)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "gtmAttr2StaticPersistCidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2PathDuration"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2CheckDynamicDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2SyncTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2PathTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkCompensationHistory"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimerGetAutoconfigData"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2Name"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TopologyAclThreshold"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TraceroutePort"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DefaultAlternate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2MaxMemoryUsage"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorHops"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DownThreshold"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimerSendKeepAlive"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2AolAware"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DumpTopology"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2Autosync"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DefaultProbeLimit"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2ProbeDisabledObjects"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2RttPacketLength"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LowerBoundPctCol"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2StaticPersistV6Cidr"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorVsScore"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2EnableResetsRipeness"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DownMultiple"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorHitRatio"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorBps"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LowerBoundPctRow"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2PersistMask"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2CertificateDepth"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DefaultFallback"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2DrainRequests"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LdnsDuration"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2Autoconf"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkLimitFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2SyncZonesTimeout"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2CheckStaticDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorLcs"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2SyncGroup"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimerPersistCache"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2FbRespectDepends"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkPrepaidFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2ForwardStatus"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorConnRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2OverLimitLinkLimitFactor"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2Number"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorRtt"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TraceTtl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2GtmSetsRecursion"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2RttSampleCount"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2CacheLdns"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2PathsNeverDie"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TopologyLongestMatch"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkCompensateOutbound"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2SyncNamedConf"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2MaxMonReqs"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorPacketRate"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimerRetryPathData"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2QosFactorVsCapacity"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2TimeTolerance"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2LinkCompensateInbound"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2MaxLinkOverLimitCount"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2FbRespectAcl"), ("F5-BIGIP-GLOBAL-MIB", "gtmAttr2RttTimeout"), ) )
if mibBuilder.loadTexts: gtmAttr2Group.setDescription("A collection of objects of gtmGlobalAttr2 MIB.")

# Compliances

bigipGlobalTMCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3375, 2, 5, 1, 3)).setObjects(*(("F5-BIGIP-GLOBAL-MIB", "bigipGlobalTMGroups"), ) )
if mibBuilder.loadTexts: bigipGlobalTMCompliance.setDescription("This specifies the objects that are required to claim \ncompliance to F5 Traffic Management System.")

# Exports

# Module identity
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", PYSNMP_MODULE_ID=bigipGlobalTM)

# Objects
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", bigipGlobalTM=bigipGlobalTM, gtmGlobals=gtmGlobals, gtmGlobalAttrs=gtmGlobalAttrs, gtmGlobalAttr=gtmGlobalAttr, gtmAttrDumpTopology=gtmAttrDumpTopology, gtmAttrCacheLdns=gtmAttrCacheLdns, gtmAttrAolAware=gtmAttrAolAware, gtmAttrCheckStaticDepends=gtmAttrCheckStaticDepends, gtmAttrCheckDynamicDepends=gtmAttrCheckDynamicDepends, gtmAttrDrainRequests=gtmAttrDrainRequests, gtmAttrEnableResetsRipeness=gtmAttrEnableResetsRipeness, gtmAttrFbRespectDepends=gtmAttrFbRespectDepends, gtmAttrFbRespectAcl=gtmAttrFbRespectAcl, gtmAttrDefaultAlternate=gtmAttrDefaultAlternate, gtmAttrDefaultFallback=gtmAttrDefaultFallback, gtmAttrPersistMask=gtmAttrPersistMask, gtmAttrGtmSetsRecursion=gtmAttrGtmSetsRecursion, gtmAttrQosFactorLcs=gtmAttrQosFactorLcs, gtmAttrQosFactorRtt=gtmAttrQosFactorRtt, gtmAttrQosFactorHops=gtmAttrQosFactorHops, gtmAttrQosFactorHitRatio=gtmAttrQosFactorHitRatio, gtmAttrQosFactorPacketRate=gtmAttrQosFactorPacketRate, gtmAttrQosFactorBps=gtmAttrQosFactorBps, gtmAttrQosFactorVsCapacity=gtmAttrQosFactorVsCapacity, gtmAttrQosFactorTopology=gtmAttrQosFactorTopology, gtmAttrQosFactorConnRate=gtmAttrQosFactorConnRate, gtmAttrTimerRetryPathData=gtmAttrTimerRetryPathData, gtmAttrTimerGetAutoconfigData=gtmAttrTimerGetAutoconfigData, gtmAttrTimerPersistCache=gtmAttrTimerPersistCache, gtmAttrDefaultProbeLimit=gtmAttrDefaultProbeLimit, gtmAttrDownThreshold=gtmAttrDownThreshold, gtmAttrDownMultiple=gtmAttrDownMultiple, gtmAttrPathTtl=gtmAttrPathTtl, gtmAttrTraceTtl=gtmAttrTraceTtl, gtmAttrLdnsDuration=gtmAttrLdnsDuration, gtmAttrPathDuration=gtmAttrPathDuration, gtmAttrRttSampleCount=gtmAttrRttSampleCount, gtmAttrRttPacketLength=gtmAttrRttPacketLength, gtmAttrRttTimeout=gtmAttrRttTimeout, gtmAttrMaxMonReqs=gtmAttrMaxMonReqs, gtmAttrTraceroutePort=gtmAttrTraceroutePort, gtmAttrPathsNeverDie=gtmAttrPathsNeverDie, gtmAttrProbeDisabledObjects=gtmAttrProbeDisabledObjects, gtmAttrLinkLimitFactor=gtmAttrLinkLimitFactor, gtmAttrOverLimitLinkLimitFactor=gtmAttrOverLimitLinkLimitFactor, gtmAttrLinkPrepaidFactor=gtmAttrLinkPrepaidFactor, gtmAttrLinkCompensateInbound=gtmAttrLinkCompensateInbound, gtmAttrLinkCompensateOutbound=gtmAttrLinkCompensateOutbound, gtmAttrLinkCompensationHistory=gtmAttrLinkCompensationHistory, gtmAttrMaxLinkOverLimitCount=gtmAttrMaxLinkOverLimitCount, gtmAttrLowerBoundPctRow=gtmAttrLowerBoundPctRow, gtmAttrLowerBoundPctCol=gtmAttrLowerBoundPctCol, gtmAttrAutoconf=gtmAttrAutoconf, gtmAttrAutosync=gtmAttrAutosync, gtmAttrSyncNamedConf=gtmAttrSyncNamedConf, gtmAttrSyncGroup=gtmAttrSyncGroup, gtmAttrSyncTimeout=gtmAttrSyncTimeout, gtmAttrSyncZonesTimeout=gtmAttrSyncZonesTimeout, gtmAttrTimeTolerance=gtmAttrTimeTolerance, gtmAttrTopologyLongestMatch=gtmAttrTopologyLongestMatch, gtmAttrTopologyAclThreshold=gtmAttrTopologyAclThreshold, gtmAttrStaticPersistCidr=gtmAttrStaticPersistCidr, gtmAttrStaticPersistV6Cidr=gtmAttrStaticPersistV6Cidr, gtmAttrQosFactorVsScore=gtmAttrQosFactorVsScore, gtmAttrTimerSendKeepAlive=gtmAttrTimerSendKeepAlive, gtmAttrCertificateDepth=gtmAttrCertificateDepth, gtmAttrMaxMemoryUsage=gtmAttrMaxMemoryUsage, gtmGlobalLdnsProbeProto=gtmGlobalLdnsProbeProto, gtmGlobalLdnsProbeProtoNumber=gtmGlobalLdnsProbeProtoNumber, gtmGlobalLdnsProbeProtoTable=gtmGlobalLdnsProbeProtoTable, gtmGlobalLdnsProbeProtoEntry=gtmGlobalLdnsProbeProtoEntry, gtmGlobalLdnsProbeProtoIndex=gtmGlobalLdnsProbeProtoIndex, gtmGlobalLdnsProbeProtoType=gtmGlobalLdnsProbeProtoType, gtmGlobalLdnsProbeProtoName=gtmGlobalLdnsProbeProtoName, gtmGlobalAttr2=gtmGlobalAttr2, gtmAttr2Number=gtmAttr2Number, gtmAttr2Table=gtmAttr2Table, gtmAttr2Entry=gtmAttr2Entry, gtmAttr2DumpTopology=gtmAttr2DumpTopology, gtmAttr2CacheLdns=gtmAttr2CacheLdns, gtmAttr2AolAware=gtmAttr2AolAware, gtmAttr2CheckStaticDepends=gtmAttr2CheckStaticDepends, gtmAttr2CheckDynamicDepends=gtmAttr2CheckDynamicDepends, gtmAttr2DrainRequests=gtmAttr2DrainRequests, gtmAttr2EnableResetsRipeness=gtmAttr2EnableResetsRipeness, gtmAttr2FbRespectDepends=gtmAttr2FbRespectDepends, gtmAttr2FbRespectAcl=gtmAttr2FbRespectAcl, gtmAttr2DefaultAlternate=gtmAttr2DefaultAlternate, gtmAttr2DefaultFallback=gtmAttr2DefaultFallback, gtmAttr2PersistMask=gtmAttr2PersistMask, gtmAttr2GtmSetsRecursion=gtmAttr2GtmSetsRecursion, gtmAttr2QosFactorLcs=gtmAttr2QosFactorLcs, gtmAttr2QosFactorRtt=gtmAttr2QosFactorRtt, gtmAttr2QosFactorHops=gtmAttr2QosFactorHops, gtmAttr2QosFactorHitRatio=gtmAttr2QosFactorHitRatio, gtmAttr2QosFactorPacketRate=gtmAttr2QosFactorPacketRate, gtmAttr2QosFactorBps=gtmAttr2QosFactorBps, gtmAttr2QosFactorVsCapacity=gtmAttr2QosFactorVsCapacity, gtmAttr2QosFactorTopology=gtmAttr2QosFactorTopology, gtmAttr2QosFactorConnRate=gtmAttr2QosFactorConnRate, gtmAttr2TimerRetryPathData=gtmAttr2TimerRetryPathData, gtmAttr2TimerGetAutoconfigData=gtmAttr2TimerGetAutoconfigData, gtmAttr2TimerPersistCache=gtmAttr2TimerPersistCache, gtmAttr2DefaultProbeLimit=gtmAttr2DefaultProbeLimit, gtmAttr2DownThreshold=gtmAttr2DownThreshold, gtmAttr2DownMultiple=gtmAttr2DownMultiple, gtmAttr2PathTtl=gtmAttr2PathTtl, gtmAttr2TraceTtl=gtmAttr2TraceTtl, gtmAttr2LdnsDuration=gtmAttr2LdnsDuration, gtmAttr2PathDuration=gtmAttr2PathDuration, gtmAttr2RttSampleCount=gtmAttr2RttSampleCount, gtmAttr2RttPacketLength=gtmAttr2RttPacketLength, gtmAttr2RttTimeout=gtmAttr2RttTimeout, gtmAttr2MaxMonReqs=gtmAttr2MaxMonReqs, gtmAttr2TraceroutePort=gtmAttr2TraceroutePort, gtmAttr2PathsNeverDie=gtmAttr2PathsNeverDie, gtmAttr2ProbeDisabledObjects=gtmAttr2ProbeDisabledObjects, gtmAttr2LinkLimitFactor=gtmAttr2LinkLimitFactor, gtmAttr2OverLimitLinkLimitFactor=gtmAttr2OverLimitLinkLimitFactor, gtmAttr2LinkPrepaidFactor=gtmAttr2LinkPrepaidFactor, gtmAttr2LinkCompensateInbound=gtmAttr2LinkCompensateInbound, gtmAttr2LinkCompensateOutbound=gtmAttr2LinkCompensateOutbound, gtmAttr2LinkCompensationHistory=gtmAttr2LinkCompensationHistory, gtmAttr2MaxLinkOverLimitCount=gtmAttr2MaxLinkOverLimitCount, gtmAttr2LowerBoundPctRow=gtmAttr2LowerBoundPctRow, gtmAttr2LowerBoundPctCol=gtmAttr2LowerBoundPctCol)
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmAttr2Autoconf=gtmAttr2Autoconf, gtmAttr2Autosync=gtmAttr2Autosync, gtmAttr2SyncNamedConf=gtmAttr2SyncNamedConf, gtmAttr2SyncGroup=gtmAttr2SyncGroup, gtmAttr2SyncTimeout=gtmAttr2SyncTimeout, gtmAttr2SyncZonesTimeout=gtmAttr2SyncZonesTimeout, gtmAttr2TimeTolerance=gtmAttr2TimeTolerance, gtmAttr2TopologyLongestMatch=gtmAttr2TopologyLongestMatch, gtmAttr2TopologyAclThreshold=gtmAttr2TopologyAclThreshold, gtmAttr2StaticPersistCidr=gtmAttr2StaticPersistCidr, gtmAttr2StaticPersistV6Cidr=gtmAttr2StaticPersistV6Cidr, gtmAttr2QosFactorVsScore=gtmAttr2QosFactorVsScore, gtmAttr2TimerSendKeepAlive=gtmAttr2TimerSendKeepAlive, gtmAttr2CertificateDepth=gtmAttr2CertificateDepth, gtmAttr2MaxMemoryUsage=gtmAttr2MaxMemoryUsage, gtmAttr2Name=gtmAttr2Name, gtmAttr2ForwardStatus=gtmAttr2ForwardStatus, gtmGlobalStats=gtmGlobalStats, gtmGlobalStat=gtmGlobalStat, gtmStatResetStats=gtmStatResetStats, gtmStatRequests=gtmStatRequests, gtmStatResolutions=gtmStatResolutions, gtmStatPersisted=gtmStatPersisted, gtmStatPreferred=gtmStatPreferred, gtmStatAlternate=gtmStatAlternate, gtmStatFallback=gtmStatFallback, gtmStatDropped=gtmStatDropped, gtmStatExplicitIp=gtmStatExplicitIp, gtmStatReturnToDns=gtmStatReturnToDns, gtmStatReconnects=gtmStatReconnects, gtmStatBytesReceived=gtmStatBytesReceived, gtmStatBytesSent=gtmStatBytesSent, gtmStatNumBacklogged=gtmStatNumBacklogged, gtmStatBytesDropped=gtmStatBytesDropped, gtmStatLdnses=gtmStatLdnses, gtmStatPaths=gtmStatPaths, gtmStatReturnFromDns=gtmStatReturnFromDns, gtmStatCnameResolutions=gtmStatCnameResolutions, gtmStatARequests=gtmStatARequests, gtmStatAaaaRequests=gtmStatAaaaRequests, gtmApplications=gtmApplications, gtmApplication=gtmApplication, gtmAppNumber=gtmAppNumber, gtmAppTable=gtmAppTable, gtmAppEntry=gtmAppEntry, gtmAppName=gtmAppName, gtmAppPersist=gtmAppPersist, gtmAppTtlPersist=gtmAppTtlPersist, gtmAppAvailability=gtmAppAvailability, gtmApplicationStatus=gtmApplicationStatus, gtmAppStatusNumber=gtmAppStatusNumber, gtmAppStatusTable=gtmAppStatusTable, gtmAppStatusEntry=gtmAppStatusEntry, gtmAppStatusName=gtmAppStatusName, gtmAppStatusAvailState=gtmAppStatusAvailState, gtmAppStatusEnabledState=gtmAppStatusEnabledState, gtmAppStatusParentType=gtmAppStatusParentType, gtmAppStatusDetailReason=gtmAppStatusDetailReason, gtmAppContextStat=gtmAppContextStat, gtmAppContStatNumber=gtmAppContStatNumber, gtmAppContStatTable=gtmAppContStatTable, gtmAppContStatEntry=gtmAppContStatEntry, gtmAppContStatAppName=gtmAppContStatAppName, gtmAppContStatType=gtmAppContStatType, gtmAppContStatName=gtmAppContStatName, gtmAppContStatNumAvail=gtmAppContStatNumAvail, gtmAppContStatAvailState=gtmAppContStatAvailState, gtmAppContStatEnabledState=gtmAppContStatEnabledState, gtmAppContStatParentType=gtmAppContStatParentType, gtmAppContStatDetailReason=gtmAppContStatDetailReason, gtmAppContextDisable=gtmAppContextDisable, gtmAppContDisNumber=gtmAppContDisNumber, gtmAppContDisTable=gtmAppContDisTable, gtmAppContDisEntry=gtmAppContDisEntry, gtmAppContDisAppName=gtmAppContDisAppName, gtmAppContDisType=gtmAppContDisType, gtmAppContDisName=gtmAppContDisName, gtmDataCenters=gtmDataCenters, gtmDataCenter=gtmDataCenter, gtmDcNumber=gtmDcNumber, gtmDcTable=gtmDcTable, gtmDcEntry=gtmDcEntry, gtmDcName=gtmDcName, gtmDcLocation=gtmDcLocation, gtmDcContact=gtmDcContact, gtmDcEnabled=gtmDcEnabled, gtmDataCenterStat=gtmDataCenterStat, gtmDcStatResetStats=gtmDcStatResetStats, gtmDcStatNumber=gtmDcStatNumber, gtmDcStatTable=gtmDcStatTable, gtmDcStatEntry=gtmDcStatEntry, gtmDcStatName=gtmDcStatName, gtmDcStatCpuUsage=gtmDcStatCpuUsage, gtmDcStatMemAvail=gtmDcStatMemAvail, gtmDcStatBitsPerSecIn=gtmDcStatBitsPerSecIn, gtmDcStatBitsPerSecOut=gtmDcStatBitsPerSecOut, gtmDcStatPktsPerSecIn=gtmDcStatPktsPerSecIn, gtmDcStatPktsPerSecOut=gtmDcStatPktsPerSecOut, gtmDcStatConnections=gtmDcStatConnections, gtmDcStatConnRate=gtmDcStatConnRate, gtmDataCenterStatus=gtmDataCenterStatus, gtmDcStatusNumber=gtmDcStatusNumber, gtmDcStatusTable=gtmDcStatusTable, gtmDcStatusEntry=gtmDcStatusEntry, gtmDcStatusName=gtmDcStatusName, gtmDcStatusAvailState=gtmDcStatusAvailState, gtmDcStatusEnabledState=gtmDcStatusEnabledState, gtmDcStatusParentType=gtmDcStatusParentType, gtmDcStatusDetailReason=gtmDcStatusDetailReason, gtmIps=gtmIps, gtmIp=gtmIp, gtmIpNumber=gtmIpNumber, gtmIpTable=gtmIpTable, gtmIpEntry=gtmIpEntry, gtmIpIpType=gtmIpIpType, gtmIpIp=gtmIpIp, gtmIpLinkName=gtmIpLinkName, gtmIpServerName=gtmIpServerName, gtmIpUnitId=gtmIpUnitId, gtmIpIpXlatedType=gtmIpIpXlatedType, gtmIpIpXlated=gtmIpIpXlated, gtmIpDeviceName=gtmIpDeviceName, gtmLinks=gtmLinks, gtmLink=gtmLink, gtmLinkNumber=gtmLinkNumber, gtmLinkTable=gtmLinkTable, gtmLinkEntry=gtmLinkEntry)
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmLinkName=gtmLinkName, gtmLinkDcName=gtmLinkDcName, gtmLinkIspName=gtmLinkIspName, gtmLinkUplinkAddressType=gtmLinkUplinkAddressType, gtmLinkUplinkAddress=gtmLinkUplinkAddress, gtmLinkLimitInCpuUsageEnabled=gtmLinkLimitInCpuUsageEnabled, gtmLinkLimitInMemAvailEnabled=gtmLinkLimitInMemAvailEnabled, gtmLinkLimitInBitsPerSecEnabled=gtmLinkLimitInBitsPerSecEnabled, gtmLinkLimitInPktsPerSecEnabled=gtmLinkLimitInPktsPerSecEnabled, gtmLinkLimitInConnEnabled=gtmLinkLimitInConnEnabled, gtmLinkLimitInConnPerSecEnabled=gtmLinkLimitInConnPerSecEnabled, gtmLinkLimitInCpuUsage=gtmLinkLimitInCpuUsage, gtmLinkLimitInMemAvail=gtmLinkLimitInMemAvail, gtmLinkLimitInBitsPerSec=gtmLinkLimitInBitsPerSec, gtmLinkLimitInPktsPerSec=gtmLinkLimitInPktsPerSec, gtmLinkLimitInConn=gtmLinkLimitInConn, gtmLinkLimitInConnPerSec=gtmLinkLimitInConnPerSec, gtmLinkLimitOutCpuUsageEnabled=gtmLinkLimitOutCpuUsageEnabled, gtmLinkLimitOutMemAvailEnabled=gtmLinkLimitOutMemAvailEnabled, gtmLinkLimitOutBitsPerSecEnabled=gtmLinkLimitOutBitsPerSecEnabled, gtmLinkLimitOutPktsPerSecEnabled=gtmLinkLimitOutPktsPerSecEnabled, gtmLinkLimitOutConnEnabled=gtmLinkLimitOutConnEnabled, gtmLinkLimitOutConnPerSecEnabled=gtmLinkLimitOutConnPerSecEnabled, gtmLinkLimitOutCpuUsage=gtmLinkLimitOutCpuUsage, gtmLinkLimitOutMemAvail=gtmLinkLimitOutMemAvail, gtmLinkLimitOutBitsPerSec=gtmLinkLimitOutBitsPerSec, gtmLinkLimitOutPktsPerSec=gtmLinkLimitOutPktsPerSec, gtmLinkLimitOutConn=gtmLinkLimitOutConn, gtmLinkLimitOutConnPerSec=gtmLinkLimitOutConnPerSec, gtmLinkLimitTotalCpuUsageEnabled=gtmLinkLimitTotalCpuUsageEnabled, gtmLinkLimitTotalMemAvailEnabled=gtmLinkLimitTotalMemAvailEnabled, gtmLinkLimitTotalBitsPerSecEnabled=gtmLinkLimitTotalBitsPerSecEnabled, gtmLinkLimitTotalPktsPerSecEnabled=gtmLinkLimitTotalPktsPerSecEnabled, gtmLinkLimitTotalConnEnabled=gtmLinkLimitTotalConnEnabled, gtmLinkLimitTotalConnPerSecEnabled=gtmLinkLimitTotalConnPerSecEnabled, gtmLinkLimitTotalCpuUsage=gtmLinkLimitTotalCpuUsage, gtmLinkLimitTotalMemAvail=gtmLinkLimitTotalMemAvail, gtmLinkLimitTotalBitsPerSec=gtmLinkLimitTotalBitsPerSec, gtmLinkLimitTotalPktsPerSec=gtmLinkLimitTotalPktsPerSec, gtmLinkLimitTotalConn=gtmLinkLimitTotalConn, gtmLinkLimitTotalConnPerSec=gtmLinkLimitTotalConnPerSec, gtmLinkMonitorRule=gtmLinkMonitorRule, gtmLinkDuplex=gtmLinkDuplex, gtmLinkEnabled=gtmLinkEnabled, gtmLinkRatio=gtmLinkRatio, gtmLinkPrepaid=gtmLinkPrepaid, gtmLinkPrepaidInDollars=gtmLinkPrepaidInDollars, gtmLinkWeightingType=gtmLinkWeightingType, gtmLinkCost=gtmLinkCost, gtmLinkCostNumber=gtmLinkCostNumber, gtmLinkCostTable=gtmLinkCostTable, gtmLinkCostEntry=gtmLinkCostEntry, gtmLinkCostName=gtmLinkCostName, gtmLinkCostIndex=gtmLinkCostIndex, gtmLinkCostUptoBps=gtmLinkCostUptoBps, gtmLinkCostDollarsPerMbps=gtmLinkCostDollarsPerMbps, gtmLinkStat=gtmLinkStat, gtmLinkStatResetStats=gtmLinkStatResetStats, gtmLinkStatNumber=gtmLinkStatNumber, gtmLinkStatTable=gtmLinkStatTable, gtmLinkStatEntry=gtmLinkStatEntry, gtmLinkStatName=gtmLinkStatName, gtmLinkStatRate=gtmLinkStatRate, gtmLinkStatRateIn=gtmLinkStatRateIn, gtmLinkStatRateOut=gtmLinkStatRateOut, gtmLinkStatRateNode=gtmLinkStatRateNode, gtmLinkStatRateNodeIn=gtmLinkStatRateNodeIn, gtmLinkStatRateNodeOut=gtmLinkStatRateNodeOut, gtmLinkStatRateVses=gtmLinkStatRateVses, gtmLinkStatRateVsesIn=gtmLinkStatRateVsesIn, gtmLinkStatRateVsesOut=gtmLinkStatRateVsesOut, gtmLinkStatLcsIn=gtmLinkStatLcsIn, gtmLinkStatLcsOut=gtmLinkStatLcsOut, gtmLinkStatPaths=gtmLinkStatPaths, gtmLinkStatus=gtmLinkStatus, gtmLinkStatusNumber=gtmLinkStatusNumber, gtmLinkStatusTable=gtmLinkStatusTable, gtmLinkStatusEntry=gtmLinkStatusEntry, gtmLinkStatusName=gtmLinkStatusName, gtmLinkStatusAvailState=gtmLinkStatusAvailState, gtmLinkStatusEnabledState=gtmLinkStatusEnabledState, gtmLinkStatusParentType=gtmLinkStatusParentType, gtmLinkStatusDetailReason=gtmLinkStatusDetailReason, gtmPools=gtmPools, gtmPool=gtmPool, gtmPoolNumber=gtmPoolNumber, gtmPoolTable=gtmPoolTable, gtmPoolEntry=gtmPoolEntry, gtmPoolName=gtmPoolName, gtmPoolTtl=gtmPoolTtl, gtmPoolEnabled=gtmPoolEnabled, gtmPoolVerifyMember=gtmPoolVerifyMember, gtmPoolDynamicRatio=gtmPoolDynamicRatio, gtmPoolAnswersToReturn=gtmPoolAnswersToReturn, gtmPoolLbMode=gtmPoolLbMode, gtmPoolAlternate=gtmPoolAlternate, gtmPoolFallback=gtmPoolFallback, gtmPoolManualResume=gtmPoolManualResume, gtmPoolQosCoeffRtt=gtmPoolQosCoeffRtt, gtmPoolQosCoeffHops=gtmPoolQosCoeffHops, gtmPoolQosCoeffTopology=gtmPoolQosCoeffTopology, gtmPoolQosCoeffHitRatio=gtmPoolQosCoeffHitRatio, gtmPoolQosCoeffPacketRate=gtmPoolQosCoeffPacketRate, gtmPoolQosCoeffVsCapacity=gtmPoolQosCoeffVsCapacity, gtmPoolQosCoeffBps=gtmPoolQosCoeffBps, gtmPoolQosCoeffLcs=gtmPoolQosCoeffLcs, gtmPoolQosCoeffConnRate=gtmPoolQosCoeffConnRate, gtmPoolFallbackIpType=gtmPoolFallbackIpType, gtmPoolFallbackIp=gtmPoolFallbackIp, gtmPoolCname=gtmPoolCname, gtmPoolLimitCpuUsageEnabled=gtmPoolLimitCpuUsageEnabled, gtmPoolLimitMemAvailEnabled=gtmPoolLimitMemAvailEnabled, gtmPoolLimitBitsPerSecEnabled=gtmPoolLimitBitsPerSecEnabled, gtmPoolLimitPktsPerSecEnabled=gtmPoolLimitPktsPerSecEnabled, gtmPoolLimitConnEnabled=gtmPoolLimitConnEnabled, gtmPoolLimitConnPerSecEnabled=gtmPoolLimitConnPerSecEnabled, gtmPoolLimitCpuUsage=gtmPoolLimitCpuUsage, gtmPoolLimitMemAvail=gtmPoolLimitMemAvail, gtmPoolLimitBitsPerSec=gtmPoolLimitBitsPerSec, gtmPoolLimitPktsPerSec=gtmPoolLimitPktsPerSec, gtmPoolLimitConn=gtmPoolLimitConn, gtmPoolLimitConnPerSec=gtmPoolLimitConnPerSec, gtmPoolMonitorRule=gtmPoolMonitorRule, gtmPoolQosCoeffVsScore=gtmPoolQosCoeffVsScore, gtmPoolFallbackIpv6Type=gtmPoolFallbackIpv6Type, gtmPoolFallbackIpv6=gtmPoolFallbackIpv6, gtmPoolStat=gtmPoolStat)
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmPoolStatResetStats=gtmPoolStatResetStats, gtmPoolStatNumber=gtmPoolStatNumber, gtmPoolStatTable=gtmPoolStatTable, gtmPoolStatEntry=gtmPoolStatEntry, gtmPoolStatName=gtmPoolStatName, gtmPoolStatPreferred=gtmPoolStatPreferred, gtmPoolStatAlternate=gtmPoolStatAlternate, gtmPoolStatFallback=gtmPoolStatFallback, gtmPoolStatDropped=gtmPoolStatDropped, gtmPoolStatExplicitIp=gtmPoolStatExplicitIp, gtmPoolStatReturnToDns=gtmPoolStatReturnToDns, gtmPoolStatReturnFromDns=gtmPoolStatReturnFromDns, gtmPoolStatCnameResolutions=gtmPoolStatCnameResolutions, gtmPoolStatus=gtmPoolStatus, gtmPoolStatusNumber=gtmPoolStatusNumber, gtmPoolStatusTable=gtmPoolStatusTable, gtmPoolStatusEntry=gtmPoolStatusEntry, gtmPoolStatusName=gtmPoolStatusName, gtmPoolStatusAvailState=gtmPoolStatusAvailState, gtmPoolStatusEnabledState=gtmPoolStatusEnabledState, gtmPoolStatusParentType=gtmPoolStatusParentType, gtmPoolStatusDetailReason=gtmPoolStatusDetailReason, gtmPoolMember=gtmPoolMember, gtmPoolMbrNumber=gtmPoolMbrNumber, gtmPoolMbrTable=gtmPoolMbrTable, gtmPoolMbrEntry=gtmPoolMbrEntry, gtmPoolMbrPoolName=gtmPoolMbrPoolName, gtmPoolMbrIpType=gtmPoolMbrIpType, gtmPoolMbrIp=gtmPoolMbrIp, gtmPoolMbrPort=gtmPoolMbrPort, gtmPoolMbrVsName=gtmPoolMbrVsName, gtmPoolMbrOrder=gtmPoolMbrOrder, gtmPoolMbrLimitCpuUsageEnabled=gtmPoolMbrLimitCpuUsageEnabled, gtmPoolMbrLimitMemAvailEnabled=gtmPoolMbrLimitMemAvailEnabled, gtmPoolMbrLimitBitsPerSecEnabled=gtmPoolMbrLimitBitsPerSecEnabled, gtmPoolMbrLimitPktsPerSecEnabled=gtmPoolMbrLimitPktsPerSecEnabled, gtmPoolMbrLimitConnEnabled=gtmPoolMbrLimitConnEnabled, gtmPoolMbrLimitConnPerSecEnabled=gtmPoolMbrLimitConnPerSecEnabled, gtmPoolMbrLimitCpuUsage=gtmPoolMbrLimitCpuUsage, gtmPoolMbrLimitMemAvail=gtmPoolMbrLimitMemAvail, gtmPoolMbrLimitBitsPerSec=gtmPoolMbrLimitBitsPerSec, gtmPoolMbrLimitPktsPerSec=gtmPoolMbrLimitPktsPerSec, gtmPoolMbrLimitConn=gtmPoolMbrLimitConn, gtmPoolMbrLimitConnPerSec=gtmPoolMbrLimitConnPerSec, gtmPoolMbrMonitorRule=gtmPoolMbrMonitorRule, gtmPoolMbrEnabled=gtmPoolMbrEnabled, gtmPoolMbrRatio=gtmPoolMbrRatio, gtmPoolMbrServerName=gtmPoolMbrServerName, gtmPoolMemberDepends=gtmPoolMemberDepends, gtmPoolMbrDepsNumber=gtmPoolMbrDepsNumber, gtmPoolMbrDepsTable=gtmPoolMbrDepsTable, gtmPoolMbrDepsEntry=gtmPoolMbrDepsEntry, gtmPoolMbrDepsIpType=gtmPoolMbrDepsIpType, gtmPoolMbrDepsIp=gtmPoolMbrDepsIp, gtmPoolMbrDepsPort=gtmPoolMbrDepsPort, gtmPoolMbrDepsPoolName=gtmPoolMbrDepsPoolName, gtmPoolMbrDepsVipType=gtmPoolMbrDepsVipType, gtmPoolMbrDepsVip=gtmPoolMbrDepsVip, gtmPoolMbrDepsVport=gtmPoolMbrDepsVport, gtmPoolMbrDepsServerName=gtmPoolMbrDepsServerName, gtmPoolMbrDepsVsName=gtmPoolMbrDepsVsName, gtmPoolMbrDepsDependServerName=gtmPoolMbrDepsDependServerName, gtmPoolMbrDepsDependVsName=gtmPoolMbrDepsDependVsName, gtmPoolMemberStat=gtmPoolMemberStat, gtmPoolMbrStatResetStats=gtmPoolMbrStatResetStats, gtmPoolMbrStatNumber=gtmPoolMbrStatNumber, gtmPoolMbrStatTable=gtmPoolMbrStatTable, gtmPoolMbrStatEntry=gtmPoolMbrStatEntry, gtmPoolMbrStatPoolName=gtmPoolMbrStatPoolName, gtmPoolMbrStatIpType=gtmPoolMbrStatIpType, gtmPoolMbrStatIp=gtmPoolMbrStatIp, gtmPoolMbrStatPort=gtmPoolMbrStatPort, gtmPoolMbrStatPreferred=gtmPoolMbrStatPreferred, gtmPoolMbrStatAlternate=gtmPoolMbrStatAlternate, gtmPoolMbrStatFallback=gtmPoolMbrStatFallback, gtmPoolMbrStatServerName=gtmPoolMbrStatServerName, gtmPoolMbrStatVsName=gtmPoolMbrStatVsName, gtmPoolMemberStatus=gtmPoolMemberStatus, gtmPoolMbrStatusNumber=gtmPoolMbrStatusNumber, gtmPoolMbrStatusTable=gtmPoolMbrStatusTable, gtmPoolMbrStatusEntry=gtmPoolMbrStatusEntry, gtmPoolMbrStatusPoolName=gtmPoolMbrStatusPoolName, gtmPoolMbrStatusIpType=gtmPoolMbrStatusIpType, gtmPoolMbrStatusIp=gtmPoolMbrStatusIp, gtmPoolMbrStatusPort=gtmPoolMbrStatusPort, gtmPoolMbrStatusAvailState=gtmPoolMbrStatusAvailState, gtmPoolMbrStatusEnabledState=gtmPoolMbrStatusEnabledState, gtmPoolMbrStatusParentType=gtmPoolMbrStatusParentType, gtmPoolMbrStatusDetailReason=gtmPoolMbrStatusDetailReason, gtmPoolMbrStatusVsName=gtmPoolMbrStatusVsName, gtmPoolMbrStatusServerName=gtmPoolMbrStatusServerName, gtmRegions=gtmRegions, gtmRegionEntry=gtmRegionEntry, gtmRegionEntryNumber=gtmRegionEntryNumber, gtmRegionEntryTable=gtmRegionEntryTable, gtmRegionEntryEntry=gtmRegionEntryEntry, gtmRegionEntryName=gtmRegionEntryName, gtmRegionEntryRegionDbType=gtmRegionEntryRegionDbType, gtmRegItem=gtmRegItem, gtmRegItemNumber=gtmRegItemNumber, gtmRegItemTable=gtmRegItemTable, gtmRegItemEntry=gtmRegItemEntry, gtmRegItemRegionDbType=gtmRegItemRegionDbType, gtmRegItemRegionName=gtmRegItemRegionName, gtmRegItemType=gtmRegItemType, gtmRegItemNegate=gtmRegItemNegate, gtmRegItemRegEntry=gtmRegItemRegEntry, gtmRules=gtmRules, gtmRule=gtmRule, gtmRuleNumber=gtmRuleNumber, gtmRuleTable=gtmRuleTable, gtmRuleEntry=gtmRuleEntry, gtmRuleName=gtmRuleName, gtmRuleDefinition=gtmRuleDefinition, gtmRuleConfigSource=gtmRuleConfigSource, gtmRuleEvent=gtmRuleEvent, gtmRuleEventNumber=gtmRuleEventNumber, gtmRuleEventTable=gtmRuleEventTable, gtmRuleEventEntry=gtmRuleEventEntry, gtmRuleEventName=gtmRuleEventName, gtmRuleEventEventType=gtmRuleEventEventType, gtmRuleEventPriority=gtmRuleEventPriority, gtmRuleEventScript=gtmRuleEventScript, gtmRuleEventStat=gtmRuleEventStat, gtmRuleEventStatResetStats=gtmRuleEventStatResetStats, gtmRuleEventStatNumber=gtmRuleEventStatNumber, gtmRuleEventStatTable=gtmRuleEventStatTable)
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmRuleEventStatEntry=gtmRuleEventStatEntry, gtmRuleEventStatName=gtmRuleEventStatName, gtmRuleEventStatEventType=gtmRuleEventStatEventType, gtmRuleEventStatPriority=gtmRuleEventStatPriority, gtmRuleEventStatFailures=gtmRuleEventStatFailures, gtmRuleEventStatAborts=gtmRuleEventStatAborts, gtmRuleEventStatTotalExecutions=gtmRuleEventStatTotalExecutions, gtmServers=gtmServers, gtmServer=gtmServer, gtmServerNumber=gtmServerNumber, gtmServerTable=gtmServerTable, gtmServerEntry=gtmServerEntry, gtmServerName=gtmServerName, gtmServerDcName=gtmServerDcName, gtmServerType=gtmServerType, gtmServerEnabled=gtmServerEnabled, gtmServerLimitCpuUsageEnabled=gtmServerLimitCpuUsageEnabled, gtmServerLimitMemAvailEnabled=gtmServerLimitMemAvailEnabled, gtmServerLimitBitsPerSecEnabled=gtmServerLimitBitsPerSecEnabled, gtmServerLimitPktsPerSecEnabled=gtmServerLimitPktsPerSecEnabled, gtmServerLimitConnEnabled=gtmServerLimitConnEnabled, gtmServerLimitConnPerSecEnabled=gtmServerLimitConnPerSecEnabled, gtmServerLimitCpuUsage=gtmServerLimitCpuUsage, gtmServerLimitMemAvail=gtmServerLimitMemAvail, gtmServerLimitBitsPerSec=gtmServerLimitBitsPerSec, gtmServerLimitPktsPerSec=gtmServerLimitPktsPerSec, gtmServerLimitConn=gtmServerLimitConn, gtmServerLimitConnPerSec=gtmServerLimitConnPerSec, gtmServerProberType=gtmServerProberType, gtmServerProber=gtmServerProber, gtmServerMonitorRule=gtmServerMonitorRule, gtmServerAllowSvcChk=gtmServerAllowSvcChk, gtmServerAllowPath=gtmServerAllowPath, gtmServerAllowSnmp=gtmServerAllowSnmp, gtmServerAutoconfState=gtmServerAutoconfState, gtmServerLinkAutoconfState=gtmServerLinkAutoconfState, gtmServerStat=gtmServerStat, gtmServerStatResetStats=gtmServerStatResetStats, gtmServerStatNumber=gtmServerStatNumber, gtmServerStatTable=gtmServerStatTable, gtmServerStatEntry=gtmServerStatEntry, gtmServerStatName=gtmServerStatName, gtmServerStatUnitId=gtmServerStatUnitId, gtmServerStatVsPicks=gtmServerStatVsPicks, gtmServerStatCpuUsage=gtmServerStatCpuUsage, gtmServerStatMemAvail=gtmServerStatMemAvail, gtmServerStatBitsPerSecIn=gtmServerStatBitsPerSecIn, gtmServerStatBitsPerSecOut=gtmServerStatBitsPerSecOut, gtmServerStatPktsPerSecIn=gtmServerStatPktsPerSecIn, gtmServerStatPktsPerSecOut=gtmServerStatPktsPerSecOut, gtmServerStatConnections=gtmServerStatConnections, gtmServerStatConnRate=gtmServerStatConnRate, gtmServerStatus=gtmServerStatus, gtmServerStatusNumber=gtmServerStatusNumber, gtmServerStatusTable=gtmServerStatusTable, gtmServerStatusEntry=gtmServerStatusEntry, gtmServerStatusName=gtmServerStatusName, gtmServerStatusAvailState=gtmServerStatusAvailState, gtmServerStatusEnabledState=gtmServerStatusEnabledState, gtmServerStatusParentType=gtmServerStatusParentType, gtmServerStatusDetailReason=gtmServerStatusDetailReason, gtmServerStat2=gtmServerStat2, gtmServerStat2ResetStats=gtmServerStat2ResetStats, gtmServerStat2Number=gtmServerStat2Number, gtmServerStat2Table=gtmServerStat2Table, gtmServerStat2Entry=gtmServerStat2Entry, gtmServerStat2Name=gtmServerStat2Name, gtmServerStat2UnitId=gtmServerStat2UnitId, gtmServerStat2VsPicks=gtmServerStat2VsPicks, gtmServerStat2CpuUsage=gtmServerStat2CpuUsage, gtmServerStat2MemAvail=gtmServerStat2MemAvail, gtmServerStat2BitsPerSecIn=gtmServerStat2BitsPerSecIn, gtmServerStat2BitsPerSecOut=gtmServerStat2BitsPerSecOut, gtmServerStat2PktsPerSecIn=gtmServerStat2PktsPerSecIn, gtmServerStat2PktsPerSecOut=gtmServerStat2PktsPerSecOut, gtmServerStat2Connections=gtmServerStat2Connections, gtmServerStat2ConnRate=gtmServerStat2ConnRate, gtmTopologies=gtmTopologies, gtmTopItem=gtmTopItem, gtmTopItemNumber=gtmTopItemNumber, gtmTopItemTable=gtmTopItemTable, gtmTopItemEntry=gtmTopItemEntry, gtmTopItemLdnsType=gtmTopItemLdnsType, gtmTopItemLdnsNegate=gtmTopItemLdnsNegate, gtmTopItemLdnsEntry=gtmTopItemLdnsEntry, gtmTopItemServerType=gtmTopItemServerType, gtmTopItemServerNegate=gtmTopItemServerNegate, gtmTopItemServerEntry=gtmTopItemServerEntry, gtmTopItemWeight=gtmTopItemWeight, gtmTopItemOrder=gtmTopItemOrder, gtmVirtualServers=gtmVirtualServers, gtmVirtualServ=gtmVirtualServ, gtmVsNumber=gtmVsNumber, gtmVsTable=gtmVsTable, gtmVsEntry=gtmVsEntry, gtmVsIpType=gtmVsIpType, gtmVsIp=gtmVsIp, gtmVsPort=gtmVsPort, gtmVsName=gtmVsName, gtmVsServerName=gtmVsServerName, gtmVsIpXlatedType=gtmVsIpXlatedType, gtmVsIpXlated=gtmVsIpXlated, gtmVsPortXlated=gtmVsPortXlated, gtmVsLimitCpuUsageEnabled=gtmVsLimitCpuUsageEnabled, gtmVsLimitMemAvailEnabled=gtmVsLimitMemAvailEnabled, gtmVsLimitBitsPerSecEnabled=gtmVsLimitBitsPerSecEnabled, gtmVsLimitPktsPerSecEnabled=gtmVsLimitPktsPerSecEnabled, gtmVsLimitConnEnabled=gtmVsLimitConnEnabled, gtmVsLimitConnPerSecEnabled=gtmVsLimitConnPerSecEnabled, gtmVsLimitCpuUsage=gtmVsLimitCpuUsage, gtmVsLimitMemAvail=gtmVsLimitMemAvail, gtmVsLimitBitsPerSec=gtmVsLimitBitsPerSec, gtmVsLimitPktsPerSec=gtmVsLimitPktsPerSec, gtmVsLimitConn=gtmVsLimitConn, gtmVsLimitConnPerSec=gtmVsLimitConnPerSec, gtmVsMonitorRule=gtmVsMonitorRule, gtmVsEnabled=gtmVsEnabled, gtmVsLinkName=gtmVsLinkName, gtmVirtualServDepends=gtmVirtualServDepends, gtmVsDepsNumber=gtmVsDepsNumber, gtmVsDepsTable=gtmVsDepsTable, gtmVsDepsEntry=gtmVsDepsEntry, gtmVsDepsIpType=gtmVsDepsIpType, gtmVsDepsIp=gtmVsDepsIp, gtmVsDepsPort=gtmVsDepsPort, gtmVsDepsVipType=gtmVsDepsVipType, gtmVsDepsVip=gtmVsDepsVip)
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmVsDepsVport=gtmVsDepsVport, gtmVsDepsServerName=gtmVsDepsServerName, gtmVsDepsVsName=gtmVsDepsVsName, gtmVsDepsDependServerName=gtmVsDepsDependServerName, gtmVsDepsDependVsName=gtmVsDepsDependVsName, gtmVirtualServStat=gtmVirtualServStat, gtmVsStatResetStats=gtmVsStatResetStats, gtmVsStatNumber=gtmVsStatNumber, gtmVsStatTable=gtmVsStatTable, gtmVsStatEntry=gtmVsStatEntry, gtmVsStatIpType=gtmVsStatIpType, gtmVsStatIp=gtmVsStatIp, gtmVsStatPort=gtmVsStatPort, gtmVsStatName=gtmVsStatName, gtmVsStatCpuUsage=gtmVsStatCpuUsage, gtmVsStatMemAvail=gtmVsStatMemAvail, gtmVsStatBitsPerSecIn=gtmVsStatBitsPerSecIn, gtmVsStatBitsPerSecOut=gtmVsStatBitsPerSecOut, gtmVsStatPktsPerSecIn=gtmVsStatPktsPerSecIn, gtmVsStatPktsPerSecOut=gtmVsStatPktsPerSecOut, gtmVsStatConnections=gtmVsStatConnections, gtmVsStatConnRate=gtmVsStatConnRate, gtmVsStatVsScore=gtmVsStatVsScore, gtmVsStatServerName=gtmVsStatServerName, gtmVirtualServStatus=gtmVirtualServStatus, gtmVsStatusNumber=gtmVsStatusNumber, gtmVsStatusTable=gtmVsStatusTable, gtmVsStatusEntry=gtmVsStatusEntry, gtmVsStatusIpType=gtmVsStatusIpType, gtmVsStatusIp=gtmVsStatusIp, gtmVsStatusPort=gtmVsStatusPort, gtmVsStatusAvailState=gtmVsStatusAvailState, gtmVsStatusEnabledState=gtmVsStatusEnabledState, gtmVsStatusParentType=gtmVsStatusParentType, gtmVsStatusDetailReason=gtmVsStatusDetailReason, gtmVsStatusVsName=gtmVsStatusVsName, gtmVsStatusServerName=gtmVsStatusServerName, gtmWideips=gtmWideips, gtmWideip=gtmWideip, gtmWideipNumber=gtmWideipNumber, gtmWideipTable=gtmWideipTable, gtmWideipEntry=gtmWideipEntry, gtmWideipName=gtmWideipName, gtmWideipPersist=gtmWideipPersist, gtmWideipTtlPersist=gtmWideipTtlPersist, gtmWideipEnabled=gtmWideipEnabled, gtmWideipLbmodePool=gtmWideipLbmodePool, gtmWideipApplication=gtmWideipApplication, gtmWideipLastResortPool=gtmWideipLastResortPool, gtmWideipIpv6Noerror=gtmWideipIpv6Noerror, gtmWideipLoadBalancingDecisionLogVerbosity=gtmWideipLoadBalancingDecisionLogVerbosity, gtmWideipStat=gtmWideipStat, gtmWideipStatResetStats=gtmWideipStatResetStats, gtmWideipStatNumber=gtmWideipStatNumber, gtmWideipStatTable=gtmWideipStatTable, gtmWideipStatEntry=gtmWideipStatEntry, gtmWideipStatName=gtmWideipStatName, gtmWideipStatRequests=gtmWideipStatRequests, gtmWideipStatResolutions=gtmWideipStatResolutions, gtmWideipStatPersisted=gtmWideipStatPersisted, gtmWideipStatPreferred=gtmWideipStatPreferred, gtmWideipStatFallback=gtmWideipStatFallback, gtmWideipStatDropped=gtmWideipStatDropped, gtmWideipStatExplicitIp=gtmWideipStatExplicitIp, gtmWideipStatReturnToDns=gtmWideipStatReturnToDns, gtmWideipStatReturnFromDns=gtmWideipStatReturnFromDns, gtmWideipStatCnameResolutions=gtmWideipStatCnameResolutions, gtmWideipStatARequests=gtmWideipStatARequests, gtmWideipStatAaaaRequests=gtmWideipStatAaaaRequests, gtmWideipStatus=gtmWideipStatus, gtmWideipStatusNumber=gtmWideipStatusNumber, gtmWideipStatusTable=gtmWideipStatusTable, gtmWideipStatusEntry=gtmWideipStatusEntry, gtmWideipStatusName=gtmWideipStatusName, gtmWideipStatusAvailState=gtmWideipStatusAvailState, gtmWideipStatusEnabledState=gtmWideipStatusEnabledState, gtmWideipStatusParentType=gtmWideipStatusParentType, gtmWideipStatusDetailReason=gtmWideipStatusDetailReason, gtmWideipAlias=gtmWideipAlias, gtmWideipAliasNumber=gtmWideipAliasNumber, gtmWideipAliasTable=gtmWideipAliasTable, gtmWideipAliasEntry=gtmWideipAliasEntry, gtmWideipAliasWipName=gtmWideipAliasWipName, gtmWideipAliasName=gtmWideipAliasName, gtmWideipPool=gtmWideipPool, gtmWideipPoolNumber=gtmWideipPoolNumber, gtmWideipPoolTable=gtmWideipPoolTable, gtmWideipPoolEntry=gtmWideipPoolEntry, gtmWideipPoolWipName=gtmWideipPoolWipName, gtmWideipPoolPoolName=gtmWideipPoolPoolName, gtmWideipPoolOrder=gtmWideipPoolOrder, gtmWideipPoolRatio=gtmWideipPoolRatio, gtmWideipRule=gtmWideipRule, gtmWideipRuleNumber=gtmWideipRuleNumber, gtmWideipRuleTable=gtmWideipRuleTable, gtmWideipRuleEntry=gtmWideipRuleEntry, gtmWideipRuleWipName=gtmWideipRuleWipName, gtmWideipRuleRuleName=gtmWideipRuleRuleName, gtmWideipRulePriority=gtmWideipRulePriority, gtmProberPools=gtmProberPools, gtmProberPool=gtmProberPool, gtmProberPoolNumber=gtmProberPoolNumber, gtmProberPoolTable=gtmProberPoolTable, gtmProberPoolEntry=gtmProberPoolEntry, gtmProberPoolName=gtmProberPoolName, gtmProberPoolLbMode=gtmProberPoolLbMode, gtmProberPoolEnabled=gtmProberPoolEnabled, gtmProberPoolStat=gtmProberPoolStat, gtmProberPoolStatResetStats=gtmProberPoolStatResetStats, gtmProberPoolStatNumber=gtmProberPoolStatNumber, gtmProberPoolStatTable=gtmProberPoolStatTable, gtmProberPoolStatEntry=gtmProberPoolStatEntry, gtmProberPoolStatName=gtmProberPoolStatName, gtmProberPoolStatTotalProbes=gtmProberPoolStatTotalProbes, gtmProberPoolStatSuccessfulProbes=gtmProberPoolStatSuccessfulProbes, gtmProberPoolStatFailedProbes=gtmProberPoolStatFailedProbes, gtmProberPoolStatus=gtmProberPoolStatus, gtmProberPoolStatusNumber=gtmProberPoolStatusNumber, gtmProberPoolStatusTable=gtmProberPoolStatusTable, gtmProberPoolStatusEntry=gtmProberPoolStatusEntry, gtmProberPoolStatusName=gtmProberPoolStatusName, gtmProberPoolStatusAvailState=gtmProberPoolStatusAvailState, gtmProberPoolStatusEnabledState=gtmProberPoolStatusEnabledState, gtmProberPoolStatusDetailReason=gtmProberPoolStatusDetailReason, gtmProberPoolMember=gtmProberPoolMember, gtmProberPoolMbrNumber=gtmProberPoolMbrNumber, gtmProberPoolMbrTable=gtmProberPoolMbrTable)
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmProberPoolMbrEntry=gtmProberPoolMbrEntry, gtmProberPoolMbrPoolName=gtmProberPoolMbrPoolName, gtmProberPoolMbrServerName=gtmProberPoolMbrServerName, gtmProberPoolMbrPmbrOrder=gtmProberPoolMbrPmbrOrder, gtmProberPoolMbrEnabled=gtmProberPoolMbrEnabled, gtmProberPoolMemberStat=gtmProberPoolMemberStat, gtmProberPoolMbrStatResetStats=gtmProberPoolMbrStatResetStats, gtmProberPoolMbrStatNumber=gtmProberPoolMbrStatNumber, gtmProberPoolMbrStatTable=gtmProberPoolMbrStatTable, gtmProberPoolMbrStatEntry=gtmProberPoolMbrStatEntry, gtmProberPoolMbrStatPoolName=gtmProberPoolMbrStatPoolName, gtmProberPoolMbrStatServerName=gtmProberPoolMbrStatServerName, gtmProberPoolMbrStatTotalProbes=gtmProberPoolMbrStatTotalProbes, gtmProberPoolMbrStatSuccessfulProbes=gtmProberPoolMbrStatSuccessfulProbes, gtmProberPoolMbrStatFailedProbes=gtmProberPoolMbrStatFailedProbes, gtmProberPoolMemberStatus=gtmProberPoolMemberStatus, gtmProberPoolMbrStatusNumber=gtmProberPoolMbrStatusNumber, gtmProberPoolMbrStatusTable=gtmProberPoolMbrStatusTable, gtmProberPoolMbrStatusEntry=gtmProberPoolMbrStatusEntry, gtmProberPoolMbrStatusPoolName=gtmProberPoolMbrStatusPoolName, gtmProberPoolMbrStatusServerName=gtmProberPoolMbrStatusServerName, gtmProberPoolMbrStatusAvailState=gtmProberPoolMbrStatusAvailState, gtmProberPoolMbrStatusEnabledState=gtmProberPoolMbrStatusEnabledState, gtmProberPoolMbrStatusDetailReason=gtmProberPoolMbrStatusDetailReason, bigipGlobalTMGroups=bigipGlobalTMGroups)

# Groups
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", gtmAttrGroup=gtmAttrGroup, gtmGlobalLdnsProbeProtoGroup=gtmGlobalLdnsProbeProtoGroup, gtmStatGroup=gtmStatGroup, gtmAppGroup=gtmAppGroup, gtmAppStatusGroup=gtmAppStatusGroup, gtmAppContStatGroup=gtmAppContStatGroup, gtmAppContDisGroup=gtmAppContDisGroup, gtmDcGroup=gtmDcGroup, gtmDcStatGroup=gtmDcStatGroup, gtmDcStatusGroup=gtmDcStatusGroup, gtmIpGroup=gtmIpGroup, gtmLinkGroup=gtmLinkGroup, gtmLinkCostGroup=gtmLinkCostGroup, gtmLinkStatGroup=gtmLinkStatGroup, gtmLinkStatusGroup=gtmLinkStatusGroup, gtmPoolGroup=gtmPoolGroup, gtmPoolStatGroup=gtmPoolStatGroup, gtmPoolMbrGroup=gtmPoolMbrGroup, gtmPoolStatusGroup=gtmPoolStatusGroup, gtmPoolMbrDepsGroup=gtmPoolMbrDepsGroup, gtmPoolMbrStatGroup=gtmPoolMbrStatGroup, gtmPoolMbrStatusGroup=gtmPoolMbrStatusGroup, gtmRegionEntryGroup=gtmRegionEntryGroup, gtmRegItemGroup=gtmRegItemGroup, gtmRuleGroup=gtmRuleGroup, gtmRuleEventGroup=gtmRuleEventGroup, gtmRuleEventStatGroup=gtmRuleEventStatGroup, gtmServerGroup=gtmServerGroup, gtmServerStatGroup=gtmServerStatGroup, gtmServerStatusGroup=gtmServerStatusGroup, gtmTopItemGroup=gtmTopItemGroup, gtmVsGroup=gtmVsGroup, gtmVsDepsGroup=gtmVsDepsGroup, gtmVsStatGroup=gtmVsStatGroup, gtmVsStatusGroup=gtmVsStatusGroup, gtmWideipGroup=gtmWideipGroup, gtmWideipStatGroup=gtmWideipStatGroup, gtmWideipStatusGroup=gtmWideipStatusGroup, gtmWideipAliasGroup=gtmWideipAliasGroup, gtmWideipPoolGroup=gtmWideipPoolGroup, gtmWideipRuleGroup=gtmWideipRuleGroup, gtmServerStat2Group=gtmServerStat2Group, gtmProberPoolGroup=gtmProberPoolGroup, gtmProberPoolStatGroup=gtmProberPoolStatGroup, gtmProberPoolStatusGroup=gtmProberPoolStatusGroup, gtmProberPoolMbrGroup=gtmProberPoolMbrGroup, gtmProberPoolMbrStatGroup=gtmProberPoolMbrStatGroup, gtmProberPoolMbrStatusGroup=gtmProberPoolMbrStatusGroup, gtmAttr2Group=gtmAttr2Group)

# Compliances
mibBuilder.exportSymbols("F5-BIGIP-GLOBAL-MIB", bigipGlobalTMCompliance=bigipGlobalTMCompliance)
