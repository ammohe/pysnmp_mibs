# PySNMP SMI module. Autogenerated from smidump -f python CISCO-VOICE-COMMON-DIAL-CONTROL-MIB
# by libsmi2pysnmp-0.1.3 at Fri Aug  1 21:58:02 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( cCallHistoryIndex, ) = mibBuilder.importSymbols("CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex")
( ciscoExperiment, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
( callActiveIndex, callActiveSetupTime, ) = mibBuilder.importSymbols("DIAL-CONTROL-MIB", "callActiveIndex", "callActiveSetupTime")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
( TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue")

# Types

class CvcCallReferenceIdOrZero(Unsigned32):
    pass

class CvcCoderTypeRate(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(36,3,30,24,25,17,23,19,21,31,7,20,14,4,28,39,27,5,37,26,40,35,13,12,6,18,10,15,38,16,32,1,34,29,2,22,33,11,)
    namedValues = NamedValues(("other", 1), ("g729r8000", 10), ("g729Ar8000", 11), ("g726r16000", 12), ("g726r24000", 13), ("g726r32000", 14), ("g711ulawr64000", 15), ("g711Alawr64000", 16), ("g728r16000", 17), ("g723r6300", 18), ("g723r5300", 19), ("fax2400", 2), ("gsmr13200", 20), ("g729Br8000", 21), ("g729ABr8000", 22), ("g723Ar6300", 23), ("g723Ar5300", 24), ("ietfg729r8000", 25), ("gsmeEr12200", 26), ("clearChannel", 27), ("g726r40000", 28), ("llcc", 29), ("fax4800", 3), ("gsmAmrNb", 30), ("g722", 31), ("iLBC", 32), ("iLBCr15200", 33), ("iLBCr13330", 34), ("g722r4800", 35), ("g722r5600", 36), ("g722r6400", 37), ("iSAC", 38), ("aaclc", 39), ("fax7200", 4), ("aacld", 40), ("fax9600", 5), ("fax14400", 6), ("fax12000", 7), )
    
class CvcFaxTransmitRate(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,2,8,5,6,1,7,3,)
    namedValues = NamedValues(("none", 1), ("voiceRate", 2), ("fax2400", 3), ("fax4800", 4), ("fax7200", 5), ("fax9600", 6), ("fax14400", 7), ("fax12000", 8), )
    
class CvcGUid(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,16)
    
class CvcH320CallType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,1,2,)
    namedValues = NamedValues(("none", 0), ("primary", 1), ("secondary", 2), )
    
class CvcInBandSignaling(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(5,2,1,3,4,)
    namedValues = NamedValues(("cas", 1), ("none", 2), ("cept", 3), ("transparent", 4), ("gr303", 5), )
    
class CvcSpeechCoderRate(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(26,21,15,8,14,12,11,5,16,19,29,18,27,17,30,25,4,3,2,9,1,6,28,7,22,24,20,13,23,10,)
    namedValues = NamedValues(("g729r8000", 1), ("g723r5300", 10), ("gsmr13200", 11), ("g729Br8000", 12), ("g729ABr8000", 13), ("g723Ar6300", 14), ("g723Ar5300", 15), ("g729IETFr8000", 16), ("gsmeEr12200", 17), ("clearChannel", 18), ("g726r40000", 19), ("g729Ar8000", 2), ("llcc", 20), ("gsmAmrNb", 21), ("iLBC", 22), ("iLBCr15200", 23), ("iLBCr13330", 24), ("g722r4800", 25), ("g722r5600", 26), ("g722r6400", 27), ("iSAC", 28), ("aaclc", 29), ("g726r16000", 3), ("aacld", 30), ("g726r24000", 4), ("g726r32000", 5), ("g711ulawr64000", 6), ("g711Alawr64000", 7), ("g728r16000", 8), ("g723r6300", 9), )
    
class CvcVideoCoderRate(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,3,4,1,2,)
    namedValues = NamedValues(("none", 0), ("h261", 1), ("h263", 2), ("h263plus", 3), ("h264", 4), )
    

# Objects

ciscoVoiceCommonDialControlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 55)).setRevisions(("2010-06-30 00:00","2009-03-18 00:00","2008-07-02 00:00","2007-06-26 00:00","2005-08-16 00:00","2005-03-06 00:00","2003-03-11 00:00","2001-10-06 00:00","2001-09-05 00:00","2000-07-22 00:00",))
if mibBuilder.loadTexts: ciscoVoiceCommonDialControlMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoVoiceCommonDialControlMIB.setContactInfo("Cisco Systems\nCustomer Service\n\nPostal: 170 W. Tasman Drive\nSan Jose, CA  95134\nUSA\n\nTel: +1 800 553-NETS\n\nE-mail: cs-voice@cisco.com")
if mibBuilder.loadTexts: ciscoVoiceCommonDialControlMIB.setDescription("This MIB module contains voice related objects that\nare common across more than one network\nencapsulation i.e VoIP, VoATM and VoFR.\n\n*** ABBREVIATIONS, ACRONYMS AND SYMBOLS ***\n\nGSM    - Global System for Mobile Communication\n\nAMR-NB - Adaptive Multi Rate - Narrow Band\n\niLBC   - internet Low Bitrate Codec\n\niSAC   - internet Speech Audio Codec")
cvCommonDcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 55, 1))
cvCommonDcCallActive = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 1))
cvCommonDcCallActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 1, 1))
if mibBuilder.loadTexts: cvCommonDcCallActiveTable.setDescription("This table is a common extension to the call active\ntable of IETF Dial Control MIB. It contains common call \nleg information about a network call leg.")
cvCommonDcCallActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 1, 1, 1)).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: cvCommonDcCallActiveEntry.setDescription("The common information regarding a single network call\nleg. The call leg entry is identified by using the same \nindex objects that are used by Call Active table of IETF \nDial Control MIB to identify the call.\nAn entry of this table is created when its associated \ncall active entry in the IETF Dial Control MIB is created\nand the call active entry contains information for the \ncall establishment to a network dialpeer.             \nThe entry is deleted when its associated call active entry \nin the IETF Dial Control MIB is deleted.")
cvCommonDcCallActiveConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 1, 1, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallActiveConnectionId.setDescription("The global call identifier for the network call.")
cvCommonDcCallActiveVADEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallActiveVADEnable.setDescription("The object indicates whether or not the VAD (Voice\nActivity Detection) is enabled for the voice call.")
cvCommonDcCallActiveCoderTypeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 1, 1, 1, 3), CvcCoderTypeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallActiveCoderTypeRate.setDescription("The negotiated coder rate. It specifies the transmit\nrate of voice/fax compression to its associated call leg \nfor the call.\nThis rate is different from the configuration rate \nbecause of rate negotiation during the call.")
cvCommonDcCallActiveCodecBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallActiveCodecBytes.setDescription("Specifies the payload size of the voice packet.")
cvCommonDcCallActiveInBandSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 1, 1, 1, 5), CvcInBandSignaling()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallActiveInBandSignaling.setDescription("Specifies the type of in-band signaling being used on\nthe call.  This object is instantiated only for \nConnection Trunk calls.")
cvCommonDcCallActiveCallingName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallActiveCallingName.setDescription("The calling party name this call is connected to. If the\nname is not available, then it will have a length of zero.")
cvCommonDcCallActiveCallerIDBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallActiveCallerIDBlock.setDescription("The object indicates whether or not the caller ID feature\nis blocked for this voice call.")
cvCommonDcCallHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 2))
cvCommonDcCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 2, 1))
if mibBuilder.loadTexts: cvCommonDcCallHistoryTable.setDescription("This table is the Common extension to the call history\ntable of IETF Dial Control MIB. It contains Common call \nleg information about a network call leg.")
cvCommonDcCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 2, 1, 1)).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"))
if mibBuilder.loadTexts: cvCommonDcCallHistoryEntry.setDescription("The common information regarding a single network call\nleg. The call leg entry is identified by using the same \nindex objects that are used by Call Active table of IETF \nDial Control MIB to identify the call.\nAn entry of this table is created when its associated \ncall history entry in the IETF Dial Control MIB is \ncreated and the call history entry contains information \nfor the call establishment to a network dialpeer.\nThe entry is deleted when its associated call history \nentry in the IETF Dial Control MIB is deleted.")
cvCommonDcCallHistoryConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 2, 1, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallHistoryConnectionId.setDescription("The global call identifier for the gateway call.")
cvCommonDcCallHistoryVADEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallHistoryVADEnable.setDescription("The object indicates whether or not the VAD (Voice\nActivity Detection) was enabled for the voice call.")
cvCommonDcCallHistoryCoderTypeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 2, 1, 1, 3), CvcCoderTypeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallHistoryCoderTypeRate.setDescription("The negotiated coder rate. It specifies the transmit rate\nof voice/fax compression to its associated call leg for \nthe call.\nThis rate is different from the configuration rate \nbecause of rate negotiation during the call.")
cvCommonDcCallHistoryCodecBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallHistoryCodecBytes.setDescription("Specifies the payload size of the voice packet.")
cvCommonDcCallHistoryInBandSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 2, 1, 1, 5), CvcInBandSignaling()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallHistoryInBandSignaling.setDescription("Specifies the type of in-band signaling used on the\ncall.  This object is instantiated only for \nConnection Trunk calls.")
cvCommonDcCallHistoryCallingName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 2, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallHistoryCallingName.setDescription("The calling party name this call is connected to. If\nthe name is not available, then it will have a length \nof zero.")
cvCommonDcCallHistoryCallerIDBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 55, 1, 2, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvCommonDcCallHistoryCallerIDBlock.setDescription("The object indicates whether or not the caller ID\nfeature is blocked for this voice call.")
cvCommonDcMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 55, 2))
cvCommonDcMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 55, 2, 0))
cvCommonDcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 55, 3))
cvCommonDcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 55, 3, 1))
cvCommonDcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 55, 3, 2))

# Augmentions

# Groups

cvCommonDcCallGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 55, 3, 2, 1)).setObjects(*(("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryVADEnable"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallActiveVADEnable"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryInBandSignaling"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallActiveInBandSignaling"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryCoderTypeRate"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallActiveCodecBytes"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryCodecBytes"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallActiveCoderTypeRate"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallActiveConnectionId"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryConnectionId"), ) )
if mibBuilder.loadTexts: cvCommonDcCallGroup.setDescription("A collection of objects providing the common network\ncall leg information.")
cvCommonDcCallGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 55, 3, 2, 2)).setObjects(*(("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallActiveVADEnable"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryCodecBytes"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallActiveCoderTypeRate"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallActiveInBandSignaling"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryCallerIDBlock"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallActiveConnectionId"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryVADEnable"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryCallingName"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryCoderTypeRate"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallActiveCodecBytes"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryInBandSignaling"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallActiveCallingName"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallActiveCallerIDBlock"), ("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallHistoryConnectionId"), ) )
if mibBuilder.loadTexts: cvCommonDcCallGroup1.setDescription("A collection of objects providing the common network\ncall leg information.")

# Compliances

cvCommonDcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 55, 3, 1, 1)).setObjects(*(("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallGroup"), ) )
if mibBuilder.loadTexts: cvCommonDcMIBCompliance.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE COMMON MIB")
cvCommonDcMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 55, 3, 1, 2)).setObjects(*(("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "cvCommonDcCallGroup1"), ) )
if mibBuilder.loadTexts: cvCommonDcMIBComplianceRev1.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE COMMON MIB")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", PYSNMP_MODULE_ID=ciscoVoiceCommonDialControlMIB)

# Types
mibBuilder.exportSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", CvcCallReferenceIdOrZero=CvcCallReferenceIdOrZero, CvcCoderTypeRate=CvcCoderTypeRate, CvcFaxTransmitRate=CvcFaxTransmitRate, CvcGUid=CvcGUid, CvcH320CallType=CvcH320CallType, CvcInBandSignaling=CvcInBandSignaling, CvcSpeechCoderRate=CvcSpeechCoderRate, CvcVideoCoderRate=CvcVideoCoderRate)

# Objects
mibBuilder.exportSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", ciscoVoiceCommonDialControlMIB=ciscoVoiceCommonDialControlMIB, cvCommonDcMIBObjects=cvCommonDcMIBObjects, cvCommonDcCallActive=cvCommonDcCallActive, cvCommonDcCallActiveTable=cvCommonDcCallActiveTable, cvCommonDcCallActiveEntry=cvCommonDcCallActiveEntry, cvCommonDcCallActiveConnectionId=cvCommonDcCallActiveConnectionId, cvCommonDcCallActiveVADEnable=cvCommonDcCallActiveVADEnable, cvCommonDcCallActiveCoderTypeRate=cvCommonDcCallActiveCoderTypeRate, cvCommonDcCallActiveCodecBytes=cvCommonDcCallActiveCodecBytes, cvCommonDcCallActiveInBandSignaling=cvCommonDcCallActiveInBandSignaling, cvCommonDcCallActiveCallingName=cvCommonDcCallActiveCallingName, cvCommonDcCallActiveCallerIDBlock=cvCommonDcCallActiveCallerIDBlock, cvCommonDcCallHistory=cvCommonDcCallHistory, cvCommonDcCallHistoryTable=cvCommonDcCallHistoryTable, cvCommonDcCallHistoryEntry=cvCommonDcCallHistoryEntry, cvCommonDcCallHistoryConnectionId=cvCommonDcCallHistoryConnectionId, cvCommonDcCallHistoryVADEnable=cvCommonDcCallHistoryVADEnable, cvCommonDcCallHistoryCoderTypeRate=cvCommonDcCallHistoryCoderTypeRate, cvCommonDcCallHistoryCodecBytes=cvCommonDcCallHistoryCodecBytes, cvCommonDcCallHistoryInBandSignaling=cvCommonDcCallHistoryInBandSignaling, cvCommonDcCallHistoryCallingName=cvCommonDcCallHistoryCallingName, cvCommonDcCallHistoryCallerIDBlock=cvCommonDcCallHistoryCallerIDBlock, cvCommonDcMIBNotificationPrefix=cvCommonDcMIBNotificationPrefix, cvCommonDcMIBNotifications=cvCommonDcMIBNotifications, cvCommonDcMIBConformance=cvCommonDcMIBConformance, cvCommonDcMIBCompliances=cvCommonDcMIBCompliances, cvCommonDcMIBGroups=cvCommonDcMIBGroups)

# Groups
mibBuilder.exportSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", cvCommonDcCallGroup=cvCommonDcCallGroup, cvCommonDcCallGroup1=cvCommonDcCallGroup1)

# Compliances
mibBuilder.exportSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", cvCommonDcMIBCompliance=cvCommonDcMIBCompliance, cvCommonDcMIBComplianceRev1=cvCommonDcMIBComplianceRev1)
