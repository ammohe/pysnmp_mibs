# PySNMP SMI module. Autogenerated from smidump -f python CISCO-VOICE-DNIS-MIB
# by libsmi2pysnmp-0.1.3 at Fri Aug  1 21:59:23 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoMgmt, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( DisplayString, RowStatus, TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")

# Types

class CvE164String(TextualConvention, OctetString):
    displayHint = "32a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(1,32)
    
class DnisMapname(TextualConvention, OctetString):
    displayHint = "32a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,32)
    

# Objects

ciscoVoiceDnisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 219)).setRevisions(("2002-05-01 00:00",))
if mibBuilder.loadTexts: ciscoVoiceDnisMIB.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: ciscoVoiceDnisMIB.setContactInfo("       Cisco Systems\nCustomer Service\n\nPostal: 170 W. Tasman Drive\nSan Jose, CA  95134\nUSA\n\nTel: +1 800 553-NETS\n\nE-mail: cs-voice@cisco.com")
if mibBuilder.loadTexts: ciscoVoiceDnisMIB.setDescription("The MIB module provides management support for Dialer\nNumber Information Service (DNIS) mapping.  A DNIS\nentry is associated with a Voice XML (VXML) page to\nprovide audio play back features. Multiple DNIS\nentries can be grouped together to form a DNIS\nmapping with a unique map name.\n\n*** ABBREVIATIONS, ACRONYMS, AND SYMBOLS ***\n\nDNIS - Dialer Number Information Service\n\nXML  - Extensible Markup Language\n\nVXML - Voice XML\n\nURL  - Uniform Resource Locator  ")
cvDnisMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 219, 1))
cvDnisMap = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1))
cvDnisMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 1))
if mibBuilder.loadTexts: cvDnisMappingTable.setDescription("The table contains the map name and a url specifying\na file name. The file contains DNIS entries that belong\nto the DNIS mapping.")
cvDnisMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 1, 1)).setIndexNames((1, "CISCO-VOICE-DNIS-MIB", "cvDnisMappingName"))
if mibBuilder.loadTexts: cvDnisMappingEntry.setDescription("Information about a single DNIS mapping. There is a\nunique DNIS map name. New DNIS mapping can be created\nusing cvDnisMappingStatus.\n\nThe entry can be created with or without a file location \nspecified by cvDnisMappingUrl. The mapping file contains\nDNIS name and VXML page per line. For example, a \ncvDnisMappingUrl could be tftp://someserver/dnismap.txt.\nThis file is a text file and the content format is\n  dnis <dnisname> url <urlname>.\nAn example of the contents of the file itself can be\n  dnis 18004251234 url http://www.b.com/p/vwelcome.vxml\n  dnis 18004253421 url http://www.c.com/j/vxmlintf.vxml\nIf a mapping file location is specified, then new rows\ncorresponding to this map name are created and populated\nin cvDnisNodeTable from the contents of the file. The\nrows corresponding to this map name in cvDnisNodeTable\ncannot be created or modified or deleted but can be\nread. \n\nIf a mapping file location is not specified in\ncvDnisMappingUrl, then individual DNIS entries\ncorresponding to this map name can be created, modified\nand deleted in cvDnisNodeTable. \n\nDeleting an entry deletes all the related entries in\ncvDnisNodeTable. ")
cvDnisMappingName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 1, 1, 1), DnisMapname().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvDnisMappingName.setDescription("The name which uniquely identifies a DNIS mapping. ")
cvDnisMappingUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 1, 1, 2), DisplayString().clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvDnisMappingUrl.setDescription("The url specifies a file location. The file contains\nindividual DNIS entries that belong to the DNIS map \nname specified by cvDnisMappingName.\n\nOnce a url is created and associated with a map name (the\nassociation is complete when the row is made active(1)),\nit cannot be modified while cvDnisMappingStatus is\nactive. If a different url needs to be associated with\nthe current map name, the row status should be made\nnotInService(2) and this object has to be modified to\nassociate a new url. When a new association is made all\nthe DNIS entries corresponding to the old association\nwill be deleted from the cvDnisNodeTable.\n\nThe url is read when the row status is made active(1) or\nwhen the row status is active and the object \n cvDnisMappingRefresh is explicitly set to refresh(2). \n If the url is not accessible then a\ncvDnisMappingUrlInaccessible notification will be\ngenerted. ")
cvDnisMappingRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("idle", 1), ("refresh", 2), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvDnisMappingRefresh.setDescription("Whenever there is a need to re-read the contents of the\nfile specified by cvDnisMappingUrl, this object can be\nset to refresh(2). This will cause the contents of the\nfile to be re-read and correspondingly update the\ncvDnisNodeTable. After the completion of this operation,\nthe value of this object is reset to idle(1). The only\noperation allowed on this object is setting it to\nrefresh(2). This can only be done when the current value\nis idle(1) and the rowstatus is active(1).\n\nidle       - The refreshing process is idle and the user\n             can modify this object to refresh.\nrefresh    - The refreshing process is currently busy and\n             the user have to wait till the object\n             becomes idle to issue new refresh.")
cvDnisMappingUrlAccessError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 1, 1, 4), DisplayString().clone('')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvDnisMappingUrlAccessError.setDescription("ASCII text describing the error on last access of the url\nspecified in cvDnisMappingUrl.\n\nIf the url access does not succeed, then this object is\npopulated with an error message indicating the reason for\nfailure. If the url access succeeds, this object is set\nto null string.")
cvDnisMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvDnisMappingStatus.setDescription("This object is used to create a new row or modify or\ndelete an existing row in this table. When making the\nstatus active(1), if a valid cvDnisMappingUrl is present\nthe contents of the url is downloaded and during that\ntime cvDnisMappingRefresh is set to refresh(2). When\ncvDnisMappingRefresh is set to refresh(2), only the\ndestroy(6) operation is allowed.")
cvDnisNodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 2))
if mibBuilder.loadTexts: cvDnisNodeTable.setDescription("The table contains a DNIS name and a url. The url is a\npointer to a VXML page for the DNIS name. ")
cvDnisNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 2, 1)).setIndexNames((0, "CISCO-VOICE-DNIS-MIB", "cvDnisMappingName"), (1, "CISCO-VOICE-DNIS-MIB", "cvDnisNumber"))
if mibBuilder.loadTexts: cvDnisNodeEntry.setDescription("Each entry is a DNIS name and the location of the\nassociated VXML page. New DNIS entries can be created or\nthe existing entries can be modified or deleted only if\nthe corresponding map name (defined in\ncvDnisMappingTable) does not have any file name provided\nin the cvDnisMappingUrl object. \n\nIf a file name is provided in cvDnisMappingUrl\ncorresponding to this entry's map name, then this row\nwill have read permission only.")
cvDnisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 2, 1, 1), CvE164String()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cvDnisNumber.setDescription("The individual DNIS name. It is unique within a DNIS\nmapping.")
cvDnisNodeUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 2, 1, 2), DisplayString().clone('')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvDnisNodeUrl.setDescription("The url specifies a VXML page. This page contains\nvoice XML links to play audio data.\n\nThis url which is a VXML page is not read immediately\nwhen the row is made active(1), but only when a call that\nrequires the use of this DNIS comes through.")
cvDnisNodeModifiable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvDnisNodeModifiable.setDescription("This object specifies whether the object in a particular\nrow is modifiable. The object is set to true(1) if the\ncorresponding map name (defined in cvDnisMappingTable)\ndoes not have any file name provided in the\ncvDnisMappingUrl object. Otherwise this object is set to\nfalse(2) and the row becomes read only.  ")
cvDnisNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 219, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cvDnisNodeStatus.setDescription("This object is used to create a new row or modify or\ndelete an existing row in this table. The objects in a\nrow can be modified or deleted while the row status is\nactive(1) and cvDnisNodeModifiable is true(1). The row\nstatus cannot be set to notInService(2) or\ncreateAndWait(5). ")
cvDnisMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 219, 2))
cvDnisMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 219, 2, 0))
cvDnisMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 219, 3))
cvDnisMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 219, 3, 1))
cvDnisMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 219, 3, 2))

# Augmentions

# Notifications

cvDnisMappingUrlInaccessible = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 219, 2, 0, 1)).setObjects(*(("CISCO-VOICE-DNIS-MIB", "cvDnisMappingUrl"), ("CISCO-VOICE-DNIS-MIB", "cvDnisMappingUrlAccessError"), ) )
if mibBuilder.loadTexts: cvDnisMappingUrlInaccessible.setDescription("Inaccessible DNIS mapping url notification. A\ncvDnisMappingUrlInaccessible notification is sent if the\nspecified url is not accessible.")

# Groups

cvDnisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 219, 3, 2, 1)).setObjects(*(("CISCO-VOICE-DNIS-MIB", "cvDnisNodeUrl"), ("CISCO-VOICE-DNIS-MIB", "cvDnisMappingUrlAccessError"), ("CISCO-VOICE-DNIS-MIB", "cvDnisNodeStatus"), ("CISCO-VOICE-DNIS-MIB", "cvDnisMappingUrl"), ("CISCO-VOICE-DNIS-MIB", "cvDnisNodeModifiable"), ("CISCO-VOICE-DNIS-MIB", "cvDnisMappingStatus"), ("CISCO-VOICE-DNIS-MIB", "cvDnisMappingRefresh"), ) )
if mibBuilder.loadTexts: cvDnisGroup.setDescription("A collection of objects provides a relation between a\nDNIS map name and the DNIS entries belonging to that map\nname. ")
cvDnisNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 219, 3, 2, 2)).setObjects(*(("CISCO-VOICE-DNIS-MIB", "cvDnisMappingUrlInaccessible"), ) )
if mibBuilder.loadTexts: cvDnisNotificationGroup.setDescription("The notifications for CISCO-VOICE-DNIS-MIB.")

# Compliances

cvDnisMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 219, 3, 1, 1)).setObjects(*(("CISCO-VOICE-DNIS-MIB", "cvDnisNotificationGroup"), ("CISCO-VOICE-DNIS-MIB", "cvDnisGroup"), ) )
if mibBuilder.loadTexts: cvDnisMIBCompliance.setDescription("The compliance statement for entities which\nimplement the CISCO VOICE DNIS MIB")

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-VOICE-DNIS-MIB", PYSNMP_MODULE_ID=ciscoVoiceDnisMIB)

# Types
mibBuilder.exportSymbols("CISCO-VOICE-DNIS-MIB", CvE164String=CvE164String, DnisMapname=DnisMapname)

# Objects
mibBuilder.exportSymbols("CISCO-VOICE-DNIS-MIB", ciscoVoiceDnisMIB=ciscoVoiceDnisMIB, cvDnisMIBObjects=cvDnisMIBObjects, cvDnisMap=cvDnisMap, cvDnisMappingTable=cvDnisMappingTable, cvDnisMappingEntry=cvDnisMappingEntry, cvDnisMappingName=cvDnisMappingName, cvDnisMappingUrl=cvDnisMappingUrl, cvDnisMappingRefresh=cvDnisMappingRefresh, cvDnisMappingUrlAccessError=cvDnisMappingUrlAccessError, cvDnisMappingStatus=cvDnisMappingStatus, cvDnisNodeTable=cvDnisNodeTable, cvDnisNodeEntry=cvDnisNodeEntry, cvDnisNumber=cvDnisNumber, cvDnisNodeUrl=cvDnisNodeUrl, cvDnisNodeModifiable=cvDnisNodeModifiable, cvDnisNodeStatus=cvDnisNodeStatus, cvDnisMIBNotificationPrefix=cvDnisMIBNotificationPrefix, cvDnisMIBNotifications=cvDnisMIBNotifications, cvDnisMIBConformance=cvDnisMIBConformance, cvDnisMIBCompliances=cvDnisMIBCompliances, cvDnisMIBGroups=cvDnisMIBGroups)

# Notifications
mibBuilder.exportSymbols("CISCO-VOICE-DNIS-MIB", cvDnisMappingUrlInaccessible=cvDnisMappingUrlInaccessible)

# Groups
mibBuilder.exportSymbols("CISCO-VOICE-DNIS-MIB", cvDnisGroup=cvDnisGroup, cvDnisNotificationGroup=cvDnisNotificationGroup)

# Compliances
mibBuilder.exportSymbols("CISCO-VOICE-DNIS-MIB", cvDnisMIBCompliance=cvDnisMIBCompliance)
