# PySNMP SMI module. Autogenerated from smidump -f python F5-BIGIP-LOCAL-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 18:17:56 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( LongDisplayString, bigipCompliances, bigipGroups, bigipTrafficMgmt, ) = mibBuilder.importSymbols("F5-BIGIP-COMMON-MIB", "LongDisplayString", "bigipCompliances", "bigipGroups", "bigipTrafficMgmt")
( CounterBasedGauge64, ) = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
( InetAddress, InetAddressType, InetPortNumber, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
( Gauge, ) = mibBuilder.importSymbols("RFC1155-SMI", "Gauge")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Counter64, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, TimeTicks, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Opaque", "TimeTicks", "TimeTicks", "enterprises")
( MacAddress, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention")

# Objects

bigipLocalTM = ModuleIdentity((1, 3, 6, 1, 4, 1, 3375, 2, 2)).setRevisions(("2013-03-16 00:40",))
if mibBuilder.loadTexts: bigipLocalTM.setOrganization("F5 Networks, Inc.")
if mibBuilder.loadTexts: bigipLocalTM.setContactInfo("postal: F5 Networks, Inc. \n401 Elliott Ave. West \nSeattle, WA 98119\nphone:  (206) 272-5555\nemail:  support@f5.com")
if mibBuilder.loadTexts: bigipLocalTM.setDescription("Top-level infrastructure of the F5 enterprise MIB tree.")
ltmGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1))
ltmGlobalAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1))
ltmAttrLbmodeFastestMaxIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrLbmodeFastestMaxIdleTime.setDescription("Deprecated! \nvariable LBMode.FastertMaxIdleTime is purged")
ltmAttrMirrorState = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrMirrorState.setDescription("The state of mirroring in redundant systems.")
ltmAttrPersistDestAddrLimitMode = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("timeout", 0), ("maxcount", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrPersistDestAddrLimitMode.setDescription("The method of limiting destination address entries.")
ltmAttrPersistDestAddrMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrPersistDestAddrMaxCount.setDescription("The maximum number of entries allowed for the destination address entries.")
ltmAttrSnatAnyIpProtocol = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrSnatAnyIpProtocol.setDescription("The status of the feature that allows any IP traffic \nthrough SNATs.")
ltmAttrMirrorPeerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrMirrorPeerIpAddr.setDescription("The IP address of the mirroring peer in redundant systems")
ltmMirrors = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2))
ltmMirrorPort = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1))
ltmMirrorPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortNumber.setDescription("The number of ltmMirrorPort entries in the table.")
ltmMirrorPortTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1, 2))
if mibBuilder.loadTexts: ltmMirrorPortTable.setDescription("A table containing information of mirrored ports.")
ltmMirrorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmMirrorPortName"))
if mibBuilder.loadTexts: ltmMirrorPortEntry.setDescription("Columns in the ltmMirrorPort Table")
ltmMirrorPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortName.setDescription("The name of a port to which is mirrored.")
ltmMirrorPortMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2))
ltmMirrorPortMemberNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortMemberNumber.setDescription("The number of ltmMirrorPortMember entries in the table.")
ltmMirrorPortMemberTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2))
if mibBuilder.loadTexts: ltmMirrorPortMemberTable.setDescription("A table containing information of mirrored port members.")
ltmMirrorPortMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberToName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberName"))
if mibBuilder.loadTexts: ltmMirrorPortMemberEntry.setDescription("Columns in the ltmMirrorPortMember Table")
ltmMirrorPortMemberToName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortMemberToName.setDescription("The name of a port which it is mirrored to.")
ltmMirrorPortMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortMemberName.setDescription("The name of a mirrored port.")
ltmMirrorPortMemberConduitName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortMemberConduitName.setDescription("This attribute is used to represent a local edge port \nwhen a conduit between switch devices is necessary.")
ltmNATs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3))
ltmNat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1))
ltmNatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatNumber.setDescription("The number of ltmNat entries in the table.")
ltmNatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2))
if mibBuilder.loadTexts: ltmNatTable.setDescription("A table containing information of NAT.")
ltmNatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNatName"))
if mibBuilder.loadTexts: ltmNatEntry.setDescription("Columns in the ltmNat Table")
ltmNatTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatTransAddrType.setDescription("The IP address type of ltmNatTransAddr")
ltmNatTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatTransAddr.setDescription("The NAT translation address. It is \ninterpreted within the context of a ltmNatTransAddrType value.")
ltmNatOrigAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatOrigAddrType.setDescription("The IP address type of ltmNatOrigAddr.")
ltmNatOrigAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatOrigAddr.setDescription("The NAT original address associated with the specified NAT translation address. \nIt is interpreted within the context of a ltmNatOrigAddrType value.")
ltmNatEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatEnabled.setDescription("The state indicating whether the specified NAT address is enabled or not.")
ltmNatArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatArpEnabled.setDescription("The ARP state for the specified NAT, whether it is enabled or not.")
ltmNatUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatUnitId.setDescription("The unit number associated with the specified NAT translation address.")
ltmNatListedEnabledVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatListedEnabledVlans.setDescription("The state indicating whether associated VLANs are NAT enabled or not.\nThe associated VLANs are listed in ltmNatVlanTable.")
ltmNatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatName.setDescription("Name of the nat")
ltmNatStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2))
ltmNatStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmNatStatResetStats.setDescription("The action to reset resetable statistics data in  ltmNatStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmNatStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatNumber.setDescription("The number of ltmNatStat entries in the table.")
ltmNatStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3))
if mibBuilder.loadTexts: ltmNatStatTable.setDescription("A table containing statistic information of NAT.")
ltmNatStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNatStatName"))
if mibBuilder.loadTexts: ltmNatStatEntry.setDescription("Columns in the ltmNatStat Table")
ltmNatStatTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatTransAddrType.setDescription("Deprecated!  \nThe IP address type of ltmNatStatTransAddr")
ltmNatStatTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatTransAddr.setDescription("Deprecated!  \nThe NAT translation address. It is \ninterpreted within the context of a ltmNatStatTransAddrType value.")
ltmNatStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerPktsIn.setDescription("The number of packets received from server-side.")
ltmNatStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerBytesIn.setDescription("The number of bytes received from server-side.")
ltmNatStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerPktsOut.setDescription("The number of packets sent to server-side.")
ltmNatStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerBytesOut.setDescription("The number of bytes sent to server-side.")
ltmNatStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerMaxConns.setDescription("The maximum connections from server-side.")
ltmNatStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerTotConns.setDescription("The total connections from server-side.")
ltmNatStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerCurConns.setDescription("The current connections from server-side.")
ltmNatStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatName.setDescription("Name of the nat")
ltmNatVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3))
ltmNatVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanNumber.setDescription("The number of ltmNatVlan entries in the table.")
ltmNatVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2))
if mibBuilder.loadTexts: ltmNatVlanTable.setDescription("A table containing VLAN information associated with NAT.")
ltmNatVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNatVlanNatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmNatVlanVlanName"))
if mibBuilder.loadTexts: ltmNatVlanEntry.setDescription("Columns in the ltmNatVlan Table")
ltmNatVlanTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanTransAddrType.setDescription("Deprecated! Use nat_name to associate vlan to NAT.\nThe IP address type of ltmNatVlanTransAddr")
ltmNatVlanTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanTransAddr.setDescription("Deprecated! Use nat_name to associate vlan to NAT.\nThe NAT translation address. It is interpreted within \nthe context of a ltmNatVlanTransAddrType value.")
ltmNatVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanVlanName.setDescription("The name of a VLAN associated with the specified NAT.\nOnly when ltmNatListedEnabledVlans is set to enable, \nNAT is enabled on the VLAN. ")
ltmNatVlanNatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanNatName.setDescription("Name of the nat")
ltmNodes = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4))
ltmNodeAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1))
ltmNodeAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrNumber.setDescription("The number of ltmNodeAddr entries in the table.")
ltmNodeAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2))
if mibBuilder.loadTexts: ltmNodeAddrTable.setDescription("A table containing information of node addresses.")
ltmNodeAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNodeAddrName"))
if mibBuilder.loadTexts: ltmNodeAddrEntry.setDescription("Columns in the ltmNodeAddr Table")
ltmNodeAddrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrAddrType.setDescription("The IP address type of ltmNodeAddrAddr.")
ltmNodeAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrAddr.setDescription("The IP address of a node. It is interpreted within \nthe context of a ltmNodeAddrAddrType value.")
ltmNodeAddrConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrConnLimit.setDescription("The maximum number of connections the specified node address is \nallowed to have open at one time.")
ltmNodeAddrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrRatio.setDescription("The ratio of the specified node address, used in load balance algorithm.")
ltmNodeAddrDynamicRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrDynamicRatio.setDescription("The dynamic ratio of the specified node address, used in load balance algorithm.")
ltmNodeAddrMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,23,3,19,24,0,25,20,4,22,)).subtype(namedValues=NamedValues(("unchecked", 0), ("checking", 1), ("down", 19), ("inband", 2), ("forced-down", 20), ("irule-down", 22), ("inband-down", 23), ("down-manual-resume", 24), ("disabled", 25), ("forced-up", 3), ("up", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmNodeAddrMonitorState.setDescription("The internal tmm monitor state for the specified node address.")
ltmNodeAddrMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,23,21,3,18,19,24,0,20,4,22,)).subtype(namedValues=NamedValues(("unchecked", 0), ("checking", 1), ("addr-down", 18), ("down", 19), ("inband", 2), ("forced-down", 20), ("maint", 21), ("irule-down", 22), ("inband-down", 23), ("down-manual-resume", 24), ("forced-up", 3), ("up", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrMonitorStatus.setDescription("The hierarchical load balance state for the specified node address, including parent status. \nunchecked - enabled node that is not monitored;\nchecking  - initial state until monitor reports;\ninband    - the tmm has marked the node up;\nforced-up - forced up manually\nup        - enabled node when its monitors succeed;\naddr-down   - node address monitor fails or forced down;\ndown        - enabled node when its monitors fail;\nforced-down - node forced down manually;\nmaint       - in maintenance mode;\nirule-down  - an iRule has marked the node down;\ninband-down - the tmm has marked the node down;\ndown-manual-resume - the node is down and must be manually enabled; ")
ltmNodeAddrMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrMonitorRule.setDescription("The monitor rule used for load balance the specified node address.")
ltmNodeAddrNewSessionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,)).subtype(namedValues=NamedValues(("user-disabled", 1), ("user-enabled", 2), ("monitor-enabled", 3), ("monitor-disabled", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmNodeAddrNewSessionEnable.setDescription("Deprecated!  \nThis field is not interested to user through SNMP interface.\nThe state indicating whether a new session can be enabled or not for the specified node address.")
ltmNodeAddrSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,1,3,2,)).subtype(namedValues=NamedValues(("enabled", 1), ("addrdisabled", 2), ("servdisabled", 3), ("disabled", 4), ("forceddisabled", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrSessionStatus.setDescription("The hierarchical status of the session, including parent status, for \nthe specified node address.\nenabled       - new sessions enabled;\naddrdisabled - new sessions disabled on node address;\nservdisabled - new sessions disabled on node server;\ndisabled      - new sessions disabled;\nforceddisabled - new sessions forced to be disabled.")
ltmNodeAddrPoolMemberRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrPoolMemberRefCount.setDescription("Deprecated!\nNode Address tracking method changed. The node address member reference count is no longer used.")
ltmNodeAddrScreenName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrScreenName.setDescription("Deprecated! This field is removed.\nThe screen names for the specified node address.")
ltmNodeAddrAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(4,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrAvailabilityState.setDescription("Deprecated!  \nReplaced by ltmNodeAddrStatusAvailState under ltmNodeAddrStatus.\nThe state of the specified node address availability indicated in color.")
ltmNodeAddrEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrEnabledState.setDescription("Deprecated! \nReplaced by ltmNodeAddrStatusEnabledState under ltmNodeAddrStatus.\nThe state of the specified node address activity status, as specified \nby the user.")
ltmNodeAddrDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrDisabledParentType.setDescription("Deprecated! \nReplaced by ltmNodeAddrStatusParentType under ltmNodeAddrStatus.\nThe type of parent object which disabled the specified node address.")
ltmNodeAddrStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 16), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusReason.setDescription("Deprecated! \nReplaced by ltmNodeAddrStatusDetailReason under ltmNodeAddrStatus.\nThe detail description of the node's status of parent object \nwhich disabled the specified node address.")
ltmNodeAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrName.setDescription("node name.")
ltmNodeAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2))
ltmNodeAddrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmNodeAddrStatResetStats.setDescription("The action to reset resetable statistics data in  ltmNodeAddrStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmNodeAddrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatNumber.setDescription("The number of ltmNodeAddrStat entries in the table.")
ltmNodeAddrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3))
if mibBuilder.loadTexts: ltmNodeAddrStatTable.setDescription("A table containing statistic information of node addresses.")
ltmNodeAddrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatNodeName"))
if mibBuilder.loadTexts: ltmNodeAddrStatEntry.setDescription("Columns in the ltmNodeAddrStat Table")
ltmNodeAddrStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatAddrType.setDescription("Deprecated! use node_name instead, \nThe IP address type of ltmNodeAddrStatAddr")
ltmNodeAddrStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatAddr.setDescription("Deprecated! use node_name instead, \nThe IP address of a node. It is interpreted within \nthe context of an ltmNodeAddrStatAddrType value.")
ltmNodeAddrStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerPktsIn.setDescription("The number of packets received by the specified node address from server-side.")
ltmNodeAddrStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerBytesIn.setDescription("The number of bytes received by the specified node address from server-side.")
ltmNodeAddrStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerPktsOut.setDescription("The number of packets sent to server-side from the specified node address.")
ltmNodeAddrStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerBytesOut.setDescription("The number of bytes sent to server-side from the specified node address.")
ltmNodeAddrStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerMaxConns.setDescription("The maximum connections from server-side to the specified node address.")
ltmNodeAddrStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerTotConns.setDescription("The total connections from server-side to the specified node address.")
ltmNodeAddrStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerCurConns.setDescription("The current connections from server-side to the specified node address.")
ltmNodeAddrStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaPktsIn.setDescription("The total number of hardware accelerated packets received by the specified node address.")
ltmNodeAddrStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaBytesIn.setDescription("The total number of hardware accelerated bytes received by the specified node address.")
ltmNodeAddrStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaPktsOut.setDescription("The total number of hardware accelerated packets sent out from the specified node address.")
ltmNodeAddrStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaBytesOut.setDescription("The number of hardware accelerated bytes sent out from the specified node address.")
ltmNodeAddrStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaMaxConns.setDescription("The maximum hardware accelerated connections to the specified node address.")
ltmNodeAddrStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaTotConns.setDescription("The total hardware accelerated connections to the specified node address.")
ltmNodeAddrStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaCurConns.setDescription("The current hardware accelerated connections to the specified node address.")
ltmNodeAddrStatTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatTotRequests.setDescription("The total number of requests going through the specified node address.")
ltmNodeAddrStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatTotPvaAssistConn.setDescription("The total number of connections to the specified node address, \nwhich are partially hardware accelerated.")
ltmNodeAddrStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 19), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatCurrPvaAssistConn.setDescription("The current number of connections to the specified node address,\nwhich are partially hardware accelerated.")
ltmNodeAddrStatNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 20), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatNodeName.setDescription("node name")
ltmNodeAddrStatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 21), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatCurSessions.setDescription("The number of current sessions going through the specified node address.")
ltmNodeAddrStatCurrentConnsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 22), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatCurrentConnsPerSec.setDescription("The number of current connections per second to the specified node address.")
ltmNodeAddrStatDurationRateExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 23), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatDurationRateExceeded.setDescription("Duration of time the specified node address has exceeded the configured \nconnection rate limit.")
ltmNodeAddrStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3))
ltmNodeAddrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusNumber.setDescription("The number of ltmNodeAddrStatus entries in the table.")
ltmNodeAddrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2))
if mibBuilder.loadTexts: ltmNodeAddrStatusTable.setDescription("A table containing status information of node addresses.")
ltmNodeAddrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusName"))
if mibBuilder.loadTexts: ltmNodeAddrStatusEntry.setDescription("Columns in the ltmNodeAddrStatus Table")
ltmNodeAddrStatusAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusAddrType.setDescription("The IP address type of ltmNodeAddrStatusAddr.")
ltmNodeAddrStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusAddr.setDescription("The IP address of a node. It is interpreted within \nthe context of a ltmNodeAddrStatusAddrType value.")
ltmNodeAddrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusAvailState.setDescription("The availability of the specified node address indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
ltmNodeAddrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusEnabledState.setDescription("The activity status of the specified node address, as specified \nby the user.")
ltmNodeAddrStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified node address.")
ltmNodeAddrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusDetailReason.setDescription("The detail description of the specified node's status.")
ltmNodeAddrStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusName.setDescription("node name.")
ltmPools = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5))
ltmPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1))
ltmPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolNumber.setDescription("The number of ltmPool entries in the table.")
ltmPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2))
if mibBuilder.loadTexts: ltmPoolTable.setDescription("A table containing information of pools.")
ltmPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolName"))
if mibBuilder.loadTexts: ltmPoolEntry.setDescription("Columns in the ltmPool Table")
ltmPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolName.setDescription("The name of a pool.")
ltmPoolLbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,11,17,2,9,16,7,6,1,10,4,15,14,0,5,13,12,8,)).subtype(namedValues=NamedValues(("roundRobin", 0), ("ratioMember", 1), ("dynamicRatio", 10), ("fastestAppResponse", 11), ("leastSessions", 12), ("dynamicRatioMember", 13), ("l3Addr", 14), ("weightedLeastConnMember", 15), ("weightedLeastConnNodeAddr", 16), ("ratioSession", 17), ("leastConnMember", 2), ("observedMember", 3), ("predictiveMember", 4), ("ratioNodeAddress", 5), ("leastConnNodeAddress", 6), ("fastestNodeAddress", 7), ("observedNodeAddress", 8), ("predictiveNodeAddress", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolLbMode.setDescription("The load balance method for this pool")
ltmPoolActionOnServiceDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,2,3,)).subtype(namedValues=NamedValues(("none", 0), ("reset", 1), ("drop", 2), ("reselect", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolActionOnServiceDown.setDescription("The action to be taken if the service for the specified pool is down.")
ltmPoolMinUpMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMinUpMembers.setDescription("The minimum number of UP members required for the specified pool \nbefore a high availability action to be taken. \nThis is used when ltmPoolMinUpMembersEnable is true.")
ltmPoolMinUpMembersEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMinUpMembersEnable.setDescription("The state indicating whether or not an action will be taken when the \nminimum number of UP members requirement is not met for the specified pool.")
ltmPoolMinUpMemberAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,11,9,7,6,8,12,2,0,10,3,1,5,)).subtype(namedValues=NamedValues(("unusedhaaction", 0), ("reboot", 1), ("goofflineaborttm", 10), ("goofflinedownlinks", 11), ("goofflinedownlinksrestart", 12), ("restart", 2), ("failover", 3), ("goactive", 4), ("noaction", 5), ("restartall", 6), ("failoveraborttm", 7), ("gooffline", 8), ("goofflinerestart", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMinUpMemberAction.setDescription("The action to be taken if the minimum number of UP members requirement \nis not met for the specified pool. This is used when \nltmPoolMinUpMembersEnable is true.")
ltmPoolMinActiveMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMinActiveMembers.setDescription("The minimum number of active members required for traffic to be sent to \nthe specified pool. This feature is used for priority pools. The minimum \nactive members take into account both the status of the pool member (up/down) \nas well as the number of connections present on the pool member.  \nIf the number of active members falls below this given threshold, \ntraffic is sent to the next priority pool.")
ltmPoolActiveMemberCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolActiveMemberCnt.setDescription("The number of the current active members in the specified pool.")
ltmPoolDisallowSnat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("allowed", 0), ("disallowed", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDisallowSnat.setDescription("The state whether SNAT is disallowed or not for the specified pool.")
ltmPoolDisallowNat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("allowed", 0), ("disallowed", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDisallowNat.setDescription("The state whether NAT is disallowed or not for the specified pool.")
ltmPoolSimpleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolSimpleTimeout.setDescription("The timeout (in seconds) in simple persistence for the specified pool.")
ltmPoolIpTosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolIpTosToClient.setDescription("The IP ToS value for client traffic for the specified pool.")
ltmPoolIpTosToServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolIpTosToServer.setDescription("The IP ToS value for server traffic for the specified pool.")
ltmPoolLinkQosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolLinkQosToClient.setDescription("The link QoS value for client traffic for the specified pool.")
ltmPoolLinkQosToServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolLinkQosToServer.setDescription("The link QoS value for server traffic for the specified pool.")
ltmPoolDynamicRatioSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDynamicRatioSum.setDescription("The sum of the dynamic ratio from all the members of the specified pool.")
ltmPoolMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMonitorRule.setDescription("The name of monitor rule used by the specified pool.")
ltmPoolAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(4,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolAvailabilityState.setDescription("Deprecated!  \nReplaced by ltmPooltatusAvailState under ltmPoolStatus.\nThe state of the specified pool availability indicated in color.")
ltmPoolEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolEnabledState.setDescription("Deprecated!  \nReplaced by ltmPoolStatusEnabledState under ltmPoolStatus.\nThe state of the specified pool activity status, as specified by the user.")
ltmPoolDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDisabledParentType.setDescription("Deprecated!  \nReplaced by ltmPoolStatusParentType under ltmPoolStatus.\nThe type of parent object which disabled the specified pool.")
ltmPoolStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 21), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusReason.setDescription("Deprecated!  \nReplaced by ltmPoolStatusDetailReason under ltmPoolStatus.\nThe detail description of the pool's status of parent object \nwhich disabled the specified pool.")
ltmPoolSlowRampTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolSlowRampTime.setDescription("The ramp-up time (in seconds) to gradually ramp up the load \non newly added or freshly detected UP pool members.")
ltmPoolMemberCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberCnt.setDescription("The total number of members in the specified pool.")
ltmPoolQueueOnConnectionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("allowed", 0), ("disallowed", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolQueueOnConnectionLimit.setDescription("Enable or disable queuing based on pool member connection limits.")
ltmPoolQueueDepthLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolQueueDepthLimit.setDescription("Maxiumum number of connections in queue for pool and all members.\nNo limit if unspecified or 0.")
ltmPoolQueueTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolQueueTimeLimit.setDescription("Maximum number of milliseconds a connection may stay queued.\nNo limit if unspecified or 0.")
ltmPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2))
ltmPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPoolStatResetStats.setDescription("The action to reset resetable statistics data in  ltmPoolStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatNumber.setDescription("The number of ltmPoolStat entries in the table.")
ltmPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3))
if mibBuilder.loadTexts: ltmPoolStatTable.setDescription("A table containing statistic information of pools.")
ltmPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolStatName"))
if mibBuilder.loadTexts: ltmPoolStatEntry.setDescription("Columns in the ltmPoolStat Table")
ltmPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatName.setDescription("The name of this pool.")
ltmPoolStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerPktsIn.setDescription("The number of packets received by the specified pool from server-side.")
ltmPoolStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerBytesIn.setDescription("The number of bytes received by the specified pool from server-side.")
ltmPoolStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerPktsOut.setDescription("The number of packets sent to server-side from the specified pool.")
ltmPoolStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerBytesOut.setDescription("The number of bytes sent to server-side from the specified pool.")
ltmPoolStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerMaxConns.setDescription("The maximum connections from server-side to the specified pool.")
ltmPoolStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerTotConns.setDescription("The total connections from server-side to the specified pool.")
ltmPoolStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerCurConns.setDescription("The current connections from server-side to the specified pool.")
ltmPoolStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaPktsIn.setDescription("The number of hardware accelerated packets received by the specified pool.")
ltmPoolStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaBytesIn.setDescription("The number of hardware accelerated bytes received by the specified pool.")
ltmPoolStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaPktsOut.setDescription("The number of hardware accelerated packets sent out from the specified pool.")
ltmPoolStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaBytesOut.setDescription("The number of hardware accelerated bytes sent out from the specified pool.")
ltmPoolStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaMaxConns.setDescription("The maximum hardware accelerated connections to the specified pool.")
ltmPoolStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaTotConns.setDescription("The total hardware accelerated connections to the specified pool.")
ltmPoolStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 15), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaCurConns.setDescription("The current hardware accelerated connections to the specified pool.")
ltmPoolStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatTotPvaAssistConn.setDescription("The total number of connections to the specified pool, \nwhich are partially hardware accelerated.")
ltmPoolStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 17), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatCurrPvaAssistConn.setDescription("The current number of connections to the specified pool, \nwhich are partially hardware accelerated.")
ltmPoolStatConnqDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqDepth.setDescription("Number of connections currently in queue, sum.")
ltmPoolStatConnqAgeHead = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAgeHead.setDescription("Age in milliseconds of the oldest queue entry, max.")
ltmPoolStatConnqAgeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAgeMax.setDescription("Maximum queue entry age in milliseconds, max.")
ltmPoolStatConnqAgeEma = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAgeEma.setDescription("Exponential moving average queue entry age in milliseconds, max.")
ltmPoolStatConnqAgeEdm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAgeEdm.setDescription("Exponential decaying maximum queue entry age in milliseconds, max.")
ltmPoolStatConnqServiced = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqServiced.setDescription("Number of entries that have been removed from the queue, sum.")
ltmPoolStatConnqAllDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllDepth.setDescription("Number of connections currently in queue of this pool and all \nits members, sum.")
ltmPoolStatConnqAllAgeHead = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeHead.setDescription("Age in milliseconds of the oldest queue entry of this pool and all\nits members, max.")
ltmPoolStatConnqAllAgeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeMax.setDescription("Maximum queue entry age in milliseconds of this pool and all \nits members, max.")
ltmPoolStatConnqAllAgeEma = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeEma.setDescription("Exponential moving average queue entry age in milliseconds of this \npool and all its members, max.")
ltmPoolStatConnqAllAgeEdm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeEdm.setDescription("Exponential decaying maximum queue entry age in milliseconds of \nthis pool and all its members, max.")
ltmPoolStatConnqAllServiced = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllServiced.setDescription("Number of entries that have been removed from the queue of this \npool and all its members, sum.")
ltmPoolStatTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatTotRequests.setDescription("The total number of requests to the specified pool.")
ltmPoolStatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 31), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatCurSessions.setDescription("The current number of sessions to the specified pool.")
ltmPoolMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3))
ltmPoolMemberNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberNumber.setDescription("The number of ltmPoolMember entries in the table.")
ltmPoolMemberTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2))
if mibBuilder.loadTexts: ltmPoolMemberTable.setDescription("A table containing information of pool members.")
ltmPoolMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberNodeName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPort"))
if mibBuilder.loadTexts: ltmPoolMemberEntry.setDescription("Columns in the ltmPoolMember Table")
ltmPoolMemberPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberPoolName.setDescription("The name of a pool.")
ltmPoolMemberAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberAddrType.setDescription("The IP address type of ltmPoolMemberAddr.")
ltmPoolMemberAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberAddr.setDescription("The IP address of a pool member in the specified pool.  \nIt is interpreted within the context of an ltmPoolMemberAddrType value.")
ltmPoolMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberPort.setDescription("The port number of the specified pool member.")
ltmPoolMemberConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberConnLimit.setDescription("The maximum connections allowed to the specified pool member.")
ltmPoolMemberRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberRatio.setDescription("The load balancing ratio of the specified pool member, \nused in pool member ratio load balancing mode.")
ltmPoolMemberWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberWeight.setDescription("The weight of the specified pool member, used in dynamic load balancing mode.")
ltmPoolMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberPriority.setDescription("The priority level of the specified pool member, \nused in priority pool member load balancing mode.")
ltmPoolMemberDynamicRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberDynamicRatio.setDescription("The dynamic ratio for the specified pool member, used in load balance \nalgorithm.")
ltmPoolMemberMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,23,3,19,24,0,25,20,4,22,)).subtype(namedValues=NamedValues(("unchecked", 0), ("checking", 1), ("down", 19), ("inband", 2), ("forced-down", 20), ("irule-down", 22), ("inband-down", 23), ("down-manual-resume", 24), ("disabled", 25), ("forced-up", 3), ("up", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPoolMemberMonitorState.setDescription("The internal tmm monitor state for the specified node address.")
ltmPoolMemberMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,23,21,3,18,19,24,0,20,4,22,)).subtype(namedValues=NamedValues(("unchecked", 0), ("checking", 1), ("addr-down", 18), ("down", 19), ("inband", 2), ("forced-down", 20), ("maint", 21), ("irule-down", 22), ("inband-down", 23), ("down-manual-resume", 24), ("forced-up", 3), ("up", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberMonitorStatus.setDescription("The hierarchical load balance state for the specified node address, including parent status. \nunchecked - enabled node that is not monitored;\nchecking  - initial state until monitor reports;\ninband    - the tmm has marked the node up;\nforced-up - forced up manually;\nup        - enabled node when its monitors succeed;\naddr-down   - node address monitor fails or forced down;\ndown        - enabled node when its monitors fail;\nforced-down - node forced down manually;\nmaint       - in maintenance mode;\nirule-down  - an iRule has marked the node down;\ninband-down - the tmm has marked the node down;\ndown-manual-resume - the node is down and must be manually enabled; ")
ltmPoolMemberNewSessionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,)).subtype(namedValues=NamedValues(("user-disabled", 1), ("user-enabled", 2), ("monitor-enabled", 3), ("monitor-disabled", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPoolMemberNewSessionEnable.setDescription("Deprecated!  \nThis field is not interested to user through SNMP interface\nWhether a new session can be enabled or not for the specified pool member.")
ltmPoolMemberSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,1,3,2,)).subtype(namedValues=NamedValues(("enabled", 1), ("addrdisabled", 2), ("servdisabled", 3), ("disabled", 4), ("forceddisabled", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberSessionStatus.setDescription("The hierarchical status of the session, including parent status,\nfor the specified pool member.\nenabled        - new sessions enabled;\naddrdisabled   - new sessions disabled on node address;\nservdisabled   - new sessions disabled on node server;\ndisabled       - new sessions disabled;\nforceddisabled - new sessions forced to be disabled.")
ltmPoolMemberMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberMonitorRule.setDescription("The monitor rule used by the specified pool member. \nIf this value is empty, ltmPoolMonitorRule will be used.")
ltmPoolMemberAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(4,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberAvailabilityState.setDescription("Deprecated!  \nReplaced by ltmPoolMbrStatusAvailState under ltmPoolMemberStatus.\nThe state of the specified pool member availability indicated in color.")
ltmPoolMemberEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberEnabledState.setDescription("Deprecated!  \nReplaced by ltmPoolMbrStatusEnabledState under ltmPoolMemberStatus.\nThe state of the specified pool member activity status, as specified \nby the user.")
ltmPoolMemberDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberDisabledParentType.setDescription("Deprecated!  \nReplaced by ltmPoolMbrStatusParentType under ltmPoolMemberStatus.\nThe type of parent object which disabled the specified pool member.")
ltmPoolMemberStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 18), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatusReason.setDescription("Deprecated!  \nReplaced by ltmPoolMbrStatusDetailReason under ltmPoolMemberStatus.\nThe detail description of the pool member's status of parent object \nwhich disabled the specified pool member.")
ltmPoolMemberNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberNodeName.setDescription("Name of associated name.")
ltmPoolMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4))
ltmPoolMemberStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPoolMemberStatResetStats.setDescription("The action to reset resetable statistics data in  ltmPoolMemberStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmPoolMemberStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatNumber.setDescription("The number of ltmPoolMemberStat entries in the table.")
ltmPoolMemberStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3))
if mibBuilder.loadTexts: ltmPoolMemberStatTable.setDescription("A table containing statistic information of pool members.")
ltmPoolMemberStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatNodeName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPort"))
if mibBuilder.loadTexts: ltmPoolMemberStatEntry.setDescription("Columns in the ltmPoolMemberStat Table")
ltmPoolMemberStatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPoolName.setDescription("The name of a pool.")
ltmPoolMemberStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatAddrType.setDescription("Deprecated! use node_name instead, \nThe IP address type of ltmPoolMemberStatAddr.")
ltmPoolMemberStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatAddr.setDescription("Deprecated! use node_name instead, \nThe IP address of a pool member in the specified pool.  \nIt is interpreted within the context of an ltmPoolMemberStatAddrType value.")
ltmPoolMemberStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPort.setDescription("The port number of the specified pool member.")
ltmPoolMemberStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerPktsIn.setDescription("The number of packets received by the specified pool member from server-side.")
ltmPoolMemberStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerBytesIn.setDescription("The number of bytes received by the specified pool member from server-side.")
ltmPoolMemberStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerPktsOut.setDescription("The number of packets sent to server-side from the specified pool member.")
ltmPoolMemberStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerBytesOut.setDescription("The number of bytes sent to server-side from the specified pool member.")
ltmPoolMemberStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerMaxConns.setDescription("The maximum connections from server-side to the specified pool member.")
ltmPoolMemberStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerTotConns.setDescription("The total connections from server-side to the specified pool member.")
ltmPoolMemberStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 11), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerCurConns.setDescription("The current connections from server-side to the pool member.")
ltmPoolMemberStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaPktsIn.setDescription("The total number of hardware accelerated packets received by the specified pool member.")
ltmPoolMemberStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaBytesIn.setDescription("The total number of hardware accelerated bytes received by the specified pool member.")
ltmPoolMemberStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaPktsOut.setDescription("The total number of hardware accelerated packets sent out from the specified pool member.")
ltmPoolMemberStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaBytesOut.setDescription("The total number of hardware accelerated bytes sent out from the specified pool member.")
ltmPoolMemberStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaMaxConns.setDescription("The maximum hardware accelerated connections to the specified pool member.")
ltmPoolMemberStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaTotConns.setDescription("The total hardware accelerated connections to the specified pool member.")
ltmPoolMemberStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaCurConns.setDescription("The current hardware accelerated connections to the specified pool member.")
ltmPoolMemberStatTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatTotRequests.setDescription("The total number of requests going through the specified pool member.")
ltmPoolMemberStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatTotPvaAssistConn.setDescription("The total number of connections to the specified pool member, \nwhich are partially hardware accelerated.")
ltmPoolMemberStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 21), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatCurrPvaAssistConn.setDescription("The current number of connections to the specified pool member, \nwhich are partially hardware accelerated.")
ltmPoolMemberStatConnqDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqDepth.setDescription("Number of connections currently in queue, sum.")
ltmPoolMemberStatConnqAgeHead = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeHead.setDescription("Age in milliseconds of the oldest queue entry, max.")
ltmPoolMemberStatConnqAgeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeMax.setDescription("Maximum queue entry age in milliseconds, max.")
ltmPoolMemberStatConnqAgeEma = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeEma.setDescription("Exponential moving average queue entry age in milliseconds, max.")
ltmPoolMemberStatConnqAgeEdm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeEdm.setDescription("Exponential decaying maximum queue entry age in milliseconds, max.")
ltmPoolMemberStatConnqServiced = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqServiced.setDescription("Number of entries that have been removed from the queue, sum.")
ltmPoolMemberStatNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 28), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatNodeName.setDescription("node name.")
ltmPoolMemberStatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 29), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatCurSessions.setDescription("The number of current sessions going through the specified pool member.")
ltmPoolMemberStatCurrentConnsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 30), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatCurrentConnsPerSec.setDescription("The number of current connections per second to the specified pool member.")
ltmPoolMemberStatDurationRateExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 31), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatDurationRateExceeded.setDescription("Duration of time the specified pool member has exceeded the configured \nconnection rate limit.")
ltmPoolStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5))
ltmPoolStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusNumber.setDescription("The number of ltmPoolStatus entries in the table.")
ltmPoolStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2))
if mibBuilder.loadTexts: ltmPoolStatusTable.setDescription("A table containing status information of pools.")
ltmPoolStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolStatusName"))
if mibBuilder.loadTexts: ltmPoolStatusEntry.setDescription("Columns in the ltmPoolStatus Table")
ltmPoolStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusName.setDescription("The name of a pool.")
ltmPoolStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,0,5,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("grey", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusAvailState.setDescription("The availability of the specified pool indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed")
ltmPoolStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusEnabledState.setDescription("The activity status of the specified pool, as specified \nby the user.")
ltmPoolStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified pool.")
ltmPoolStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusDetailReason.setDescription("The detail description of the specified pool's status.")
ltmPoolMemberStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6))
ltmPoolMbrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusNumber.setDescription("The number of ltmPoolMemberStatus entries in the table.")
ltmPoolMbrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2))
if mibBuilder.loadTexts: ltmPoolMbrStatusTable.setDescription("A table containing status information of pool members.")
ltmPoolMbrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusNodeName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusPort"))
if mibBuilder.loadTexts: ltmPoolMbrStatusEntry.setDescription("Columns in the ltmPoolMbrStatus Table")
ltmPoolMbrStatusPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusPoolName.setDescription("The name of a pool.")
ltmPoolMbrStatusAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusAddrType.setDescription("The IP address type of ltmPoolMbrStatusAddr.")
ltmPoolMbrStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusAddr.setDescription("The IP address of a pool member in the specified pool.  \nIt is interpreted within the context of an ltmPoolMbrStatusAddrType value.")
ltmPoolMbrStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusPort.setDescription("The port number of the specified pool member.")
ltmPoolMbrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusAvailState.setDescription("The availability of the specified pool member indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
ltmPoolMbrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusEnabledState.setDescription("The activity status of the specified pool member, as specified \nby the user.")
ltmPoolMbrStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified pool member.")
ltmPoolMbrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusDetailReason.setDescription("The detail description of the specified pool member's status.")
ltmPoolMbrStatusNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusNodeName.setDescription("Name of associated name.")
ltmProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6))
ltmAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1))
ltmAuthProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1))
ltmAuthProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileNumber.setDescription("The number of ltmAuthProfile entries in the table.")
ltmAuthProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2))
if mibBuilder.loadTexts: ltmAuthProfileTable.setDescription("A table containing information of BIGIP authentication profiles.")
ltmAuthProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAuthProfileName"))
if mibBuilder.loadTexts: ltmAuthProfileEntry.setDescription("Columns in the ltmAuthProfile Table")
ltmAuthProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileName.setDescription("The name of an authentication profile.")
ltmAuthProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmAuthProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmAuthProfileConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileConfigName.setDescription("The name of the authentication configuration that the specified \nprofile will be using.")
ltmAuthProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(7,6,1,3,2,5,4,0,)).subtype(namedValues=NamedValues(("ldap", 0), ("radius", 1), ("sslccldap", 2), ("sslocsp", 3), ("tacacs", 4), ("generic", 5), ("sslcrldp", 6), ("krbdelegate", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileType.setDescription("The authentication type that the specified profile will be using.")
ltmAuthProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileMode.setDescription("The mode for the specified auth profile.")
ltmAuthProfileCredentialSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(0,)).subtype(namedValues=NamedValues(("httpbasicauth", 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileCredentialSource.setDescription("The source of the credentials that the specified profile will be using.")
ltmAuthProfileRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileRuleName.setDescription("The name of the rule that the specified profile will be using.")
ltmAuthProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileIdleTimeout.setDescription("The idle timeout in seconds for the authentication session.")
ltmAuthProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2))
ltmAuthProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmAuthProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmAuthProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmAuthProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatNumber.setDescription("The number of ltmAuthProfileStat entries in the table.")
ltmAuthProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3))
if mibBuilder.loadTexts: ltmAuthProfileStatTable.setDescription("A table containing statistic information of BIGIP authentication profiles.")
ltmAuthProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatName"))
if mibBuilder.loadTexts: ltmAuthProfileStatEntry.setDescription("Columns in the ltmAuthProfileStat Table")
ltmAuthProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatName.setDescription("The name of an authentication profile.")
ltmAuthProfileStatTotSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatTotSessions.setDescription("The total number of concurrent auth sessions for the specified profile.")
ltmAuthProfileStatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatCurSessions.setDescription("The current number of concurrent auth sessions for the specified profile.")
ltmAuthProfileStatMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatMaxSessions.setDescription("The maximum number of concurrent auth sessions for the specified profile")
ltmAuthProfileStatSuccessResults = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatSuccessResults.setDescription("The total number of auth success results (That is when a \nsuccessful authorization has completed all of the required \nauth services.) for the specified profile.")
ltmAuthProfileStatFailureResults = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatFailureResults.setDescription("The total number of auth failure results (That is when an \nunsuccessful authorization operation has completed.) for the associated \nvirtual server for the specified profile.")
ltmAuthProfileStatWantcredentialResults = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatWantcredentialResults.setDescription("The total number of auth wantcredential results (That is when \nan authorization operation needs an additional credential.) \nfor the specified profile.")
ltmAuthProfileStatErrorResults = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatErrorResults.setDescription("The total number of auth error results (That is when an error \noccurred during authorization has occurred.) for the specified profile.")
ltmClientSsl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2))
ltmClientSslProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1))
ltmClientSslNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslNumber.setDescription("The number of ltmClientSslProfile entries in the table.")
ltmClientSslTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2))
if mibBuilder.loadTexts: ltmClientSslTable.setDescription("A table containing information of the client-side SSL profiles.(BIG-IP acts as an SSL server)")
ltmClientSslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmClientSslName"))
if mibBuilder.loadTexts: ltmClientSslEntry.setDescription("Columns in the ltmClientSsl Table")
ltmClientSslName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslName.setDescription("The name of a client-side SSL profile.")
ltmClientSslConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmClientSslDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmClientSslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslMode.setDescription("The mode of this profile.")
ltmClientSslKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslKey.setDescription("The key file name.")
ltmClientSslCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCert.setDescription("The certificate file name.")
ltmClientSslChain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslChain.setDescription("The certificate chain file name.")
ltmClientSslCafile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCafile.setDescription("The CA certificate file name.")
ltmClientSslCrlfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCrlfile.setDescription("The CRL file name.")
ltmClientSslClientcertca = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslClientcertca.setDescription("The CA certificate file name.")
ltmClientSslCiphers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCiphers.setDescription("The set of ciphers available for client-side SSL negotiation.")
ltmClientSslPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslPassphrase.setDescription("The key passphrase (if any).")
ltmClientSslOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslOptions.setDescription("The SSL options. \nSSLOPT_MICROSOFT_SESS_ID_BUG              = 1\nSSLOPT_NETSCAPE_CHALLENGE_BUG             = 2\nSSLOPT_NETSCAPE_REUSE_CIPHER_CHANGE_BUG   = 8\nSSLOPT_SSLREF2_REUSE_CERT_TYPE_BUG        = 16\nSSLOPT_MICROSOFT_BIG_SSLV3_BUFFER         = 32\nSSLOPT_MSIE_SSLV2_RSA_PADDING             = 64\nSSLOPT_SSLEAY_080_CLIENT_DH_BUG           = 128\nSSLOPT_TLS_D5_BUG                         = 256\nSSLOPT_TLS_BLOCK_PADDING_BUG              = 512\nSSLOPT_DONT_INSERT_EMPTY_FRAGMENTS        = 2048\nSSLOPT_ALL_BUGFIXES                       = 4095\nSSLOPT_PASSIVE_CLOSE                      = 4096\nSSLOPT_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = 65536\nSSLOPT_SINGLE_DH_USE                      = 1048576\nSSLOPT_EPHEMERAL_RSA                      = 2097152\nSSLOPT_CIPHER_SERVER_PREFERENCE           = 4194304\nSSLOPT_TLS_ROLLBACK_BUG                   = 8388608\nSSLOPT_NO_SSLv2                           = 16777216\nSSLOPT_NO_SSLv3                           = 33554432\nSSLOPT_NO_TLSv1                           = 67108864\nSSLOPT_PKCS1_CHECK_1                      = 134217728\nSSLOPT_PKCS1_CHECK_2                      = 268435456\nSSLOPT_NETSCAPE_CA_DN_BUG                 = 536870912\nSSLOPT_NETSCAPE_DEMO_CIPHER_CHANGE_BUG    = 1073741824")
ltmClientSslModsslmethods = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslModsslmethods.setDescription("The ModSSL method emulation.")
ltmClientSslCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCacheSize.setDescription("The SSL session cache size.")
ltmClientSslCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCacheTimeout.setDescription("The SSL session cache timeout.")
ltmClientSslRenegotiatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslRenegotiatePeriod.setDescription("Time-based trigger.")
ltmClientSslRenegotiateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslRenegotiateSize.setDescription("Throughput-based trigger MB.")
ltmClientSslRenegotiateMaxRecordDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslRenegotiateMaxRecordDelay.setDescription("The timeout of renegotiation.")
ltmClientSslHandshakeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslHandshakeTimeout.setDescription("The handshake timeout in seconds.")
ltmClientSslAlertTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAlertTimeout.setDescription("The alert timeout in seconds.")
ltmClientSslPeerCertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(0,3,1,2,)).subtype(namedValues=NamedValues(("ignore", 0), ("require", 1), ("request", 2), ("auto", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslPeerCertMode.setDescription("The mode of peer certification.")
ltmClientSslAuthenticateOnce = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAuthenticateOnce.setDescription("The feature to request client cert once or with each SSL\nsession renegotiation.")
ltmClientSslAuthenticateDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAuthenticateDepth.setDescription("The maximum traversal depth for client certificate chain.")
ltmClientSslUncleanShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 25), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslUncleanShutdown.setDescription("The state of shutdown for this SSL, whether it is unclean \nshutdown (not sending a close notification alert when closing \nconnection.).")
ltmClientSslStrictResume = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStrictResume.setDescription("Whether to enforce strict SSL session resumption \nper RFC2246")
ltmClientSslAllowNonssl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAllowNonssl.setDescription("Whether to allow non-SSL connections to pass through as \ncleartext.")
ltmClientSslSessionTicket = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 28), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslSessionTicket.setDescription("Whether to enforce session ticket per RFC5077.")
ltmClientSslFwdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 29), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpEnabled.setDescription("Whether to enable SSL Forward Proxy.")
ltmClientSslFwdpCaKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 30), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCaKey.setDescription("The CA key object name for Foward Proxy.")
ltmClientSslFwdpCaCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 31), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCaCert.setDescription("The CA certificate object name for Foward Proxy.")
ltmClientSslFwdpCaPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 32), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCaPassphrase.setDescription("The CA key passphrase for Foward Proxy (if any).")
ltmClientSslFwdpCertLifespan = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCertLifespan.setDescription("The lifespan of the generated certificates for Foward Proxy.")
ltmClientSslFwdpCertExtensionIncludes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCertExtensionIncludes.setDescription("The certificate extensions to include in generated certificates for\nForward Proxy.\nSSL_FWDP_CERT_EXT_AUTHORITY_KEY_IDENTIFIER      = 1\nSSL_FWDP_CERT_EXT_BASIC_CONSTRAINTS             = 2\nSSL_FWDP_CERT_EXT_CERTIFICATE_POLICIES          = 4\nSSL_FWDP_CERT_EXT_CRL_DISTRIBUTION_POINTS       = 8\nSSL_FWDP_CERT_EXT_EXTENDED_KEY_USAGE            = 16\nSSL_FWDP_CERT_EXT_FRESH_CRL                     = 32\nSSL_FWDP_CERT_EXT_ISSUER_ALTERNATIVE_NAME       = 64\nSSL_FWDP_CERT_EXT_KEY_USAGE                     = 128\nSSL_FWDP_CERT_EXT_SUBJECT_ALTERNATIVE_NAME      = 256\nSSL_FWDP_CERT_EXT_SUBJECT_DIRECTORY_ATTRIBUTES  = 512\nSSL_FWDP_CERT_EXT_SUBJECT_KEY_IDENTIFIER        = 1024")
ltmClientSslFwdpLookupByIpaddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 35), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpLookupByIpaddrPort.setDescription("Whether to enable SSL Forward Proxy certificate caching by IPAddr-Port.")
ltmClientSslProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2))
ltmClientSslStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmClientSslStatResetStats.setDescription("The action to reset resetable statistics data in  ltmClientSslProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmClientSslStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNumber.setDescription("The number of ltmClientSslProfileStat entries in the table.")
ltmClientSslStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3))
if mibBuilder.loadTexts: ltmClientSslStatTable.setDescription("A table containing information of the client-side SSL profiles.(BIG-IP acts as an SSL server)")
ltmClientSslStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmClientSslStatName"))
if mibBuilder.loadTexts: ltmClientSslStatEntry.setDescription("Columns in the ltmClientSslStat Table")
ltmClientSslStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatName.setDescription("The name of a client-side SSL  profile.")
ltmClientSslStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCurConns.setDescription("The current number of concurrent connections with \nestablished SSL sessions being maintained by the filter.")
ltmClientSslStatMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMaxConns.setDescription("The maximum number of concurrent connections with \nestablished SSL sessions being maintained by the filter.")
ltmClientSslStatCurNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCurNativeConns.setDescription("The current number of concurrent native connections with \nestablished SSL sessions being maintained by the filter.")
ltmClientSslStatMaxNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMaxNativeConns.setDescription("The maximum number of concurrent native connections with \nestablished SSL sessions being maintained by the filter.")
ltmClientSslStatTotNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTotNativeConns.setDescription("The total number of concurrent native connections with \nestablished SSL sessions being maintained by the filter.")
ltmClientSslStatCurCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 7), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCurCompatConns.setDescription("The current number of concurrent compat connections with \nestablished SSL sessions being maintained by the filter.")
ltmClientSslStatMaxCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMaxCompatConns.setDescription("The maximum number of concurrent compat connections with \nestablished SSL sessions being maintained by the filter.")
ltmClientSslStatTotCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTotCompatConns.setDescription("The total number of concurrent compat connections with \nestablished SSL sessions being maintained by the filter.")
ltmClientSslStatEncryptedBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEncryptedBytesIn.setDescription("The total encrypted bytes received.")
ltmClientSslStatEncryptedBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEncryptedBytesOut.setDescription("The total encrypted bytes sent.")
ltmClientSslStatDecryptedBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDecryptedBytesIn.setDescription("The total decrypted bytes received.")
ltmClientSslStatDecryptedBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDecryptedBytesOut.setDescription("The total decrypted bytes sent.")
ltmClientSslStatRecordsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordsIn.setDescription("The total records received.")
ltmClientSslStatRecordsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordsOut.setDescription("The total records sent.")
ltmClientSslStatFullyHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatFullyHwAcceleratedConns.setDescription("Fully hardware-accelerated implies usage of the Cavium \nNitrox or similar hardware accelerator such that all \nsignificant cryptographic operations are offloaded, \nincluding but not limited to the SSL handshake (at least \nthe RSA/DSA/DH operations) and record processing (at least \nthe bulk cipher plus MAC).")
ltmClientSslStatPartiallyHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPartiallyHwAcceleratedConns.setDescription("Partially hardware-accelerated indicates that at least the \nRSA decryptions are offloaded.")
ltmClientSslStatNonHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNonHwAcceleratedConns.setDescription("Non-accelerated connections are those for which no \nsteady-state hardware acceleration is available (either \nbecause no hardware accelerators are available or because \nthe necessary cryptographic operations are unsupported).  \nBecause the extent of hardware acceleration may not be known \nuntil a connection has closed (mid-stream SSL handshakes \nmight renegotiate an SSL session not supported by hardware \nacceleration), this statistic will not be updated for a  \ngiven connection until it has closed.")
ltmClientSslStatPrematureDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPrematureDisconnects.setDescription("The number of connections disconnected before SSL session \nestablishment: the total number of connections that were \nprematurely closed before an SSL session was established, \nnot including connections in passthrough mode.")
ltmClientSslStatMidstreamRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMidstreamRenegotiations.setDescription("The number of mid-stream SSL re-negotiations, not including \ninitial SSL session establishment.")
ltmClientSslStatSessCacheCurEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 21), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheCurEntries.setDescription("The number of the current entries in this cache.")
ltmClientSslStatSessCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheHits.setDescription("The total number of the cache hits.")
ltmClientSslStatSessCacheLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheLookups.setDescription("The total number of the cache lookups.")
ltmClientSslStatSessCacheOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheOverflows.setDescription("The total number of the cache overflows.")
ltmClientSslStatSessCacheInvalidations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheInvalidations.setDescription("The total number of the session invalidations.")
ltmClientSslStatPeercertValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPeercertValid.setDescription("The total number of the valid certificates.")
ltmClientSslStatPeercertInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPeercertInvalid.setDescription("The total number of the invalid certificates.")
ltmClientSslStatPeercertNone = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPeercertNone.setDescription("The total number of connections without certificates.")
ltmClientSslStatHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatHandshakeFailures.setDescription("The total number of handshake failures.")
ltmClientSslStatBadRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatBadRecords.setDescription("The total number of the bad records.")
ltmClientSslStatFatalAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatFatalAlerts.setDescription("The total number of the fatal alerts.")
ltmClientSslStatSslv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSslv2.setDescription("The total connections for SSL protocol version 2.")
ltmClientSslStatSslv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSslv3.setDescription("The total connections for SSL protocol version 3.")
ltmClientSslStatTlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTlsv1.setDescription("The total connections for SSL TLS protocol version 1.")
ltmClientSslStatAdhKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatAdhKeyxchg.setDescription("The anonymous Diffie-Hellman.")
ltmClientSslStatDhDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDhDssKeyxchg.setDescription("Deprecated! DSS certificate is obsolete in BIGIP.\nThe diffie-Hellman w/ DSS certificate.")
ltmClientSslStatDhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDhRsaKeyxchg.setDescription("The diffie-Hellman w/ RSA certificate.")
ltmClientSslStatDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDssKeyxchg.setDescription("Deprecated! DSS certificate is obsolete in BIGIP.\nThe DSS certificate.")
ltmClientSslStatEdhDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEdhDssKeyxchg.setDescription("Deprecated! DSS certificate is obsolete in BIGIP.\nThe ephemeral Diffie-Hellman w/ DSS cert.")
ltmClientSslStatRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRsaKeyxchg.setDescription("The RSA certificate.")
ltmClientSslStatNullBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNullBulk.setDescription("No encryption.")
ltmClientSslStatAesBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatAesBulk.setDescription("Advances Encryption Standard (CBC).")
ltmClientSslStatDesBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDesBulk.setDescription("Digital Encryption Standard (CBC).")
ltmClientSslStatIdeaBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatIdeaBulk.setDescription("IDEA (old SSLv2 cipher).")
ltmClientSslStatRc2Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRc2Bulk.setDescription("Rivest Cipher 2 (CBC).")
ltmClientSslStatRc4Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRc4Bulk.setDescription("Rivest Cipher 4 (CBC).")
ltmClientSslStatNullDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNullDigest.setDescription("No message authentication.")
ltmClientSslStatMd5Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMd5Digest.setDescription("Message Digest 5.")
ltmClientSslStatShaDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatShaDigest.setDescription("Secure Hash Algorithm.")
ltmClientSslStatNotssl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNotssl.setDescription("The total number of the bad client greetings.")
ltmClientSslStatEdhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEdhRsaKeyxchg.setDescription("Ephemeral Diffie-Hellman w/ RSA cert.")
ltmClientSslStatSecureHandshakes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSecureHandshakes.setDescription("The number of handshakes, including mid-stream re-negotiations,\nperformed with peers supporting SSL secure renegotiation.")
ltmClientSslStatInsecureHandshakeAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatInsecureHandshakeAccepts.setDescription("The number of handshakes, including mid-stream re-negotiations,\nperformed with peers not supporting SSL secure renegotiation.")
ltmClientSslStatInsecureHandshakeRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatInsecureHandshakeRejects.setDescription("The number of rejected initial handshakes with peers\nnot supporting SSL secure renegotiation.")
ltmClientSslStatInsecureRenegotiationRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatInsecureRenegotiationRejects.setDescription("The number of rejected renegotiation attempts by peers\nnot supporting SSL secure renegotiation.")
ltmClientSslStatSniRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSniRejects.setDescription("The number of rejected handshake attempts by peers\nnot supporting SSL SNI extension or having mismatched\nserver names.")
ltmClientSslStatTlsv11 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTlsv11.setDescription("The total connections for SSL TLS protocol version 1.1.")
ltmClientSslStatTlsv12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTlsv12.setDescription("The total connections for SSL TLS protocol version 1.2.")
ltmClientSslStatDtlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDtlsv1.setDescription("The total connections for SSL DTLS protocol version 1.0.")
ltmClientSslStatReused = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatReused.setDescription("The total reused session ticket sessions.")
ltmClientSslStatReuseFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatReuseFailed.setDescription("The total failed reused session ticket sessions.")
ltmClientSslStatEcdheRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEcdheRsaKeyxchg.setDescription("Ephemeral ECDH w/ RSA cert.")
ltmClientSslStatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatConns.setDescription("The total connections using SSL FWDP feature.")
ltmClientSslStatCachedCerts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCachedCerts.setDescription("The total cached SSL FWDP certificates.")
ltmServerSsl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3))
ltmServerSslProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1))
ltmServerSslNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslNumber.setDescription("The number of ltmServerSslProfile entries in the table.")
ltmServerSslTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2))
if mibBuilder.loadTexts: ltmServerSslTable.setDescription("A table containing statistic information of the server-side SSL profiles.(BIG-IP acts as an SSL client)")
ltmServerSslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmServerSslName"))
if mibBuilder.loadTexts: ltmServerSslEntry.setDescription("Columns in the ltmServerSsl Table")
ltmServerSslName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslName.setDescription("The name of a server-side SSL  profile.")
ltmServerSslConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmServerSslDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmServerSslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslMode.setDescription("The status of this profile.")
ltmServerSslKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslKey.setDescription("The key file name.")
ltmServerSslCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCert.setDescription("The certificate file name.")
ltmServerSslChain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslChain.setDescription("The certificate chain file name.")
ltmServerSslCafile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCafile.setDescription("The CA certificate file name.")
ltmServerSslCrlfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCrlfile.setDescription("The CRL file name.")
ltmServerSslCiphers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCiphers.setDescription("The set of ciphers available for server-side SSL negotiation.")
ltmServerSslPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslPassphrase.setDescription("The key passphrase (if any).")
ltmServerSslOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslOptions.setDescription("The SSL options. \nSSLOPT_MICROSOFT_SESS_ID_BUG              = 1\nSSLOPT_NETSCAPE_CHALLENGE_BUG             = 2\nSSLOPT_NETSCAPE_REUSE_CIPHER_CHANGE_BUG   = 8\nSSLOPT_SSLREF2_REUSE_CERT_TYPE_BUG        = 16\nSSLOPT_MICROSOFT_BIG_SSLV3_BUFFER         = 32\nSSLOPT_MSIE_SSLV2_RSA_PADDING             = 64\nSSLOPT_SSLEAY_080_CLIENT_DH_BUG           = 128\nSSLOPT_TLS_D5_BUG                         = 256\nSSLOPT_TLS_BLOCK_PADDING_BUG              = 512\nSSLOPT_DONT_INSERT_EMPTY_FRAGMENTS        = 2048\nSSLOPT_ALL_BUGFIXES                       = 4095\nSSLOPT_PASSIVE_CLOSE                      = 4096\nSSLOPT_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = 65536\nSSLOPT_SINGLE_DH_USE                      = 1048576\nSSLOPT_EPHEMERAL_RSA                      = 2097152\nSSLOPT_CIPHER_SERVER_PREFERENCE           = 4194304\nSSLOPT_TLS_ROLLBACK_BUG                   = 8388608\nSSLOPT_NO_SSLv2                           = 16777216\nSSLOPT_NO_SSLv3                           = 33554432\nSSLOPT_NO_TLSv1                           = 67108864\nSSLOPT_PKCS1_CHECK_1                      = 134217728\nSSLOPT_PKCS1_CHECK_2                      = 268435456\nSSLOPT_NETSCAPE_CA_DN_BUG                 = 536870912\nSSLOPT_NETSCAPE_DEMO_CIPHER_CHANGE_BUG    = 1073741824")
ltmServerSslModsslmethods = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslModsslmethods.setDescription("The status of using ModSSL method emulation.")
ltmServerSslRenegotiatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslRenegotiatePeriod.setDescription("Time-based trigger.")
ltmServerSslRenegotiateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslRenegotiateSize.setDescription("Throughput-based trigger MB.")
ltmServerSslPeerCertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("ignore", 0), ("require", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslPeerCertMode.setDescription("The mode of peer certification.")
ltmServerSslAuthenticateOnce = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAuthenticateOnce.setDescription("The feature to request server cert with each SSL session \nrenegotiation.")
ltmServerSslAuthenticateDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAuthenticateDepth.setDescription("The max traversal depth for client certificate chain.")
ltmServerSslAuthenticateName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAuthenticateName.setDescription("The expected server certificate DN(Domain Name).")
ltmServerSslUncleanShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslUncleanShutdown.setDescription("The state of shutdown for this SSL, whether it is unclean \nshutdown (not sending a close notification alert when closing \nconnection.).")
ltmServerSslStrictResume = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStrictResume.setDescription("The feature whether to enforce strict SSL session resumption \nper RFC2246")
ltmServerSslHandshakeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslHandshakeTimeout.setDescription("The handshake timeout in seconds.")
ltmServerSslAlertTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAlertTimeout.setDescription("The alert timeout in seconds.")
ltmServerSslCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCacheSize.setDescription("The SSL session cache size.")
ltmServerSslCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCacheTimeout.setDescription("The SSL session cache timeout.")
ltmServerSslSessionTicket = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslSessionTicket.setDescription("Whether to enforce session ticket per RFC5077.")
ltmServerSslFwdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslFwdpEnabled.setDescription("Whether to enable SSL Forward Proxy.")
ltmServerSslDropExpCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 28), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslDropExpCert.setDescription("Whether to drop or ignore connection when server certificate is expired.")
ltmServerSslDropUntrustCa = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 29), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslDropUntrustCa.setDescription("Whether to drop or ignore connection when server certificate has invalid CA.")
ltmServerSslProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2))
ltmServerSslStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmServerSslStatResetStats.setDescription("The action to reset resetable statistics data in  ltmServerSslProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmServerSslStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNumber.setDescription("The number of ltmServerSslProfileStat entries in the table.")
ltmServerSslStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3))
if mibBuilder.loadTexts: ltmServerSslStatTable.setDescription("A table containing statistic information of the server-side SSL profiles.(BIG-IP acts as an SSL client)")
ltmServerSslStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmServerSslStatName"))
if mibBuilder.loadTexts: ltmServerSslStatEntry.setDescription("Columns in the ltmServerSslStat Table")
ltmServerSslStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatName.setDescription("The name of a server-side SSL profile.")
ltmServerSslStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatCurConns.setDescription("The current number of concurrent connections with \nestablished SSL sessions being maintained by the filter.")
ltmServerSslStatMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMaxConns.setDescription("The maximum number of concurrent connections with \nestablished SSL sessions being maintained by the filter.")
ltmServerSslStatCurNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatCurNativeConns.setDescription("The current number of concurrent native connections with \nestablished SSL sessions being maintained by the filter.")
ltmServerSslStatMaxNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMaxNativeConns.setDescription("The maximum number of concurrent native connections with \nestablished SSL sessions being maintained by the filter.")
ltmServerSslStatTotNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTotNativeConns.setDescription("The total number of concurrent native connections with \nestablished SSL sessions being maintained by the filter.")
ltmServerSslStatCurCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 7), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatCurCompatConns.setDescription("The current number of concurrent compat connections with \nestablished SSL sessions being maintained by the filter.")
ltmServerSslStatMaxCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMaxCompatConns.setDescription("The maximum number of concurrent compat connections with \nestablished SSL sessions being maintained by the filter.")
ltmServerSslStatTotCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTotCompatConns.setDescription("The total number of concurrent compat connections with \nestablished SSL sessions being maintained by the filter.")
ltmServerSslStatEncryptedBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEncryptedBytesIn.setDescription("The total encrypted bytes received.")
ltmServerSslStatEncryptedBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEncryptedBytesOut.setDescription("The total encrypted bytes sent.")
ltmServerSslStatDecryptedBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDecryptedBytesIn.setDescription("The total decrypted bytes received.")
ltmServerSslStatDecryptedBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDecryptedBytesOut.setDescription("The total decrypted bytes sent.")
ltmServerSslStatRecordsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRecordsIn.setDescription("The total records received.")
ltmServerSslStatRecordsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRecordsOut.setDescription("The total records sent.")
ltmServerSslStatFullyHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatFullyHwAcceleratedConns.setDescription("Fully hardware-accelerated implies usage of the Cavium \nNitrox or similar hardware accelerator such that all \nsignificant cryptographic operations are offloaded, \nincluding but not limited to the SSL handshake (at least \nthe RSA/DSA/DH operations) and record processing (at least \nthe bulk cipher plus MAC).")
ltmServerSslStatPartiallyHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPartiallyHwAcceleratedConns.setDescription("Partially hardware-accelerated indicates that at least the \nRSA decryptions are offloaded.")
ltmServerSslStatNonHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNonHwAcceleratedConns.setDescription("Non-accelerated connections are those for which no \nsteady-state hardware acceleration is available (either \nbecause no hardware accelerators are available or because \nthe necessary cryptographic operations are unsupported).  \nBecause the extent of hardware acceleration may not be known \nuntil a connection has closed (mid-stream SSL handshakes \nmight renegotiate an SSL session not supported by hardware \nacceleration), this statistic will not be updated for a  \ngiven connection until it has closed.")
ltmServerSslStatPrematureDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPrematureDisconnects.setDescription("The number of connections disconnected before SSL session \nestablishment: the total number of connections that were \nprematurely closed before an SSL session was established, \nnot including connections in pass-through mode.")
ltmServerSslStatMidstreamRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMidstreamRenegotiations.setDescription("The number of mid-stream SSL re-negotiations, not including \ninitial SSL session establishment.")
ltmServerSslStatSessCacheCurEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 21), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheCurEntries.setDescription("The number of the current entries in this cache.")
ltmServerSslStatSessCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheHits.setDescription("The total number of the cache hits.")
ltmServerSslStatSessCacheLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheLookups.setDescription("The total number of the cache lookups.")
ltmServerSslStatSessCacheOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheOverflows.setDescription("The total number of the cache overflows.")
ltmServerSslStatSessCacheInvalidations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheInvalidations.setDescription("The total number of the session invalidations.")
ltmServerSslStatPeercertValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPeercertValid.setDescription("The total number of the valid certificates.")
ltmServerSslStatPeercertInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPeercertInvalid.setDescription("The total number of the invalid certificates.")
ltmServerSslStatPeercertNone = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPeercertNone.setDescription("The total number of connections without certificates.")
ltmServerSslStatHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatHandshakeFailures.setDescription("The total number of handshake failures.")
ltmServerSslStatBadRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatBadRecords.setDescription("The total number of the bad records.")
ltmServerSslStatFatalAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatFatalAlerts.setDescription("The total number of the fatal alerts.")
ltmServerSslStatSslv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSslv2.setDescription("The total connections for SSL protocol version 2.")
ltmServerSslStatSslv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSslv3.setDescription("The total connections for SSL protocol version 3.")
ltmServerSslStatTlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTlsv1.setDescription("The total connections for SSL TLS protocol version 1.")
ltmServerSslStatAdhKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatAdhKeyxchg.setDescription("The anonymous Diffie-Hellman.")
ltmServerSslStatDhDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDhDssKeyxchg.setDescription("Deprecated! DSS certificate is obsolete in BIGIP.\nThe diffie-Hellman w/ DSS certificate.")
ltmServerSslStatDhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDhRsaKeyxchg.setDescription("The diffie-Hellman w/ RSA certificate.")
ltmServerSslStatDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDssKeyxchg.setDescription("Deprecated! DSS certificate is obsolete in BIGIP.\nThe DSS certificate.")
ltmServerSslStatEdhDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEdhDssKeyxchg.setDescription("Deprecated! DSS certificate is obsolete in BIGIP.\nThe ephemeral Diffie-Hellman w/ DSS cert.")
ltmServerSslStatRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRsaKeyxchg.setDescription("The RSA certificate.")
ltmServerSslStatNullBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNullBulk.setDescription("No encryption.")
ltmServerSslStatAesBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatAesBulk.setDescription("Advances Encryption Standard (CBC).")
ltmServerSslStatDesBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDesBulk.setDescription("Digital Encryption Standard (CBC).")
ltmServerSslStatIdeaBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatIdeaBulk.setDescription("IDEA (old SSLv2 cipher).")
ltmServerSslStatRc2Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRc2Bulk.setDescription("Rivest Cipher 2 (CBC).")
ltmServerSslStatRc4Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRc4Bulk.setDescription("Rivest Cipher 4 (CBC).")
ltmServerSslStatNullDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNullDigest.setDescription("No message authentication.")
ltmServerSslStatMd5Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMd5Digest.setDescription("Message Digest 5.")
ltmServerSslStatShaDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatShaDigest.setDescription("Secure Hash Algorithm.")
ltmServerSslStatNotssl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNotssl.setDescription("The total number of the bad client greetings.")
ltmServerSslStatEdhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEdhRsaKeyxchg.setDescription("Ephemeral Diffie-Hellman w/ RSA cert.")
ltmServerSslStatSecureHandshakes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSecureHandshakes.setDescription("The number of handshakes, including mid-stream re-negotiations,\nperformed with peers supporting SSL secure renegotiation.")
ltmServerSslStatInsecureHandshakeAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatInsecureHandshakeAccepts.setDescription("The number of handshakes, including mid-stream re-negotiations,\nperformed with peers not supporting SSL secure renegotiation.")
ltmServerSslStatInsecureHandshakeRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatInsecureHandshakeRejects.setDescription("The number of rejected initial handshakes with peers\nnot supporting SSL secure renegotiation.")
ltmServerSslStatInsecureRenegotiationRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatInsecureRenegotiationRejects.setDescription("The number of rejected renegotiation attempts by peers\nnot supporting SSL secure renegotiation.")
ltmServerSslStatSniRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSniRejects.setDescription("The number of rejected handshake attempts by peers\nnot supporting SSL SNI extension or having mismatched\nserver names.")
ltmServerSslStatTlsv11 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTlsv11.setDescription("The total connections for SSL TLS protocol version 1.1.")
ltmServerSslStatTlsv12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTlsv12.setDescription("The total connections for SSL TLS protocol version 1.2.")
ltmServerSslStatDtlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDtlsv1.setDescription("The total connections for SSL DTLS protocol version 1.")
ltmServerSslStatReused = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatReused.setDescription("The total reused session ticket sessions.")
ltmServerSslStatReuseFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatReuseFailed.setDescription("The total failed reused session ticket sessions.")
ltmServerSslStatEcdheRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEcdheRsaKeyxchg.setDescription("Ephemeral ECDH w/ RSA cert.")
ltmServerSslStatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatConns.setDescription("The total connections using SSL FWDP feature.")
ltmConnPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4))
ltmConnPoolProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1))
ltmConnPoolProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileNumber.setDescription("The number of ltmConnPoolProfile entries in the table.")
ltmConnPoolProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2))
if mibBuilder.loadTexts: ltmConnPoolProfileTable.setDescription("A table containing information of connection pool profiles.")
ltmConnPoolProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileName"))
if mibBuilder.loadTexts: ltmConnPoolProfileEntry.setDescription("Columns in the ltmConnPoolProfile Table")
ltmConnPoolProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileName.setDescription("The name of a connection pool profile.")
ltmConnPoolProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmConnPoolProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmConnPoolProfileSrcMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileSrcMaskType.setDescription("The IP address type of ltmConnPoolSrcMask")
ltmConnPoolProfileSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileSrcMask.setDescription("The mask applied to source address to determine eligibility \nfor reuse. It is interpreted within the context of an \nltmConnPoolSrcMaskType value.")
ltmConnPoolProfileMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileMaxSize.setDescription("The maximum number of connections in pool.")
ltmConnPoolProfileMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileMaxAge.setDescription("The maximum time in seconds to reuse of connections. \nDon't reuse connections older than max_age seconds.")
ltmConnPoolProfileMaxReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileMaxReuse.setDescription("The maximum times to reuse of connections. \nDon't reuse connections older than max_reuse times.")
ltmConnPoolProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileIdleTimeout.setDescription("The idle timeout for connections in the pool.")
ltmConnPoolProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2))
ltmConnPoolProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmConnPoolProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmConnPoolProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmConnPoolProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatNumber.setDescription("The number of ltmConnPoolProfileStat entries in the table.")
ltmConnPoolProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3))
if mibBuilder.loadTexts: ltmConnPoolProfileStatTable.setDescription("A table containing statistic information of connection pool profiles.")
ltmConnPoolProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatName"))
if mibBuilder.loadTexts: ltmConnPoolProfileStatEntry.setDescription("Columns in the ltmConnPoolProfileStat Table")
ltmConnPoolProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatName.setDescription("The name of a connection pool profile.")
ltmConnPoolProfileStatCurSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatCurSize.setDescription("The number of currently idle connections in the pool.")
ltmConnPoolProfileStatMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatMaxSize.setDescription("The number of idle connections in the pool.")
ltmConnPoolProfileStatReuses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatReuses.setDescription("The number of times a connection was reused from the pool.")
ltmConnPoolProfileStatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatConnects.setDescription("The number of times a new connection was initiated.")
ltmFastL4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5))
ltmFastL4Profile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1))
ltmFastL4ProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileNumber.setDescription("The number of ltmFastL4Profile entries in the table.")
ltmFastL4ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2))
if mibBuilder.loadTexts: ltmFastL4ProfileTable.setDescription("A table containing information of fast L4  profiles.")
ltmFastL4ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileName"))
if mibBuilder.loadTexts: ltmFastL4ProfileEntry.setDescription("Columns in the ltmFastL4Profile Table")
ltmFastL4ProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileName.setDescription("The name of a fast L4 profile.")
ltmFastL4ProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmFastL4ProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmFastL4ProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileResetOnTimeout.setDescription("The feature of reset for idle timeout.\nIf true and a TCP connection exceeds its idle_timeout, send a reset \nin addition to deleting the connection.")
ltmFastL4ProfileIpFragReass = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileIpFragReass.setDescription("The feature for reassembling IP fragments. If true, reassemble IP fragments.")
ltmFastL4ProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileIdleTimeout.setDescription("The number of seconds without traffic before a connection is eligible \nfor deletion.")
ltmFastL4ProfileTcpHandshakeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpHandshakeTimeout.setDescription("The number of seconds without traffic before a connection in the SYN \nreceived state is eligible for deletion. \nIf set to 0, ltmFastL4ProfileIdleTimeout will be used.")
ltmFastL4ProfileMssOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileMssOverride.setDescription("If non-zero and less than the 1460 default, this value overrides \nthe maximum segment size")
ltmFastL4ProfilePvaAccelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,)).subtype(namedValues=NamedValues(("full", 0), ("partial", 1), ("none", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfilePvaAccelMode.setDescription("The preferred Packet Velocity ASIC (PVA) acceleration mode.")
ltmFastL4ProfileTcpTimestampMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("preserve", 0), ("strip", 1), ("rewrite", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpTimestampMode.setDescription("The option to preserver, strip or rewrite TCP timestamps.")
ltmFastL4ProfileTcpWscaleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("preserve", 0), ("strip", 1), ("rewrite", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpWscaleMode.setDescription("The option to preserver or strip window scale option.")
ltmFastL4ProfileTcpGenerateIsn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpGenerateIsn.setDescription("The option to generate own sequence numbers on all SYNs conformant\nwith RFC1948, and hence allowing timestamp recycling.")
ltmFastL4ProfileTcpStripSack = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpStripSack.setDescription("The option to block TCP SackOK option from passing to server \non an initiating SYN.")
ltmFastL4ProfileIpTosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileIpTosToClient.setDescription("The IP type of service set in packets sent to the client-side.")
ltmFastL4ProfileIpTosToServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileIpTosToServer.setDescription("The IP type of service set in packets sent to the server-side.")
ltmFastL4ProfileLinkQosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLinkQosToClient.setDescription("The link quality of service set in packets sent to the client-side.")
ltmFastL4ProfileLinkQosToServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLinkQosToServer.setDescription("The link quality of service set in packets sent to the server-side.")
ltmFastL4ProfileRttFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileRttFromClient.setDescription("The option to use TCP timestamp options to measure the round trip \ntime to the client.")
ltmFastL4ProfileRttFromServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileRttFromServer.setDescription("The option to use TCP timestamp options to measure the round trip \ntime to the server.")
ltmFastL4ProfileTcpCloseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpCloseTimeout.setDescription("The number of seconds without traffic before a connection in the FIN \nreceived state is eligible for deletion. \nThis is only used when ltmFastL4ProfileLooseInitiation or \nltmFastL4ProfileLooseClose is enabled.")
ltmFastL4ProfileLooseInitiation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLooseInitiation.setDescription("The option to allow any TCP packet to initiate a connection (rather\nthan requiring a SYN.")
ltmFastL4ProfileLooseClose = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLooseClose.setDescription("The option to aggressively close out a connection by allowing TMM to switch\nthe ltmFastL4ProfileIdleTimeout to ltmFastL4ProfileTcpCloseTimeout\nonce the first FIN packet has been seen.")
ltmFastL4ProfileHardSyncookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileHardSyncookie.setDescription("The option to enable hardware SYN cookie protection using Packet Velocity ASIC (PVA).")
ltmFastL4ProfileSoftSyncookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileSoftSyncookie.setDescription("The state indicating whether or not software SYN cookie protection is enable.")
ltmFastL4ProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2))
ltmFastL4ProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFastL4ProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmFastL4ProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmFastL4ProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatNumber.setDescription("The number of ltmFastL4ProfileStat entries in the table.")
ltmFastL4ProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3))
if mibBuilder.loadTexts: ltmFastL4ProfileStatTable.setDescription("A table containing statistics information of fast L4 profiles.")
ltmFastL4ProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatName"))
if mibBuilder.loadTexts: ltmFastL4ProfileStatEntry.setDescription("Columns in the ltmFastL4ProfileStat Table")
ltmFastL4ProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatName.setDescription("The name of a fast L4 profile.")
ltmFastL4ProfileStatOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatOpen.setDescription("The number of current open connections for the specified fast L4 profile.")
ltmFastL4ProfileStatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatAccepts.setDescription("The number of accepted connections for the specified fast L4 profile.")
ltmFastL4ProfileStatAcceptfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatAcceptfails.setDescription("The number of not accepted connections for the specified fast L4 profile.")
ltmFastL4ProfileStatExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatExpires.setDescription("The number of expired connections due to idle timeout for the specified fast L4 profile.")
ltmFastL4ProfileStatRxbadpkt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadpkt.setDescription("The number of malformed packets for the specified fast L4 profile.")
ltmFastL4ProfileStatRxunreach = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxunreach.setDescription("The number of received ICMP unreach/TCP RST for the specified fast L4 profile.")
ltmFastL4ProfileStatRxbadunreach = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadunreach.setDescription("The number of received TCP RST outside the current window for the specified fast L4 profile.")
ltmFastL4ProfileStatRxbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadsum.setDescription("The number of bad checksum for the specified fast L4 profile.")
ltmFastL4ProfileStatTxerrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatTxerrors.setDescription("The number of transmit datagram errors for the specified fast L4 profile.")
ltmFastL4ProfileStatSyncookIssue = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookIssue.setDescription("The number of syncookies issued for the specified fast L4 profile.")
ltmFastL4ProfileStatSyncookAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookAccept.setDescription("The number of syncookies accepted for the specified fast L4 profile.")
ltmFastL4ProfileStatSyncookReject = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookReject.setDescription("The number of syncookies rejected for the specified fast L4 profile.")
ltmFastL4ProfileStatServersynrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatServersynrtx.setDescription("The number of retransmissions of SYN to server for a syncookied connection for the specified fast L4 profile.")
ltmFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6))
ltmFtpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1))
ltmFtpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileNumber.setDescription("The number of ltmFtpProfile entries in the table.")
ltmFtpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2))
if mibBuilder.loadTexts: ltmFtpProfileTable.setDescription("A table containing information of FTP profiles.")
ltmFtpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFtpProfileName"))
if mibBuilder.loadTexts: ltmFtpProfileEntry.setDescription("Columns in the ltmFtpProfile Table")
ltmFtpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileName.setDescription("The name of a FTP profile.")
ltmFtpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmFtpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmFtpProfileTranslateExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileTranslateExtended.setDescription("Whether or not automatically translated RFC2428 extended requests\nEPSV and EPRT to PASV and PORT when talking to IPv4 servers.")
ltmFtpProfileDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileDataPort.setDescription("The data channel port used for this FTP profile. By default, \nthis is 20, but may need to be changed for non-default port FTP.")
ltmHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7))
ltmHttpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1))
ltmHttpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileNumber.setDescription("The number of ltmHttpProfile entries in the table.")
ltmHttpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2))
if mibBuilder.loadTexts: ltmHttpProfileTable.setDescription("A table containing information of HTTP profiles.")
ltmHttpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpProfileName"))
if mibBuilder.loadTexts: ltmHttpProfileEntry.setDescription("Columns in the ltmHttpProfile Table")
ltmHttpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileName.setDescription("The name of a HTTP profile.")
ltmHttpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmHttpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmHttpProfileBasicAuthRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileBasicAuthRealm.setDescription("The basic authentication realm of the specified HTTP profile.")
ltmHttpProfileOneConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileOneConnect.setDescription("The state that specifies whether OneConnect HTTP header \ntransformation is used for the specified HTTP profile.")
ltmHttpProfileHeaderInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileHeaderInsert.setDescription("The header to be inserted into the HTTP header for \nthe specified HTTP profile.")
ltmHttpProfileHeaderErase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileHeaderErase.setDescription("The header to be erased into the HTTP header for \nthe specified HTTP profile.")
ltmHttpProfileFallbackHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileFallbackHost.setDescription("The fallback host name used in HTTP redirect for \nthe specified HTTP profile.")
ltmHttpProfileCompressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,2,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ("selective", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressMode.setDescription("Deprecated!  The state that specifies whether compression is enabled.")
ltmHttpProfileCompressMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressMinSize.setDescription("Deprecated!  The value that specifies the minimum length of the server \nresponses (in bytes) to be considered acceptable for compression.")
ltmHttpProfileCompressBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressBufferSize.setDescription("Deprecated!  The value that specifies the maximum number of uncompressed bytes \nthat the compression proxy will buffer before it decides whether or \nnot to compress the server's response, in case the server's response \nheaders don't specify the content length of the response.")
ltmHttpProfileCompressVaryHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressVaryHeader.setDescription("Deprecated!  The state that specifies whether to insert the header \n'Vary: Accept-Encoding' in the server response for responses that \nhave been compressed. If the 'Vary:' header already exists in the \nserver response, then the value 'Accept-Encoding' will be appended to it.")
ltmHttpProfileCompressAllowHttp10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressAllowHttp10.setDescription("Deprecated!  The state that specifies whether to allow compression on responses \nto HTTP 1.0 requests.")
ltmHttpProfileCompressGzipMemlevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipMemlevel.setDescription("Deprecated!  The amount of memory that the proxy will use when doing compression. \nIt must be an integer no less than 1 and no greater than 9. Higher \nvalues produce faster compression at the expense of more memory usage. \nThe default memory level will be 8.")
ltmHttpProfileCompressGzipWindowsize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipWindowsize.setDescription("Deprecated!  The number of bits in the window size that the compression proxy \nwill use when compressing the server response. It should be an integer \nno less than 8 and no greater than 15. Higher values produce better \ncompression ratios at the expense of more memory usage. \nThe default window size will be 15.")
ltmHttpProfileCompressGzipLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipLevel.setDescription("Deprecated!  The speed of compression that is applied to the response. Minimum\nvalue is 1, maximum is 9. The lower numbers give faster compression \nwith lower ratios, and higher numbers give slower compression with \nhigher ratios.")
ltmHttpProfileCompressKeepAcceptEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressKeepAcceptEncoding.setDescription("Deprecated!  The state of the option to keep client-encoding header.")
ltmHttpProfileCompressBrowserWorkarounds = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressBrowserWorkarounds.setDescription("Deprecated!  The option to control whether or not to disable compression for \nknown browsers that cannot handle certain types of compressed \nresponses properly. If it's true, compression for known browsers \nwill be disabled.")
ltmHttpProfileResponseChunking = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,3,)).subtype(namedValues=NamedValues(("preserve", 0), ("selective", 1), ("unchunk", 2), ("rechunk", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileResponseChunking.setDescription("The HTTP chunk mode for the responses.")
ltmHttpProfileLwsMaxColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileLwsMaxColumn.setDescription("The linear white space maximum column sizes used to support \nmulti-line header insertion.")
ltmHttpProfileLwsSeparator = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 21), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileLwsSeparator.setDescription("The linear white space separator strings for the specified HTTP profile.")
ltmHttpProfileRedirectRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("all", 1), ("matching", 2), ("nodes", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRedirectRewrite.setDescription("The HTTP redirect/rewrite mode for the responses.")
ltmHttpProfileMaxHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileMaxHeaderSize.setDescription("The maximum size of the headers.")
ltmHttpProfilePipelining = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePipelining.setDescription("The state indicating whether pipelining is enabled for this profile.")
ltmHttpProfileInsertXforwardedFor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 25), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileInsertXforwardedFor.setDescription("The state indicating whether inserting X-Forwarded-For\nis enabled for this profile.")
ltmHttpProfileMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileMaxRequests.setDescription("The maximum connection requests allowed. The connection will be\nforced closed when this limit is reached.")
ltmHttpProfileCompressCpusaver = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaver.setDescription("Deprecated!  The state indicating whether CPU saving mode is enable or not\nwhen doing compression.")
ltmHttpProfileCompressCpusaverHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaverHigh.setDescription("Deprecated!  The CPU saver high threshold. When CPU utilization exceeds this value,\ncompression is switched to NULL compression.")
ltmHttpProfileCompressCpusaverLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaverLow.setDescription("Deprecated!  The CPU saver low threshold. When CPU utilization drops below\nthis value, compression is switched to full throttle.")
ltmHttpProfileRamcache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 30), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcache.setDescription("Deprecated!  The state the whether RAM cache is enabled or not.")
ltmHttpProfileRamcacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheSize.setDescription("Deprecated!  The maximum cache size in MB's.")
ltmHttpProfileRamcacheMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheMaxEntries.setDescription("Deprecated!  The maximum cache entries.")
ltmHttpProfileRamcacheMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheMaxAge.setDescription("Deprecated!  The maximum age of cached object.")
ltmHttpProfileRamcacheObjectMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheObjectMinSize.setDescription("Deprecated!  The minimum size requirement for cached object in bytes.")
ltmHttpProfileRamcacheObjectMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheObjectMaxSize.setDescription("Deprecated!  The maximum size limitation for cached object in bytes.")
ltmHttpProfileRamcacheIgnoreClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 36), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("none", 0), ("maxage", 1), ("all", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheIgnoreClient.setDescription("Deprecated!  The state that Ram cache ignores client cache.")
ltmHttpProfileRamcacheAgingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheAgingRate.setDescription("Deprecated!  The aging rate for the RAM cache.")
ltmHttpProfileRamcacheInsertAgeHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 38), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheInsertAgeHeader.setDescription("Deprecated!  The mode that indicates whether to insert the Age headers for RAM cache.")
ltmHttpProfileCompressPreferredMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 39), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("deflate", 0), ("gzip", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressPreferredMethod.setDescription("Deprecated!  The option for preferred compression method.")
ltmHttpProfileServerAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 40), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileServerAgentName.setDescription("The server header sent in responses that the BIG-IP itself\ngenerates. The default value is BigIP. If is no string is set\nas the value, then no server header will be added to such responses.")
ltmHttpProfileCompUriIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2))
ltmCompUriInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriInclNumber.setDescription("Deprecated!.\nThe number of ltmHttpProfileCompUriIncl entries in the table.")
ltmCompUriInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2))
if mibBuilder.loadTexts: ltmCompUriInclTable.setDescription("A table containing information of regular expressions used to match \nthe request URI part of the client requests during compression. \nA match must be found in at least one of the 'include' fields.")
ltmCompUriInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmCompUriInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmCompUriInclIndex"))
if mibBuilder.loadTexts: ltmCompUriInclEntry.setDescription("Columns in the ltmCompUriIncl Table")
ltmCompUriInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriInclName.setDescription("The name of a HTTP profile.")
ltmCompUriInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriInclIndex.setDescription("The index of the regular expression used to match the request \nURI part of the client requests during compression in \n'include' fields for the specified HTTP profile.")
ltmCompUriInclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriInclUri.setDescription("The regular expression used to match the request URI part \nof the client requests during compression in 'include' fields \nfor the specified HTTP profile.")
ltmHttpProfileCompUriExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3))
ltmCompUriExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriExclNumber.setDescription("Deprecated!.\nThe number of ltmHttpProfileCompUriExcl entries in the table.")
ltmCompUriExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2))
if mibBuilder.loadTexts: ltmCompUriExclTable.setDescription("A table containing information of regular expressions used to match \nthe request URI part of the client requests during compression. \nA match must be found in at least one of the 'exclude' fields.")
ltmCompUriExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmCompUriExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmCompUriExclIndex"))
if mibBuilder.loadTexts: ltmCompUriExclEntry.setDescription("Columns in the ltmCompUriExcl Table")
ltmCompUriExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriExclName.setDescription("The name of a HTTP profile.")
ltmCompUriExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriExclIndex.setDescription("The index of the regular expression used to match the request \nURI part of the client requests during compression in \n'exclude' fields for the specified HTTP profile.")
ltmCompUriExclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriExclUri.setDescription("The regular expression used to match the request URI part \nof the client requests during compression in 'exclude' fields \nfor the specified HTTP profile.")
ltmHttpProfileCompContTypeIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4))
ltmCompContTypeInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeInclNumber.setDescription("Deprecated!.\nThe number of ltmHttpProfileCompContTypeIncl entries in the table.")
ltmCompContTypeInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2))
if mibBuilder.loadTexts: ltmCompContTypeInclTable.setDescription("A table containing information of regular expressions used to match \nthe MIME types in the server response's 'Content-Type:' headers. \nA match must be found in at least one of the 'include' fields.")
ltmCompContTypeInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclIndex"))
if mibBuilder.loadTexts: ltmCompContTypeInclEntry.setDescription("Columns in the ltmCompContTypeIncl Table")
ltmCompContTypeInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeInclName.setDescription("The name of a HTTP profile.")
ltmCompContTypeInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeInclIndex.setDescription("The index of the regular expression to match the MIME types in the \nserver response's 'Content-Type:' headers in 'include' fields for \nthe specified HTTP profile.")
ltmCompContTypeInclContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeInclContentType.setDescription("The regular expression used to match the MIME types in the server \nresponse's 'Content-Type:' headers in 'include' fields for the\nspecified HTTP profile.")
ltmHttpProfileCompContTypeExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5))
ltmCompContTypeExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeExclNumber.setDescription("Deprecated!.\nThe number of ltmHttpProfileCompContTypeExcl entries in the table.")
ltmCompContTypeExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2))
if mibBuilder.loadTexts: ltmCompContTypeExclTable.setDescription("A table containing information of regular expressions used to match \nthe MIME types in the server response's 'Content-Type:' headers. \nA match must be found in at least one of the 'exclude' fields.")
ltmCompContTypeExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclIndex"))
if mibBuilder.loadTexts: ltmCompContTypeExclEntry.setDescription("Columns in the ltmCompContTypeExcl Table")
ltmCompContTypeExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeExclName.setDescription("The name of a HTTP profile.")
ltmCompContTypeExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeExclIndex.setDescription("The index of the regular expression to match the MIME types in the \nserver response's 'Content-Type:' headers in 'exclude' fields for \nthe specified HTTP profile.")
ltmCompContTypeExclContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeExclContentType.setDescription("The regular expression used to match the MIME types in the server \nresponse's 'Content-Type:' headers in 'exclude' fields for the\nspecified HTTP profile.")
ltmHttpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6))
ltmHttpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmHttpProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmHttpProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmHttpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatNumber.setDescription("The number of ltmHttpProfileStat entries in the table.")
ltmHttpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3))
if mibBuilder.loadTexts: ltmHttpProfileStatTable.setDescription("A table containing statistic information of HTTP profiles.")
ltmHttpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatName"))
if mibBuilder.loadTexts: ltmHttpProfileStatEntry.setDescription("Columns in the ltmHttpProfileStat Table")
ltmHttpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatName.setDescription("The name of a HTTP profile.")
ltmHttpProfileStatCookiePersistInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatCookiePersistInserts.setDescription("The number of successful attempts to insert HTTP headers \nfor cookie persistence (set-cookie header insertions).")
ltmHttpProfileStatResp2xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatResp2xxCnt.setDescription("The number of server-side responses in range of 200 to 206 \n(successful responses)")
ltmHttpProfileStatResp3xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatResp3xxCnt.setDescription("The number of server-side responses in range of 300 to 307 \n(redirection responses).")
ltmHttpProfileStatResp4xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatResp4xxCnt.setDescription("The number of server-side responses in range of 400 to 417  \n(client errors).")
ltmHttpProfileStatResp5xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatResp5xxCnt.setDescription("The number of server-side responses in range of 500 to 505 \n(server errors).")
ltmHttpProfileStatNumberReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatNumberReqs.setDescription("The total number of HTTP requests.")
ltmHttpProfileStatGetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatGetReqs.setDescription("The total number of HTTP get requests.")
ltmHttpProfileStatPostReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPostReqs.setDescription("The total number of HTTP post requests.")
ltmHttpProfileStatV9Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV9Reqs.setDescription("The total number of version 9 requests.")
ltmHttpProfileStatV10Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV10Reqs.setDescription("The total number of version 10 requests.")
ltmHttpProfileStatV11Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV11Reqs.setDescription("The total number of version 11 requests.")
ltmHttpProfileStatV9Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV9Resp.setDescription("The total number of version 9 responses.")
ltmHttpProfileStatV10Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV10Resp.setDescription("The total number of version 10 responses.")
ltmHttpProfileStatV11Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV11Resp.setDescription("The total number of version 11 responses.")
ltmHttpProfileStatMaxKeepaliveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatMaxKeepaliveReq.setDescription("The maximum number of requests made in a connection.")
ltmHttpProfileStatRespBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket1k.setDescription("The number of responses under 1k.")
ltmHttpProfileStatRespBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket4k.setDescription("The number of responses under 1 - 4k.")
ltmHttpProfileStatRespBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket16k.setDescription("The number of responses under 4 - 16k.")
ltmHttpProfileStatRespBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket32k.setDescription("The number of responses under 16 - 32k.")
ltmHttpProfileStatPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPrecompressBytes.setDescription("Deprecated!  The number of response bytes before compression has taken place.")
ltmHttpProfileStatPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPostcompressBytes.setDescription("Deprecated!  The number of response bytes after compression has taken place.")
ltmHttpProfileStatNullCompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatNullCompressBytes.setDescription("Deprecated!  The number of bytes subjected to NULL compression (for license enforcement).")
ltmHttpProfileStatHtmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatHtmlPrecompressBytes.setDescription("Deprecated!  The number of pre-compressed bytes for the MIME-Types: HTML.")
ltmHttpProfileStatHtmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatHtmlPostcompressBytes.setDescription("Deprecated!  The number of post-compressed bytes for the MIME-Types: HTML.")
ltmHttpProfileStatCssPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatCssPrecompressBytes.setDescription("Deprecated!  The number of pre-compressed bytes for the MIME-Types: CSS.")
ltmHttpProfileStatCssPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatCssPostcompressBytes.setDescription("Deprecated!  The number of post-compressed bytes for the MIME-Types: CSS.")
ltmHttpProfileStatJsPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatJsPrecompressBytes.setDescription("Deprecated!  The number of pre-compressed bytes for the MIME-Types: Javascript.")
ltmHttpProfileStatJsPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatJsPostcompressBytes.setDescription("Deprecated!  The number of post-compressed bytes for the MIME-Types: Javascript.")
ltmHttpProfileStatXmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatXmlPrecompressBytes.setDescription("Deprecated!  The number of pre-compressed bytes for the MIME-Types: XML.")
ltmHttpProfileStatXmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatXmlPostcompressBytes.setDescription("Deprecated!  The number of post-compressed bytes for the MIME-Types: XML.")
ltmHttpProfileStatSgmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatSgmlPrecompressBytes.setDescription("Deprecated!  The number of pre-compressed bytes for the MIME-Types: SGML.")
ltmHttpProfileStatSgmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatSgmlPostcompressBytes.setDescription("Deprecated!  The number of post-compressed bytes for the MIME-Types: SGML.")
ltmHttpProfileStatPlainPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPlainPrecompressBytes.setDescription("Deprecated!  The number of pre-compressed bytes for the MIME-Types: Plain.")
ltmHttpProfileStatPlainPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPlainPostcompressBytes.setDescription("Deprecated!  The number of post-compressed bytes for the MIME-Types: Plain.")
ltmHttpProfileStatOctetPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatOctetPrecompressBytes.setDescription("Deprecated!  The number of pre-compressed bytes for the MIME-Types: Octet stream.")
ltmHttpProfileStatOctetPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatOctetPostcompressBytes.setDescription("Deprecated!  The number of post-compressed bytes for the MIME-Types: Octet stream.")
ltmHttpProfileStatImagePrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatImagePrecompressBytes.setDescription("Deprecated!  The number of pre-compressed bytes for the MIME-Types: Images.")
ltmHttpProfileStatImagePostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatImagePostcompressBytes.setDescription("Deprecated!  The number of post-compressed bytes for the MIME-Types: Images.")
ltmHttpProfileStatVideoPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatVideoPrecompressBytes.setDescription("Deprecated!  The number of pre-compressed bytes for the MIME-Types: Video files.")
ltmHttpProfileStatVideoPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatVideoPostcompressBytes.setDescription("Deprecated!  The number of post-compressed bytes for the MIME-Types: Video files.")
ltmHttpProfileStatAudioPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatAudioPrecompressBytes.setDescription("Deprecated!  The number of pre-compressed bytes for the MIME-Types: Audio files.")
ltmHttpProfileStatAudioPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatAudioPostcompressBytes.setDescription("Deprecated!  The number of post-compressed bytes for the MIME-Types: Audio files.")
ltmHttpProfileStatOtherPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatOtherPrecompressBytes.setDescription("Deprecated!  The number of pre-compressed bytes for the MIME-Types: other than \nHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \nAudio files.")
ltmHttpProfileStatOtherPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatOtherPostcompressBytes.setDescription("Deprecated!  The number of post-compressed bytes for the MIME-Types: other than \nHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \nAudio files.")
ltmHttpProfileStatRamcacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheHits.setDescription("Deprecated!  The number of RAM cache hits.")
ltmHttpProfileStatRamcacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMisses.setDescription("Deprecated!  The number of RAM cache misses, excluding un-cacheable data.")
ltmHttpProfileStatRamcacheMissesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissesAll.setDescription("Deprecated!  The total number of RAM cache misses.")
ltmHttpProfileStatRamcacheHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheHitBytes.setDescription("Deprecated!  The number of RAM cache hits in bytes.")
ltmHttpProfileStatRamcacheMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissBytes.setDescription("Deprecated!  The number of RAM cache misses in bytes, excluding un-cacheable data.")
ltmHttpProfileStatRamcacheMissBytesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissBytesAll.setDescription("Deprecated!  The total number of RAM cache misses in bytes.")
ltmHttpProfileStatRamcacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheSize.setDescription("Deprecated!  The Ram cache current size.")
ltmHttpProfileStatRamcacheCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheCount.setDescription("Deprecated!  The number of items stored in Ram cache.")
ltmHttpProfileStatRamcacheEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheEvictions.setDescription("Deprecated!  The number of Ram cache evictions.")
ltmHttpProfileStatRespBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket64k.setDescription("Deprecated! Please see the new larger bucket sizes")
ltmHttpProfileRamUriExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7))
ltmRamUriExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriExclNumber.setDescription("Deprecated!.\nThe number of ltmHttpProfileRamUriExcl entries in the table.")
ltmRamUriExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2))
if mibBuilder.loadTexts: ltmRamUriExclTable.setDescription("A table containing information of RAM cached excludes URI's  \nin HTTP profiles.")
ltmRamUriExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriExclIndex"))
if mibBuilder.loadTexts: ltmRamUriExclEntry.setDescription("Columns in the ltmRamUriExcl Table")
ltmRamUriExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriExclName.setDescription("The name of a HTTP profile.")
ltmRamUriExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriExclIndex.setDescription("The index of RAM cached excludes URI for the specified HTTP profile.")
ltmRamUriExclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriExclUri.setDescription("The RAM cached excludes URI for the specified profile.")
ltmHttpProfileRamUriIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8))
ltmRamUriInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriInclNumber.setDescription("Deprecated!.\nThe number of ltmHttpProfileRamUriIncl entries in the table.")
ltmRamUriInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2))
if mibBuilder.loadTexts: ltmRamUriInclTable.setDescription("A table containing information of RAM cached includes URI's  \nin HTTP profiles.")
ltmRamUriInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriInclIndex"))
if mibBuilder.loadTexts: ltmRamUriInclEntry.setDescription("Columns in the ltmRamUriIncl Table")
ltmRamUriInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriInclName.setDescription("The name of a HTTP profile.")
ltmRamUriInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriInclIndex.setDescription("The index of RAM cached includes URI for the specified HTTP profile.")
ltmRamUriInclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriInclUri.setDescription("The RAM cached includes URI for the specified profile.")
ltmHttpProfileRamUriPin = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9))
ltmRamUriPinNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriPinNumber.setDescription("Deprecated!.\nThe number of ltmHttpProfileRamUriPin entries in the table.")
ltmRamUriPinTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2))
if mibBuilder.loadTexts: ltmRamUriPinTable.setDescription("A table containing information of RAM cached URI's pinned\nin HTTP profiles.")
ltmRamUriPinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriPinName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriPinIndex"))
if mibBuilder.loadTexts: ltmRamUriPinEntry.setDescription("Columns in the ltmRamUriPin Table")
ltmRamUriPinName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriPinName.setDescription("The name of a HTTP profile.")
ltmRamUriPinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriPinIndex.setDescription("The index of RAM cached URI pinned for the specified HTTP profile.")
ltmRamUriPinUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriPinUri.setDescription("The RAM cached URI pinned for the specified profile.")
ltmHttpProfileFallbackStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10))
ltmFallbackStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFallbackStatusNumber.setDescription("The number of ltmHttpProfileFallbackStatus entries in the table.")
ltmFallbackStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2))
if mibBuilder.loadTexts: ltmFallbackStatusTable.setDescription("A table containing information of status codes that when matched, \ntraffic will be sent to the 'fallback_host' for HTTP profiles.")
ltmFallbackStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusIndex"))
if mibBuilder.loadTexts: ltmFallbackStatusEntry.setDescription("Columns in the ltmFallbackStatus Table")
ltmFallbackStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFallbackStatusName.setDescription("The name of a HTTP profile.")
ltmFallbackStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFallbackStatusIndex.setDescription("The index of status code for the specified HTTP profile.")
ltmFallbackStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFallbackStatusCode.setDescription("The status code that when matched, traffic will be sent to the 'fallback_host' for the specified profile.")
ltmHttpProfileRespHeadersPerm = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11))
ltmRespHeadersPermNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRespHeadersPermNumber.setDescription("The number of ltmHttpProfileRespHeadersPerm entries in the table.")
ltmRespHeadersPermTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2))
if mibBuilder.loadTexts: ltmRespHeadersPermTable.setDescription("A table containing information of permitted headers in the \nresponses for HTTP profiles.")
ltmRespHeadersPermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermIndex"))
if mibBuilder.loadTexts: ltmRespHeadersPermEntry.setDescription("Columns in the ltmRespHeadersPerm Table")
ltmRespHeadersPermName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRespHeadersPermName.setDescription("The name of a HTTP profile.")
ltmRespHeadersPermIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRespHeadersPermIndex.setDescription("The index of permitted header in a response for the specified HTTP profile.")
ltmRespHeadersPermStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRespHeadersPermStr.setDescription("The permitted header in a response for the specified profile.")
ltmHttpProfileEncCookies = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12))
ltmEncCookiesNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmEncCookiesNumber.setDescription("The number of ltmHttpProfileEncCookies entries in the table.")
ltmEncCookiesTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2))
if mibBuilder.loadTexts: ltmEncCookiesTable.setDescription("A table containing information of cookies to be encrypted before\nsending them to the clients for HTTP profiles.")
ltmEncCookiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmEncCookiesName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmEncCookiesIndex"))
if mibBuilder.loadTexts: ltmEncCookiesEntry.setDescription("Columns in the ltmEncCookies Table")
ltmEncCookiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmEncCookiesName.setDescription("The name of a HTTP profile.")
ltmEncCookiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmEncCookiesIndex.setDescription("The index of cookie to be encrypted before sending it to the client\nfor the specified HTTP profile.")
ltmEncCookiesStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmEncCookiesStr.setDescription("The cookie to be encrypted before sending it to the client\nfor the specified profile.")
ltmPersist = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8))
ltmPersistProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1))
ltmPersistProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileNumber.setDescription("The number of ltmPersistProfile entries in the table.")
ltmPersistProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2))
if mibBuilder.loadTexts: ltmPersistProfileTable.setDescription("A table containing information of persistent profile.")
ltmPersistProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPersistProfileName"))
if mibBuilder.loadTexts: ltmPersistProfileEntry.setDescription("Columns in the ltmPersistProfile Table")
ltmPersistProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileName.setDescription("The name of a persist profile.")
ltmPersistProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmPersistProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmPersistProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,0,6,3,7,2,8,4,)).subtype(namedValues=NamedValues(("none", 0), ("srcaddr", 1), ("dstaddr", 2), ("cookie", 3), ("msrdp", 4), ("sslsid", 5), ("sip", 6), ("uie", 7), ("hash", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMode.setDescription("The type of persistence.")
ltmPersistProfileMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMirror.setDescription("The state of mirror persistence records.")
ltmPersistProfileTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileTimeout.setDescription("The value (in seconds) to timeout persist entry.")
ltmPersistProfileMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMaskType.setDescription("The IP address type of ltmPersistMask")
ltmPersistProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMask.setDescription("The source/destination address mask. It is interpreted \nwithin the context of a ltmPersistMaskType value.")
ltmPersistProfileCookieMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,2,0,3,)).subtype(namedValues=NamedValues(("unspecified", 0), ("insert", 1), ("rewrite", 2), ("passive", 3), ("hash", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieMethod.setDescription("The type of cookie persistence.")
ltmPersistProfileCookieName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieName.setDescription("The name of cookie.")
ltmPersistProfileCookieExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieExpiration.setDescription("The cookie expiration in seconds.")
ltmPersistProfileCookieHashOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieHashOffset.setDescription("The offset of cookie for hash mode.")
ltmPersistProfileCookieHashLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieHashLength.setDescription("The length of cookie for hash mode.")
ltmPersistProfileMsrdpNoSessionDir = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMsrdpNoSessionDir.setDescription("This object indicates MS terminal services has been configured\nwithout a session directory and causes the initial MSRDP\nconnection to be load-balanced.")
ltmPersistProfileMapProxies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMapProxies.setDescription("This object indicates whether we should map known proxies when\nthe persistence mode is src_addr.")
ltmPersistProfileAcrossServices = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileAcrossServices.setDescription("This object indicates whether the persistence entries added under\nthis profile are available across services.")
ltmPersistProfileAcrossVirtuals = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileAcrossVirtuals.setDescription("This object indicates whether the persistence entries added under\nthis profile are available across virtuals.")
ltmPersistProfileAcrossPools = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileAcrossPools.setDescription("This object indicates whether the persistence entries added under\nthis profile are available across pools.")
ltmPersistProfileUieRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileUieRule.setDescription("The rule name for UIE mode.")
ltmPersistProfileSipInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 20), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileSipInfo.setDescription("The SIP header name for persisting in the specified profile.")
ltmStream = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9))
ltmStreamProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1))
ltmStreamProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileNumber.setDescription("The number of ltmStreamProfile entries in the table.")
ltmStreamProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2))
if mibBuilder.loadTexts: ltmStreamProfileTable.setDescription("A table containing information of stream profile.")
ltmStreamProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmStreamProfileName"))
if mibBuilder.loadTexts: ltmStreamProfileEntry.setDescription("Columns in the ltmStreamProfile Table")
ltmStreamProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileName.setDescription("The name of a stream profile.")
ltmStreamProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmStreamProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmStreamProfileSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileSource.setDescription("The source string to search for.")
ltmStreamProfileTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileTarget.setDescription("The target string to replace.")
ltmStreamProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2))
ltmStreamProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmStreamProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmStreamProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmStreamProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileStatNumber.setDescription("The number of ltmStreamProfileStat entries in the table.")
ltmStreamProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 3))
if mibBuilder.loadTexts: ltmStreamProfileStatTable.setDescription("A table containing statistic information of stream profile.")
ltmStreamProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatName"))
if mibBuilder.loadTexts: ltmStreamProfileStatEntry.setDescription("Columns in the ltmStreamProfileStat Table")
ltmStreamProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileStatName.setDescription("The name of a stream profile.")
ltmStreamProfileStatReplaces = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileStatReplaces.setDescription("The number of replace operations completed.")
ltmTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10))
ltmTcpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1))
ltmTcpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileNumber.setDescription("The number of ltmTcpProfile entries in the table.")
ltmTcpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2))
if mibBuilder.loadTexts: ltmTcpProfileTable.setDescription("A table containing information of TCP profile.")
ltmTcpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTcpProfileName"))
if mibBuilder.loadTexts: ltmTcpProfileEntry.setDescription("Columns in the ltmTcpProfile Table")
ltmTcpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileName.setDescription("The name of a TCP profile.")
ltmTcpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmTcpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmTcpProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileResetOnTimeout.setDescription("The feature of reset for idle timeout.\nIf true and a TCP connection exceeds its idle_timeout, send a reset \nin addition to deleting the connection.")
ltmTcpProfileTimeWaitRecycle = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileTimeWaitRecycle.setDescription("Recycle connection when SYN is received in TIME-WAIT state.")
ltmTcpProfileDelayedAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDelayedAcks.setDescription("If true, Enable delayed ACK to allow coalescing of multiple ACK responses.")
ltmTcpProfileProxyMss = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileProxyMss.setDescription("Whether or not to proxy maximum segment size. \nIf true, advertise the same mss to the server as was \nnegotiated with the client.")
ltmTcpProfileProxyOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileProxyOptions.setDescription("Whether or not to proxy an option.\nIf true, advertise an option (e.g. time-stamps) to \nthe server only if it was negotiated with the client.")
ltmTcpProfileProxyBufferLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileProxyBufferLow.setDescription("The proxy buffer level at which the receive window is opened.")
ltmTcpProfileProxyBufferHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileProxyBufferHigh.setDescription("The proxy buffer level at which the receive window is closed.")
ltmTcpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileIdleTimeout.setDescription("The number of seconds without traffic before a connection is \neligible for deletion.")
ltmTcpProfileTimeWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileTimeWaitTimeout.setDescription("The milliseconds in TIME-WAIT before entering CLOSED state.")
ltmTcpProfileFinWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileFinWaitTimeout.setDescription("The number of seconds to remain in FIN-WAIT or CLOSING state \nbefore giving up. Zero is forever (or until maxrtx of FIN).")
ltmTcpProfileCloseWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileCloseWaitTimeout.setDescription("The number of seconds to remain in LAST-ACK state before\ngiving up. Zero is forever (or until maxrtx of FIN).")
ltmTcpProfileSndbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSndbuf.setDescription("Send buffer size in bytes.")
ltmTcpProfileRcvwnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileRcvwnd.setDescription("Receive window size in bytes.")
ltmTcpProfileKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileKeepAliveInterval.setDescription("Keep alive probe interval in milliseconds.")
ltmTcpProfileSynMaxrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSynMaxrtx.setDescription("The maximum number of retransmissions of SYN segments.")
ltmTcpProfileMaxrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMaxrtx.setDescription("The maximum number of retransmissions of data segments.")
ltmTcpProfileIpTosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileIpTosToClient.setDescription("The IP type of service set in packets sent to client. Default:None.")
ltmTcpProfileLinkQosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileLinkQosToClient.setDescription("The link quality of service set in packets sent to client. Default:None.")
ltmTcpProfileDeferredAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDeferredAccept.setDescription("The state that if true, defers allocation of connection chain context\nuntil payload from client has been seen.")
ltmTcpProfileSelectiveAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSelectiveAcks.setDescription("The state that if true, enable RFC2018 Selective Acknowledgements.")
ltmTcpProfileEcn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileEcn.setDescription("The state that if true, enable RFC3168 Extended Congestion Notification (ECN).")
ltmTcpProfileLimitedTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 25), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileLimitedTransmit.setDescription("The state that if true, enables support for RFC3042 Limited Transmit Recovery")
ltmTcpProfileHighPerfTcpExt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileHighPerfTcpExt.setDescription("Deprecated! Replaced by ltmTcpProfileTimestamps.\nThe state that if true, enables support for RFC1323 timestamps \nand window scaling (high bandwidth TCP extensions).")
ltmTcpProfileSlowStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSlowStart.setDescription("The state if true, enable TCP slow-start by default. We use RFC3390 to\nslow-start rather than traditional congestion avoidance mechanisms.")
ltmTcpProfileBandwidthDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 28), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileBandwidthDelay.setDescription("Deprecated! The state if true, attempt to calculate the optimal bandwidth\nto use to the peer based on throughput and round-trip time,\nand don't exceed it.")
ltmTcpProfileNagle = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 29), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileNagle.setDescription("The state if true, delay sending data < MSS in size unless\nall prior data has been ACKed. This leads to less in-flight small-data,\nand less chance for drops, but can harm interactivity. \nNamed after Nagle's algorithm.")
ltmTcpProfileAckOnPush = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 30), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileAckOnPush.setDescription("The state if true, data-bearing in-order TCP segments will elicit \nimmediate ACKs from us if they have the PUSH flag set, regardless of \nthe setting of the delayed-ack profile option.")
ltmTcpProfileMd5Sig = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 31), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMd5Sig.setDescription("The state if true, use RFC2385 TCP-MD5 signatures to protect \nTCP traffic against intermediate tampering.")
ltmTcpProfileMd5SigPass = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 32), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMd5SigPass.setDescription("This is a plaintext passphrase which may be between 1 and 80 \ncharacters in length, and is used in a shared-secret scheme \nto implement the spoof-prevention parts of RFC2385.")
ltmTcpProfileAbc = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 33), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileAbc.setDescription("The state that if it is true, count the number of bytes acked \nrather than the number of returning ACKs from the peer when \nin the linear congestion-window expansion phase of a TCP\nconnection. This algorithm and its benefits are described \nin RFC3465 (Appropriate Byte Counting).")
ltmTcpProfileCongestionCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 34), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,0,3,1,)).subtype(namedValues=NamedValues(("reno", 0), ("newreno", 1), ("scalable", 2), ("highspeed", 3), ("none", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileCongestionCtrl.setDescription("The TCP congestion control mode, guiding cwnd growth.\nreno - RENO congestion control mode;\nnewreno - new RENO congestion control mode;\nscalable - scalable congestion control mode. It will do MIMD\n           on cwnd besides NewReno retransmission;\nhighspeed - high-speed congestion control mode, per RFC3649;\nnone - no congestion control.")
ltmTcpProfileDsack = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 35), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDsack.setDescription("The state that if true, enable support for RFC2883 D-SACK (Duplicate Selective Acknowledgement).")
ltmTcpProfileCmetricsCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 36), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileCmetricsCache.setDescription("The state that if true, use the routing table metrics cache to\nretrieve the last-known tcp congestion parameters.\n(Congestion window, round-trip-times, and slow-start threshold.)")
ltmTcpProfileVerifiedAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 37), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileVerifiedAccept.setDescription("The state that if true, the device must not respond to the clients \nSYN with a SYN-ACK until it receives a SYN-ACK from \nthe server, indicating that the port is open.")
ltmTcpProfilePktLossIgnoreRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfilePktLossIgnoreRate.setDescription("Specifies the threshold of packets lost per million at which the system should perform congestion control.\nMeasured in packets per million. Valid values are from 0 to 1000000.")
ltmTcpProfilePktLossIgnoreBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfilePktLossIgnoreBurst.setDescription("Specifies the likelihood of performing congestion control when multiple packets in a row are lost even \nif the loss threshold has not been exceeded. Valid values are from 0 to 32. Higher values decrease the \nlikelihood of performing congestion control.")
ltmTcpProfileZeroWindowTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileZeroWindowTimeout.setDescription("Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP\ntransmit window. The timeout starts when the peer advertises a zero length TCP window or when enough\ndata has been sent to fill the previously advertised window. The timer is canceled when a non-zero\nlength window is received. The default is 20000 milliseconds.")
ltmTcpProfileInitCwnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileInitCwnd.setDescription("Initial congestion window size for connections to this destination. Actual window size is this value\nmultiplied by the MSS (Maximal Segment Size) for same connection. The default is zero, meaning to\nuse the values specified in RFC2414. Allowed values are in the range of 0 to 16.")
ltmTcpProfileInitRwnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileInitRwnd.setDescription("Initial receive window size for connections to this destination. The actual window size is this value\nmultiplied by the MSS (Maximal Segment Size) of the connection. The default value is zero, meaning\nto use Slow Start value. Allowed values are in the range of 0 to 16.")
ltmTcpProfileDelayWindowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 43), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDelayWindowControl.setDescription("If enabled, uses an estimate of queueing delay as a measure of congestion to control, in addition to\nthe normal loss based control, the amount of data sent.")
ltmTcpProfileSynRtoBase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSynRtoBase.setDescription("Initial RTO (Retransmission TimeOut) base multiplier for SYN retransmission, specified in milliseconds.\nThis value is modified by the exponential backoff table to select the interval for subsequent\nretransmissions.")
ltmTcpProfileTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 45), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileTimestamps.setDescription("The state that if true, enables support for RFC1323 timestamps (high bandwidth TCP extension).")
ltmTcpProfileMinRto = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMinRto.setDescription("Specifies the minimum TCP retransmission timeout in milliseconds. The timeout starts when the sender sends\na packet containing data. The timer is canceled when all outstanding data has been acknowledged. The timer\nrestarts when an ACK is received to acknowledge new data. The default is 0 milliseconds; which means using\nthe TCP stack default. Maximum value is 5000 milliseconds.")
ltmTcpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2))
ltmTcpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmTcpProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmTcpProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmTcpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatNumber.setDescription("The number of ltmTcpProfileStat entries in the table.")
ltmTcpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3))
if mibBuilder.loadTexts: ltmTcpProfileStatTable.setDescription("A table containing statistic information of TCP profile.")
ltmTcpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatName"))
if mibBuilder.loadTexts: ltmTcpProfileStatEntry.setDescription("Columns in the ltmTcpProfileStat Table")
ltmTcpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatName.setDescription("The name of a TCP profile.")
ltmTcpProfileStatOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatOpen.setDescription("The number of current open connections.")
ltmTcpProfileStatCloseWait = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatCloseWait.setDescription("The number of current connections in CLOSE-WAIT/LAST-ACK.")
ltmTcpProfileStatFinWait = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatFinWait.setDescription("The number of current connections in FIN-WAIT/CLOSING.")
ltmTcpProfileStatTimeWait = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatTimeWait.setDescription("The number of current connections in TIME-WAIT.")
ltmTcpProfileStatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatAccepts.setDescription("The number of connections accepted.")
ltmTcpProfileStatAcceptfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatAcceptfails.setDescription("The number of connections not accepted.")
ltmTcpProfileStatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatConnects.setDescription("The number of connections established.")
ltmTcpProfileStatConnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatConnfails.setDescription("The number of connections failures.")
ltmTcpProfileStatExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatExpires.setDescription("The number of connections expired due to idle timeout.")
ltmTcpProfileStatAbandons = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatAbandons.setDescription("The number of connections abandoned connections due to \nretries/keep-alives.")
ltmTcpProfileStatRxrst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxrst.setDescription("The number of received RST.")
ltmTcpProfileStatRxbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadsum.setDescription("The number of bad checksum.")
ltmTcpProfileStatRxbadseg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadseg.setDescription("The number of malformed segments.")
ltmTcpProfileStatRxooseg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxooseg.setDescription("The number of out of order segments.")
ltmTcpProfileStatRxcookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxcookie.setDescription("The number of received SYN-cookies.")
ltmTcpProfileStatRxbadcookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadcookie.setDescription("The number of bad SYN-cookies.")
ltmTcpProfileStatSyncacheover = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatSyncacheover.setDescription("The number of SYN-cache overflow.")
ltmTcpProfileStatTxrexmits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatTxrexmits.setDescription("The number of retransmitted segments.")
ltmUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11))
ltmUdpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1))
ltmUdpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileNumber.setDescription("The number of ltmUdpProfile entries in the table.")
ltmUdpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2))
if mibBuilder.loadTexts: ltmUdpProfileTable.setDescription("A table containing information of UDP profile.")
ltmUdpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmUdpProfileName"))
if mibBuilder.loadTexts: ltmUdpProfileEntry.setDescription("Columns in the ltmUdpProfile Table")
ltmUdpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileName.setDescription("The name of a UDP profile.")
ltmUdpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmUdpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmUdpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileIdleTimeout.setDescription("The umber of seconds without traffic before a flow is \neligible for deletion.")
ltmUdpProfileIpTosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileIpTosToClient.setDescription("The IP type of service set in packets sent to client. Default:None.")
ltmUdpProfileLinkQosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileLinkQosToClient.setDescription("The link quality of service set in packets sent to client. Default:None.")
ltmUdpProfileDatagramLb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileDatagramLb.setDescription("The state indicating whether or not to load balance each UDP datagram separately.")
ltmUdpProfileAllowNoPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileAllowNoPayload.setDescription("The state indicating whether to not allow the passage of datagrams with no payload.")
ltmUdpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2))
ltmUdpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmUdpProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmUdpProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmUdpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatNumber.setDescription("The number of ltmUdpProfileStat entries in the table.")
ltmUdpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3))
if mibBuilder.loadTexts: ltmUdpProfileStatTable.setDescription("A table containing information of UDP profile.")
ltmUdpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatName"))
if mibBuilder.loadTexts: ltmUdpProfileStatEntry.setDescription("Columns in the ltmUdpProfileStat Table")
ltmUdpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatName.setDescription("The name of a UDP profile.")
ltmUdpProfileStatOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatOpen.setDescription("The number of current open connections.")
ltmUdpProfileStatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatAccepts.setDescription("The number of connections accepted.")
ltmUdpProfileStatAcceptfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatAcceptfails.setDescription("The number of connections not accepted.")
ltmUdpProfileStatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatConnects.setDescription("The number of connections established.")
ltmUdpProfileStatConnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatConnfails.setDescription("The number of connections failures.")
ltmUdpProfileStatExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatExpires.setDescription("The number of connections expired due to idle timeout.")
ltmUdpProfileStatRxdgram = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxdgram.setDescription("The number of received datagrams.")
ltmUdpProfileStatRxbaddgram = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxbaddgram.setDescription("The number of malformed datagrams.")
ltmUdpProfileStatRxunreach = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxunreach.setDescription("The number of received ICMP un-reached.")
ltmUdpProfileStatRxbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxbadsum.setDescription("The number of bad checksum.")
ltmUdpProfileStatRxnosum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxnosum.setDescription("The number of no checksum.")
ltmUdpProfileStatTxdgram = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatTxdgram.setDescription("The number of transmitted datagrams.")
ltmFastHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12))
ltmFastHttpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1))
ltmFastHttpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileNumber.setDescription("The number of ltmFastHttpProfile entries in the table.")
ltmFastHttpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2))
if mibBuilder.loadTexts: ltmFastHttpProfileTable.setDescription("A table containing information of Fast HTTP profile.")
ltmFastHttpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileName"))
if mibBuilder.loadTexts: ltmFastHttpProfileEntry.setDescription("Columns in the ltmFastHttpProfile Table")
ltmFastHttpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileName.setDescription("The name of a fast HTTP profile.")
ltmFastHttpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmFastHttpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmFastHttpProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileResetOnTimeout.setDescription("If true and a TCP connection exceeds its idle_timeout,\nsend a reset in addition to deleting the connection.")
ltmFastHttpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileIdleTimeout.setDescription("Number of seconds without traffic before a connection \nis eligible for deletion.")
ltmFastHttpProfileMssOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileMssOverride.setDescription("If non-zero and less than the 1460 default, this value \noverrides the maximum segment size for server-side flows.")
ltmFastHttpProfileClientCloseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileClientCloseTimeout.setDescription("Idle timeout override when waiting for the client to close. \nThis occurs after a client FIN is received or after a FIN \nis sent. 0 is immediate, -1 is indefinite.")
ltmFastHttpProfileServerCloseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileServerCloseTimeout.setDescription("Idle timeout override when waiting for the server to close. \nThis occurs if the server flow is not suitable for reuse or \nafter a FIN is received on an unspliced server connection. \n0 is immediate, -1 is indefinite.")
ltmFastHttpProfileConnpoolMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMaxSize.setDescription("Maximum number of connections to any given LB pool.\n0 for unlimited.")
ltmFastHttpProfileConnpoolMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMinSize.setDescription("Minimum number of connections to any given LB pool.\n0 is an acceptable value.")
ltmFastHttpProfileConnpoolStep = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolStep.setDescription("Connection ramp-up increment. Must be greater than 0.")
ltmFastHttpProfileConnpoolMaxReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMaxReuse.setDescription("Maximum number of times a server-side flow will be reused. \n0 for unlimited.")
ltmFastHttpProfileConnpoolIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolIdleTimeout.setDescription("Idle timeout override for unspliced server-side flows in the \nreuse pool. 0 is disabled, i.e. use the default idle timeout.")
ltmFastHttpProfileMaxHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileMaxHeaderSize.setDescription("Maximum amount of data that will be buffered in order to \nmake a content-switching decision.")
ltmFastHttpProfileMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileMaxRequests.setDescription("Maximum number of requests on a client-side flow before \nthe flow is shutdown. 0 for unlimited.")
ltmFastHttpProfileInsertXforwardedFor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileInsertXforwardedFor.setDescription("The state whether to insert or replace X-Forwarded-For header \nwith client IP.")
ltmFastHttpProfileHttp11CloseWorkarounds = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileHttp11CloseWorkarounds.setDescription("The state to workaround problems with certain brands of benchmarking\nsoftware that cannot handle FIN-PUSH on HTTP/1.1 responses.")
ltmFastHttpProfileHeaderInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 18), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileHeaderInsert.setDescription("Insert the given string as a header. If the header already \nexists, it is not replaced. Unlike HTTP, this string does not \nsupport rule command expansion.")
ltmFastHttpProfileUncleanShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,2,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ("fast", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileUncleanShutdown.setDescription("The mode to indicate whether to do unclean shutdown for client connections.")
ltmFastHttpProfileForceHttp10Response = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileForceHttp10Response.setDescription("The state to indicate whether to rewrite server's HTTP version to 1.0 in status\nline in order to dissuade the client from pipelining or chunking.")
ltmFastHttpProfileLayer7 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileLayer7.setDescription("The state that if false, we don't parse HTTP requests. This is useful for \nproviding SYN-proxy protection for L4 connections through a SNAT where the \nclient sends data to the server before the server responds.")
ltmFastHttpProfileConnpoolReplenish = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolReplenish.setDescription("The state that specifies whether the connpool should be replenished \nto its prior number of connections when a connection is closed \nby the server. If this is disabled, then we  will only replenish \na closed server side connection residing in the connpool if there are \nless than ltmFastHttpProfileMinSize (see above) connections \nin the pool.")
ltmFastHttpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2))
ltmFastHttpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmFastHttpProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmFastHttpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatNumber.setDescription("The number of ltmFastHttpProfileStat entries in the table.")
ltmFastHttpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3))
if mibBuilder.loadTexts: ltmFastHttpProfileStatTable.setDescription("A table containing statistic information of Fast HTTP profile.")
ltmFastHttpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatName"))
if mibBuilder.loadTexts: ltmFastHttpProfileStatEntry.setDescription("Columns in the ltmFastHttpProfileStat Table")
ltmFastHttpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatName.setDescription("The name of a fast HTTP profile.")
ltmFastHttpProfileStatClientSyns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientSyns.setDescription("The total number of client SYN cookies generated.")
ltmFastHttpProfileStatClientAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientAccepts.setDescription("The total number of client TCP accepts.")
ltmFastHttpProfileStatServerConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatServerConnects.setDescription("The total number of server TCP connects.")
ltmFastHttpProfileStatConnpoolCurSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolCurSize.setDescription("Number of available server-side flows in the reuse pool.")
ltmFastHttpProfileStatConnpoolMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolMaxSize.setDescription("Max number of available server-side flows in the reuse pool.")
ltmFastHttpProfileStatConnpoolReuses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolReuses.setDescription("Number of times a server-side flow was reused from the pool.")
ltmFastHttpProfileStatConnpoolExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolExhausted.setDescription("Number of times the reuse pool was exhausted.")
ltmFastHttpProfileStatNumberReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatNumberReqs.setDescription("The total number of http requests.")
ltmFastHttpProfileStatUnbufferedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatUnbufferedReqs.setDescription("The total number of unbuffered requests.")
ltmFastHttpProfileStatGetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatGetReqs.setDescription("The total number of get requests.")
ltmFastHttpProfileStatPostReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatPostReqs.setDescription("The total number of post requests.")
ltmFastHttpProfileStatV9Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatV9Reqs.setDescription("The total number of version 9 requests.")
ltmFastHttpProfileStatV10Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatV10Reqs.setDescription("The total number of version 10 requests.")
ltmFastHttpProfileStatV11Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatV11Reqs.setDescription("The total number of version 11 requests.")
ltmFastHttpProfileStatResp2xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp2xxCnt.setDescription("Number of server-side responses in range of 200 to 206 \n(successful responses).")
ltmFastHttpProfileStatResp3xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp3xxCnt.setDescription("Number of server-side responses in range of 300 to 307 \n(redirection responses).")
ltmFastHttpProfileStatResp4xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp4xxCnt.setDescription("Number of server-side responses in range of 400 to 417 (client errors). ")
ltmFastHttpProfileStatResp5xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp5xxCnt.setDescription("Number of server-side responses in range of 500 to 505 (server errors).")
ltmFastHttpProfileStatReqParseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatReqParseErrors.setDescription("Number of request parse errors.")
ltmFastHttpProfileStatRespParseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatRespParseErrors.setDescription("Number of response parse errors.")
ltmFastHttpProfileStatClientRxBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientRxBad.setDescription("Number of bad TCP segments dropped from client-side.")
ltmFastHttpProfileStatServerRxBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatServerRxBad.setDescription("Number of bad TCP segments dropped from server-side.")
ltmFastHttpProfileStatPipelinedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatPipelinedReqs.setDescription("Number of pipelined HTTP requests detected.")
ltmXml = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13))
ltmXmlProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1))
ltmXmlProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNumber.setDescription("The number of ltmXmlProfile entries in the table.")
ltmXmlProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2))
if mibBuilder.loadTexts: ltmXmlProfileTable.setDescription("A table containing information of XML profile.")
ltmXmlProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileName"))
if mibBuilder.loadTexts: ltmXmlProfileEntry.setDescription("Columns in the ltmXmlProfile Table")
ltmXmlProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileName.setDescription("The name of a XML profile.")
ltmXmlProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmXmlProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmXmlProfileAbortOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileAbortOnError.setDescription("Deprecated! The state that if true, abort the connection on errors.")
ltmXmlProfileMaxBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileMaxBufferSize.setDescription("Deprecated! The value that specifies the maximum buffer size for the specified profile.")
ltmXmlProfileMultipleQueryMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileMultipleQueryMatches.setDescription("The state that if true, multiple matches for a single XPath query are enabled.")
ltmXmlProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2))
ltmXmlProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmXmlProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmXmlProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmXmlProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumber.setDescription("The number of ltmXmlProfileStat entries in the table.")
ltmXmlProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3))
if mibBuilder.loadTexts: ltmXmlProfileStatTable.setDescription("A table containing statistic information of XML profile.")
ltmXmlProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatName"))
if mibBuilder.loadTexts: ltmXmlProfileStatEntry.setDescription("Columns in the ltmXmlProfileStat Table")
ltmXmlProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatName.setDescription("The name of a XML profile.")
ltmXmlProfileStatNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumErrors.setDescription("Deprecated! The total number of XML parsing errors.")
ltmXmlProfileStatNumInspectedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumInspectedDocuments.setDescription("The total number of inspected XML documents.")
ltmXmlProfileStatNumDocumentsWithOneMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithOneMatch.setDescription("The total number of XML documents in which one XPath query match was found.")
ltmXmlProfileStatNumDocumentsWithTwoMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithTwoMatches.setDescription("The total number of XML documents in which two XPath query matches were found.")
ltmXmlProfileStatNumDocumentsWithThreeMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithThreeMatches.setDescription("The total number of XML documents in which three XPath query matches were found.")
ltmXmlProfileStatNumDocumentsWithNoMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithNoMatches.setDescription("The total number of XML documents in which no XPath query matches were found.")
ltmXmlProfileStatNumMalformedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumMalformedDocuments.setDescription("The total number of malformed XML documents.")
ltmXmlProfileXpathQueries = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3))
ltmXmlProfileXpathQueriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesNumber.setDescription("The number of ltmXmlProfileXpathQueries entries in the table.")
ltmXmlProfileXpathQueriesTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2))
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesTable.setDescription("A table containing information of XPath queries in xml profiles.")
ltmXmlProfileXpathQueriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesIndex"))
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesEntry.setDescription("Columns in the ltmXmlProfileXpathQueries Table")
ltmXmlProfileXpathQueriesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesName.setDescription("The name of an xml profile.")
ltmXmlProfileXpathQueriesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesIndex.setDescription("The index of XPath quereies for the specified xml profile.")
ltmXmlProfileXpathQueriesString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesString.setDescription("The XPath query for the specified profile.")
ltmXmlProfileNamespaceMappings = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4))
ltmXmlProfileNamespaceMappingsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsNumber.setDescription("The number of ltmXmlProfileNamespaceMappings entries in the table.")
ltmXmlProfileNamespaceMappingsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2))
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsTable.setDescription("A table containing information of namespace mappings in xml profiles.")
ltmXmlProfileNamespaceMappingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsIndex"))
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsEntry.setDescription("Columns in the ltmXmlProfileNamespaceMappings Table")
ltmXmlProfileNamespaceMappingsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsName.setDescription("The name of an xml profile.")
ltmXmlProfileNamespaceMappingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsIndex.setDescription("The index of Namespace Mappings for the specified xml profile.")
ltmXmlProfileNamespaceMappingsMappingPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsMappingPrefix.setDescription("The Namespace Mapping Prefix for the specified profile.")
ltmXmlProfileNamespaceMappingsMappingNamespace = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsMappingNamespace.setDescription("The Namespace Mapping Namespace for the specified profile.")
ltmDns = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14))
ltmDnsProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1))
ltmDnsProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileNumber.setDescription("The number of ltmDnsProfile entries in the table.")
ltmDnsProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2))
if mibBuilder.loadTexts: ltmDnsProfileTable.setDescription("A table containing information for DNS profiles.")
ltmDnsProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsProfileName"))
if mibBuilder.loadTexts: ltmDnsProfileEntry.setDescription("Columns in the ltmDnsProfile Table")
ltmDnsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileName.setDescription("The name of a DNS profile.")
ltmDnsProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmDnsProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmDnsProfileGtmEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileGtmEnabled.setDescription("The state indicating whether or not to allow GTMD (Global Traffic Management\nDaemon) to handle DNS resolution for DNS queries and responses that contain\nWide IP names.")
ltmDnsProfileDns64Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,3,2,)).subtype(namedValues=NamedValues(("disable", 0), ("secondary", 1), ("immediate", 2), ("v4only", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDns64Mode.setDescription("The mode which specifies whether to perform DNS64 translation, and how\nto perform it.\ndisable - no DNS64 translation is performed;\nsecondary - send AAAA first, if no result send another A;\nimmediate - send both AAAA and A together;\nv4only - send only A request.")
ltmDnsProfileDns64PrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDns64PrefixType.setDescription("The IP address type of DNS64 prefix.")
ltmDnsProfileDns64Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDns64Prefix.setDescription("The prefix for DNS64 mapping for the specified DNS profile.")
ltmDnsProfileDns64AdditionalRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,3,)).subtype(namedValues=NamedValues(("disable", 0), ("v6only", 1), ("v4only", 2), ("any", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDns64AdditionalRewrite.setDescription("Controls system behavior when a DNS response contains AAAA or A record(s)\nin the additional section. When DNS64 is enabled, this option selects how\nto rewrite (or not rewrite) these entries.\ndisable - do not rewrite records in the additional section;\nv6only - the system deletes any A records in the additional section;\nv4only - the system deletes any AAAA records in the additional section,\nand rewrites A records into AAAA by prepending the IPv6 prefix;\nany - the system allows any AAAA records in the additional section, and\nrewrites A records into AAAA by prepending the IPv6 prefix.")
ltmDnsProfileDnsLastAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,0,2,)).subtype(namedValues=NamedValues(("allow", 0), ("drop", 1), ("reject", 2), ("hint", 3), ("noerror", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDnsLastAction.setDescription("Last action that will be taken if there is no matching zone name, i.e.\na DNS query does not match a GTM Wide IP name, is not a DNSSEC query type\n(e.g. DNSKEY, etc.), does not match a DNS-Express Zone name, and DNS\ncache is not configured/enabled.\nallow - last action is to pass the DNS query to either a pool member\nor on-box BIND. This is pre-11.x behavior;\ndrop - last action is to drop the DNS query;\nreject - last action is to send a DNS response with a REFUSED rcode\nset in the header;\nhint - last action is to send a DNS response with a list of root\nname servers;\nnoerror - last action is to send a DNS response with a NOERROR rcode\nset in the header.")
ltmDnsProfileUseLocalBind = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileUseLocalBind.setDescription("The state indicating whether or not local BIND is used as a DNS resource.")
ltmDnsProfileDnsExpressEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDnsExpressEnabled.setDescription("The state indicating whether or not DNS Express is enabled for the \nspecified profile.")
ltmDnsProfileDnssecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDnssecEnabled.setDescription("The state indicating whether or not DNSSEC is enabled for the specified \nprofile.")
ltmDnsProfileCacheEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileCacheEnabled.setDescription("The state indicating whether or not DNS cache is enabled for the specified \nprofile.")
ltmDnsProfileDnsCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDnsCache.setDescription("The name of the DNS cache used for the specified profile.")
ltmDnsProfileProcessRd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileProcessRd.setDescription("The state indicating whether or not the further processing of clientside\nDNS packets with the RD (recursion desired) bit set in the header is\nallowed. If set to false, packet is subject to last action processing.\nThis is for DDOS mitigation.")
ltmDnsProfileAvrDnsStatSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileAvrDnsStatSampleRate.setDescription("The AVR DNS statistics sample rate for the specified profile. When\nthe value is 0, no DNS queries will be stored in analytics database.\nWhen the value is 1, all DNS queries will be stored. When the value\nis an integer N (N>1), only one DNS query for every N DNS queries will be stored.")
ltmDnsProfileSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileSecurity.setDescription("The name of the DNS security used for the specified profile.")
ltmDnsProfileSecurityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileSecurityEnabled.setDescription("The state indicating whether or not DNS firewall is enabled for the specified \nprofile.")
ltmDnsProfileLoggingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileLoggingProfile.setDescription("The name of DNS logging profile that is being used.")
ltmDnsProfileLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileLoggingEnabled.setDescription("The state indicating whether or not DNS packet logging is enabled \nfor the specified profile.")
ltmDnsProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2))
ltmDnsProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmDnsProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmDnsProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatNumber.setDescription("The number of ltmDnsProfileStat entries in the table.")
ltmDnsProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3))
if mibBuilder.loadTexts: ltmDnsProfileStatTable.setDescription("A table containing statistics information for DNS profiles.")
ltmDnsProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatName"))
if mibBuilder.loadTexts: ltmDnsProfileStatEntry.setDescription("Columns in the ltmDnsProfileStat Table")
ltmDnsProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatName.setDescription("The name of a DNS profile.")
ltmDnsProfileStatQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatQueries.setDescription("The total number of DNS queries.")
ltmDnsProfileStatResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatResponses.setDescription("The total number of DNS responses.")
ltmDnsProfileStatResponsesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatResponsesPerSec.setDescription("The average number of DNS responses per second.")
ltmDnsProfileStatToGtm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatToGtm.setDescription("The number of requests sent to GTM.")
ltmDnsProfileStatDnsExpressReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsExpressReqs.setDescription("The number of DNS Express requests.")
ltmDnsProfileStatDnsExpressNotifies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsExpressNotifies.setDescription("The number of DNS Express notifies.")
ltmDnsProfileStatToCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatToCache.setDescription("The number of requests sent to the DNS cache.")
ltmDnsProfileStatToDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatToDns.setDescription("The number of requests sent to backend DNS.")
ltmDnsProfileStatDns64Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Reqs.setDescription("The number of A requests the system generated and sent.")
ltmDnsProfileStatDns64Rewrites = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Rewrites.setDescription("The number of A responses translated to AAAA.")
ltmDnsProfileStatDns64Failures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Failures.setDescription("The number of unsuccessful AAAA requests.")
ltmDnsProfileStatHints = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatHints.setDescription("The number of hint (Root Nameservers) responses sent.")
ltmDnsProfileStatRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRejects.setDescription("The number of reject (REFUSED) responses sent.")
ltmDnsProfileStatNoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatNoErrors.setDescription("The number of NOERROR responses sent.")
ltmDnsProfileStatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDrops.setDescription("The number of packets dropped (not sent to GTM, DNS-Express, DNSSEC,\nDNS64, or Backend DNS (e.g. BIND)).")
ltmDnsProfileStatMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatMalformed.setDescription("The number of malformed packets received.")
ltmDnsProfileStatTclSuspends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatTclSuspends.setDescription("The number of TCL suspends.")
ltmDnsProfileStatRecursionDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRecursionDesired.setDescription("The number of queries with RD bit set.")
ltmDnsProfileStatCheckingDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatCheckingDisabled.setDescription("The number of queries with CD bit set.")
ltmDnsProfileStatEdns0 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatEdns0.setDescription("The number of queries with EDNS0 bit set.")
ltmDnsProfileStatOpcodeQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeQuery.setDescription("The number of queries whose operation code is QUERY.")
ltmDnsProfileStatOpcodeNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeNotify.setDescription("The number of queries whose operation code is NOTIFY.")
ltmDnsProfileStatOpcodeUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeUpdate.setDescription("The number of queries whose operation code is UPDATE.")
ltmDnsProfileStatZoneIxfr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatZoneIxfr.setDescription("The number of queries whose question type is IXFR.")
ltmDnsProfileStatZoneAxfr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatZoneAxfr.setDescription("The number of queries whose question type is AXFR.")
ltmDnsProfileStatAuthoritativeAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAuthoritativeAnswer.setDescription("The number of responses with AA bit set.")
ltmDnsProfileStatRecursionAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRecursionAvailable.setDescription("The number of responses with RA bit set.")
ltmDnsProfileStatAuthenticatedData = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAuthenticatedData.setDescription("The number of responses with AD bit set.")
ltmDnsProfileStatTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatTruncated.setDescription("The number of responses with TC bit set.")
ltmDnsProfileStatRcodeNoerror = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeNoerror.setDescription("The number of responses whose return code is NOERROR.")
ltmDnsProfileStatRcodeNxdomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeNxdomain.setDescription("The number of responses whose return code is NXDOMAIN.")
ltmDnsProfileStatRcodeServfail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeServfail.setDescription("The number of responses whose return code is SERVFAIL.")
ltmDnsProfileStatRcodeRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeRefused.setDescription("The number of responses whose return code is REFUSED.")
ltmDnsProfileStatMalicious = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatMalicious.setDescription("The number of malicious packets received.")
ltmDnsProfileStatAReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAReqs.setDescription("The number of A query packets received.")
ltmDnsProfileStatAaaaReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAaaaReqs.setDescription("The number of AAAA query packets received.")
ltmDnsProfileStatAnyReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAnyReqs.setDescription("The number of ANY type query packets received.")
ltmDnsProfileStatCnameReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatCnameReqs.setDescription("The number of CNAME query packets received.")
ltmDnsProfileStatMxReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatMxReqs.setDescription("The number of MX query packets received.")
ltmDnsProfileStatNsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatNsReqs.setDescription("The number of NS query packets received.")
ltmDnsProfileStatPtrReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatPtrReqs.setDescription("The number of PTR query packets received.")
ltmDnsProfileStatSoaReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatSoaReqs.setDescription("The number of SOA query packets received.")
ltmDnsProfileStatSrvReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatSrvReqs.setDescription("The number of SRV query packets received.")
ltmDnsProfileStatTxtReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatTxtReqs.setDescription("The number of TXT query packets received.")
ltmDnsProfileStatOtherReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOtherReqs.setDescription("The number of uncategorized DNS packets received.")
ltmDnsProfileStatDnsEffectiveRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsEffectiveRateLimit.setDescription("The DNS services effective request rate limit.")
ltmDnsProfileStatDnsConfiguredObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsConfiguredObjects.setDescription("The number of DNS services configured objects for licensing purposes.")
ltmDnsProfileStatDnsRateRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsRateRejectedRequests.setDescription("The number of DNS services requests rejected due to rate limiter action.")
ltmDnsProfileStatGtmEffectiveRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatGtmEffectiveRateLimit.setDescription("The GTM effective request rate limit.")
ltmDnsProfileStatGtmConfiguredObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatGtmConfiguredObjects.setDescription("The number of GTM configured objects for licensing purposes.")
ltmDnsProfileStatGtmRateRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatGtmRateRejectedRequests.setDescription("The number of GTM requests rejected due to rate limiter action.")
ltmHttpClass = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15))
ltmHttpClassProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1))
ltmHttpClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassNumber.setDescription("Deprecated!.\nThe number of ltmHttpClassProfile entries in the table.")
ltmHttpClassTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2))
if mibBuilder.loadTexts: ltmHttpClassTable.setDescription("Deprecated! A table containing information of HTTP class profile.")
ltmHttpClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassName"))
if mibBuilder.loadTexts: ltmHttpClassEntry.setDescription("Columns in the ltmHttpClass Table")
ltmHttpClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassName.setDescription("Deprecated! The name of a HTTP class profile.")
ltmHttpClassConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassConfigSource.setDescription("Deprecated! The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmHttpClassDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassDefaultName.setDescription("Deprecated! The name of the profile from which the specified profile derives \nits attribute default values.")
ltmHttpClassPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassPoolName.setDescription("Deprecated! The pool name which will be used when the specified class matches.")
ltmHttpClassAsmEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassAsmEnabled.setDescription("Deprecated! The state indicating whether this is an Application Security Module class or not.")
ltmHttpClassWaEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassWaEnabled.setDescription("Deprecated! The state indicating whether this is a Web Accelerator class or not.")
ltmHttpClassRedirectLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassRedirectLocation.setDescription("Deprecated! The string (which may include a TCL expression) to indicate where to \nredirect the original HTTP request once a match occurs.")
ltmHttpClassUrlRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUrlRewrite.setDescription("Deprecated! The string (which may include a TCL expression) with which to rewrite \nthe URLs.")
ltmHttpClassProfileHost = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2))
ltmHttpClassHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHostNumber.setDescription("Deprecated!.\nThe number of ltmHttpClassProfileHost entries in the table.")
ltmHttpClassHostTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2))
if mibBuilder.loadTexts: ltmHttpClassHostTable.setDescription("Deprecated! A table containing information of host match patterns in HTTP class profiles.")
ltmHttpClassHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostIndex"))
if mibBuilder.loadTexts: ltmHttpClassHostEntry.setDescription("Columns in the ltmHttpClassHost Table")
ltmHttpClassHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHostName.setDescription("Deprecated! The name of a HTTP class profile.")
ltmHttpClassHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHostIndex.setDescription("Deprecated! The index of host match patterns for the specified HTTP class profile.")
ltmHttpClassHostString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHostString.setDescription("Deprecated! The host match pattern for the specified profile.")
ltmHttpClassProfileUri = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3))
ltmHttpClassUriNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUriNumber.setDescription("Deprecated!.\nThe number of ltmHttpClassProfileUri entries in the table.")
ltmHttpClassUriTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2))
if mibBuilder.loadTexts: ltmHttpClassUriTable.setDescription("Deprecated! A table containing information of URI match patterns in HTTP class profiles.")
ltmHttpClassUriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriIndex"))
if mibBuilder.loadTexts: ltmHttpClassUriEntry.setDescription("Columns in the ltmHttpClassUri Table")
ltmHttpClassUriName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUriName.setDescription("Deprecated! The name of a HTTP class profile.")
ltmHttpClassUriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUriIndex.setDescription("Deprecated! The index of URI match patterns for the specified HTTP class profile.")
ltmHttpClassUriString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUriString.setDescription("Deprecated! The URI match pattern for the specified profile.")
ltmHttpClassProfileHead = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4))
ltmHttpClassHeadNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHeadNumber.setDescription("Deprecated!.\nThe number of ltmHttpClassProfileHead entries in the table.")
ltmHttpClassHeadTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2))
if mibBuilder.loadTexts: ltmHttpClassHeadTable.setDescription("Deprecated! A table containing information of HTTP request header match patterns in HTTP class profiles.")
ltmHttpClassHeadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadIndex"))
if mibBuilder.loadTexts: ltmHttpClassHeadEntry.setDescription("Columns in the ltmHttpClassHead Table")
ltmHttpClassHeadName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHeadName.setDescription("Deprecated! The name of a HTTP class profile.")
ltmHttpClassHeadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHeadIndex.setDescription("Deprecated! The index of HTTP request header match patterns for the specified HTTP class profile.")
ltmHttpClassHeadString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHeadString.setDescription("Deprecated! The HTTP request header match pattern for the specified profile.")
ltmHttpClassProfileCook = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5))
ltmHttpClassCookNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassCookNumber.setDescription("Deprecated!.\nThe number of ltmHttpClassProfileCook entries in the table.")
ltmHttpClassCookTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2))
if mibBuilder.loadTexts: ltmHttpClassCookTable.setDescription("Deprecated! A table containing information of HTTP cookie match patterns in HTTP class profiles.")
ltmHttpClassCookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookIndex"))
if mibBuilder.loadTexts: ltmHttpClassCookEntry.setDescription("Columns in the ltmHttpClassCook Table")
ltmHttpClassCookName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassCookName.setDescription("Deprecated! The name of a HTTP class profile.")
ltmHttpClassCookIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassCookIndex.setDescription("Deprecated! The index of HTTP cookie match patterns for the specified HTTP class profile.")
ltmHttpClassCookString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassCookString.setDescription("Deprecated! The HTTP cookie match pattern for the specified profile.")
ltmHttpClassProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6))
ltmHttpClassStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmHttpClassStatResetStats.setDescription("Deprecated!.\nThe action to reset resetable statistics data in  ltmHttpClassProfileStat. \n Setting this value to 1 will reset statistics data. \n Note, some statistics data may not be reset including data that are incremental counters.")
ltmHttpClassStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatNumber.setDescription("Deprecated!.\nThe number of ltmHttpClassProfileStat entries in the table.")
ltmHttpClassStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3))
if mibBuilder.loadTexts: ltmHttpClassStatTable.setDescription("Deprecated! A table containing statistics information of HTTP class profile.")
ltmHttpClassStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatName"))
if mibBuilder.loadTexts: ltmHttpClassStatEntry.setDescription("Columns in the ltmHttpClassStat Table")
ltmHttpClassStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatName.setDescription("Deprecated! The name of a HTTP class profile.")
ltmHttpClassStatCookiePersistInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatCookiePersistInserts.setDescription("Deprecated! The number of successful attempts to insert HTTP headers \nfor cookie persistence (set-cookie header insertions).")
ltmHttpClassStatResp2xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatResp2xxCnt.setDescription("Deprecated! The number of server-side responses in range of 200 to 206 \n(successful responses)")
ltmHttpClassStatResp3xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatResp3xxCnt.setDescription("Deprecated! The number of server-side responses in range of 300 to 307 \n(redirection responses).")
ltmHttpClassStatResp4xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatResp4xxCnt.setDescription("Deprecated! The number of server-side responses in range of 400 to 417  \n(client errors).")
ltmHttpClassStatResp5xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatResp5xxCnt.setDescription("Deprecated! The number of server-side responses in range of 500 to 505 \n(server errors).")
ltmHttpClassStatNumberReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatNumberReqs.setDescription("Deprecated! The total number of HTTP requests.")
ltmHttpClassStatGetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatGetReqs.setDescription("Deprecated! The total number of HTTP get requests.")
ltmHttpClassStatPostReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPostReqs.setDescription("Deprecated! The total number of HTTP post requests.")
ltmHttpClassStatV9Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV9Reqs.setDescription("Deprecated! The total number of version 9 requests.")
ltmHttpClassStatV10Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV10Reqs.setDescription("Deprecated! The total number of version 10 requests.")
ltmHttpClassStatV11Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV11Reqs.setDescription("Deprecated! The total number of version 11 requests.")
ltmHttpClassStatV9Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV9Resp.setDescription("Deprecated! The total number of version 9 responses.")
ltmHttpClassStatV10Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV10Resp.setDescription("Deprecated! The total number of version 10 responses.")
ltmHttpClassStatV11Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV11Resp.setDescription("Deprecated! The total number of version 11 responses.")
ltmHttpClassStatMaxKeepaliveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatMaxKeepaliveReq.setDescription("Deprecated! The maximum number of requests made in a connection.")
ltmHttpClassStatRespBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket1k.setDescription("Deprecated! The number of responses under 1k.")
ltmHttpClassStatRespBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket4k.setDescription("Deprecated! The number of responses between 1 - 4k.")
ltmHttpClassStatRespBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket16k.setDescription("Deprecated! The number of responses between 4 - 16k.")
ltmHttpClassStatRespBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket32k.setDescription("Deprecated! The number of responses between 16 - 32k.")
ltmHttpClassStatRespBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket64k.setDescription("Deprecated! Please use larger buckets")
ltmHttpClassStatPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPrecompressBytes.setDescription("Deprecated! The number of response bytes before compression has taken place.")
ltmHttpClassStatPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPostcompressBytes.setDescription("Deprecated! The number of response bytes after compression has taken place.")
ltmHttpClassStatNullCompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatNullCompressBytes.setDescription("Deprecated! The number of bytes subjected to NULL compression (for license enforcement).")
ltmHttpClassStatHtmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatHtmlPrecompressBytes.setDescription("Deprecated! The number of pre-compressed bytes for the MIME-Types: HTML.")
ltmHttpClassStatHtmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatHtmlPostcompressBytes.setDescription("Deprecated! The number of post-compressed bytes for the MIME-Types: HTML.")
ltmHttpClassStatCssPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatCssPrecompressBytes.setDescription("Deprecated! The number of pre-compressed bytes for the MIME-Types: CSS.")
ltmHttpClassStatCssPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatCssPostcompressBytes.setDescription("Deprecated! The number of post-compressed bytes for the MIME-Types: CSS.")
ltmHttpClassStatJsPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatJsPrecompressBytes.setDescription("Deprecated! The number of pre-compressed bytes for the MIME-Types: Javascript.")
ltmHttpClassStatJsPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatJsPostcompressBytes.setDescription("Deprecated! The number of post-compressed bytes for the MIME-Types: Javascript.")
ltmHttpClassStatXmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatXmlPrecompressBytes.setDescription("Deprecated! The number of pre-compressed bytes for the MIME-Types: XML.")
ltmHttpClassStatXmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatXmlPostcompressBytes.setDescription("Deprecated! The number of post-compressed bytes for the MIME-Types: XML.")
ltmHttpClassStatSgmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatSgmlPrecompressBytes.setDescription("Deprecated! The number of pre-compressed bytes for the MIME-Types: SGML.")
ltmHttpClassStatSgmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatSgmlPostcompressBytes.setDescription("Deprecated! The number of post-compressed bytes for the MIME-Types: SGML.")
ltmHttpClassStatPlainPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPlainPrecompressBytes.setDescription("Deprecated! The number of pre-compressed bytes for the MIME-Types: Plain.")
ltmHttpClassStatPlainPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPlainPostcompressBytes.setDescription("Deprecated! The number of post-compressed bytes for the MIME-Types: Plain.")
ltmHttpClassStatOctetPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatOctetPrecompressBytes.setDescription("Deprecated! The number of pre-compressed bytes for the MIME-Types: Octet stream.")
ltmHttpClassStatOctetPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatOctetPostcompressBytes.setDescription("Deprecated! The number of post-compressed bytes for the MIME-Types: Octet stream.")
ltmHttpClassStatImagePrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatImagePrecompressBytes.setDescription("Deprecated! The number of pre-compressed bytes for the MIME-Types: Images.")
ltmHttpClassStatImagePostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatImagePostcompressBytes.setDescription("Deprecated! The number of post-compressed bytes for the MIME-Types: Images.")
ltmHttpClassStatVideoPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatVideoPrecompressBytes.setDescription("Deprecated! The number of pre-compressed bytes for the MIME-Types: Video files.")
ltmHttpClassStatVideoPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatVideoPostcompressBytes.setDescription("Deprecated! The number of post-compressed bytes for the MIME-Types: Video files.")
ltmHttpClassStatAudioPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatAudioPrecompressBytes.setDescription("Deprecated! The number of pre-compressed bytes for the MIME-Types: Audio files.")
ltmHttpClassStatAudioPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatAudioPostcompressBytes.setDescription("Deprecated! The number of post-compressed bytes for the MIME-Types: Audio files.")
ltmHttpClassStatOtherPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatOtherPrecompressBytes.setDescription("Deprecated! The number of pre-compressed bytes for the MIME-Types: other than \nHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \nAudio files.")
ltmHttpClassStatOtherPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatOtherPostcompressBytes.setDescription("Deprecated! The number of post-compressed bytes for the MIME-Types: other than \nHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \nAudio files.")
ltmHttpClassStatRamcacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheHits.setDescription("Deprecated! The number of RAM cache hits.")
ltmHttpClassStatRamcacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMisses.setDescription("Deprecated! The number of RAM cache misses, excluding un-cacheable data.")
ltmHttpClassStatRamcacheMissesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissesAll.setDescription("Deprecated! The total number of RAM cache misses.")
ltmHttpClassStatRamcacheHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheHitBytes.setDescription("Deprecated! The number of RAM cache hits in bytes.")
ltmHttpClassStatRamcacheMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissBytes.setDescription("Deprecated! The number of RAM cache misses in bytes, excluding un-cacheable data.")
ltmHttpClassStatRamcacheMissBytesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissBytesAll.setDescription("Deprecated! The total number of RAM cache misses in bytes.")
ltmIiop = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16))
ltmIiopProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1))
ltmIiopProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileNumber.setDescription("The number of ltmIiopProfile entries in the table.")
ltmIiopProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2))
if mibBuilder.loadTexts: ltmIiopProfileTable.setDescription("A table containing information of IIOP profile.")
ltmIiopProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmIiopProfileName"))
if mibBuilder.loadTexts: ltmIiopProfileEntry.setDescription("Columns in the ltmIiopProfile Table")
ltmIiopProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileName.setDescription("The name of a IIOP profile.")
ltmIiopProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmIiopProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileDefaultName.setDescription("The name of the profile from which the specified profile derives\nits attribute default values.")
ltmIiopProfilePersistRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfilePersistRequestId.setDescription("The state that if true, persist the request ID.")
ltmIiopProfilePersistObjectKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfilePersistObjectKey.setDescription("The state that if true, persist the object key.")
ltmIiopProfileAbortOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileAbortOnTimeout.setDescription("The state that if true, abort the connection when response is\ntimed out.")
ltmIiopProfileTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileTimeout.setDescription("The response timeout for the specified IIOP profile.")
ltmIiopProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2))
ltmIiopProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmIiopProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmIiopProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmIiopProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumber.setDescription("The number of ltmIiopProfileStat entries in the table.")
ltmIiopProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3))
if mibBuilder.loadTexts: ltmIiopProfileStatTable.setDescription("A table containing statistic information of IIOP profile.")
ltmIiopProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatName"))
if mibBuilder.loadTexts: ltmIiopProfileStatEntry.setDescription("Columns in the ltmIiopProfileStat Table")
ltmIiopProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatName.setDescription("The name of a IIOP profile.")
ltmIiopProfileStatNumRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumRequests.setDescription("The total number of IIOP requests.")
ltmIiopProfileStatNumResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumResponses.setDescription("The total number of IIOP responses.")
ltmIiopProfileStatNumCancels = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumCancels.setDescription("The total number of IIOP cancel messages.")
ltmIiopProfileStatNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumErrors.setDescription("The total number of IIOP error messages.")
ltmIiopProfileStatNumFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumFragments.setDescription("The total number of IIOP fragments.")
ltmRtsp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17))
ltmRtspProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1))
ltmRtspProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileNumber.setDescription("The number of ltmRtspProfile entries in the table.")
ltmRtspProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2))
if mibBuilder.loadTexts: ltmRtspProfileTable.setDescription("A table containing information of RTSP profile.")
ltmRtspProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRtspProfileName"))
if mibBuilder.loadTexts: ltmRtspProfileEntry.setDescription("Columns in the ltmRtspProfile Table")
ltmRtspProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileName.setDescription("The name of a RTSP profile.")
ltmRtspProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmRtspProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileDefaultName.setDescription("The name of the profile from which the specified profile derives\nits attribute default values.")
ltmRtspProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileIdleTimeout.setDescription("The idle timeout (in seconds) for the specified RTSP profile.")
ltmRtspProfileMaxHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileMaxHeaderSize.setDescription("The maximum header size in bytes for the specified RTSP profile.")
ltmRtspProfileMaxQueuedData = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileMaxQueuedData.setDescription("The maximum queued data in bytes for the specified RTSP profile.")
ltmRtspProfileUnicastRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileUnicastRedirect.setDescription("The state indicating whether unicast redirect is enable or not\nfor the specified RTSP profile.")
ltmRtspProfileMulticastRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileMulticastRedirect.setDescription("The state indicating whether multicast redirect is enable or not\nfor the specified RTSP profile.")
ltmRtspProfileSessionReconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileSessionReconnect.setDescription("The state indicating whether session reconnecting is enable or not\nfor the specified RTSP profile.")
ltmRtspProfileRealHttpPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileRealHttpPersistence.setDescription("The state indicating whether real HTTP persistence is enable or not\nfor the specified RTSP profile.")
ltmRtspProfileProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("none", 0), ("external", 1), ("internal", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileProxy.setDescription("The proxy state for the specified RTSP profile.")
ltmRtspProfileProxyHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileProxyHeader.setDescription("The proxy header for the specified RTSP profile.")
ltmRtspProfileRtpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 13), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileRtpPort.setDescription("The RTP port for the specified RTSP profile.")
ltmRtspProfileRtcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileRtcpPort.setDescription("The RTCP port for the specified RTSP profile.")
ltmRtspProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2))
ltmRtspProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRtspProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmRtspProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmRtspProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumber.setDescription("The number of ltmRtspProfileStat entries in the table.")
ltmRtspProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3))
if mibBuilder.loadTexts: ltmRtspProfileStatTable.setDescription("A table containing statistic information of RTSP profile.")
ltmRtspProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatName"))
if mibBuilder.loadTexts: ltmRtspProfileStatEntry.setDescription("Columns in the ltmRtspProfileStat Table")
ltmRtspProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatName.setDescription("The name of a RTSP profile.")
ltmRtspProfileStatNumRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumRequests.setDescription("The total number of RTSP requests for the specified RTSP profile.")
ltmRtspProfileStatNumResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumResponses.setDescription("The total number of RTSP responses for the specified RTSP profile.")
ltmRtspProfileStatNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumErrors.setDescription("The total number of RTSP errors for the specified RTSP profile.")
ltmRtspProfileStatNumInterleaved = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumInterleaved.setDescription("The total number of interleaved RTSP data packets for the specified RTSP profile.")
ltmSctp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18))
ltmSctpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1))
ltmSctpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileNumber.setDescription("The number of ltmSctpProfile entries in the table.")
ltmSctpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2))
if mibBuilder.loadTexts: ltmSctpProfileTable.setDescription("A table containing information of SCTP profile.")
ltmSctpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSctpProfileName"))
if mibBuilder.loadTexts: ltmSctpProfileEntry.setDescription("Columns in the ltmSctpProfile Table")
ltmSctpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileName.setDescription("The name of a SCTP profile.")
ltmSctpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmSctpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileDefaultName.setDescription("The name of the profile from which the specified profile derives\nits attribute default values.")
ltmSctpProfileRcvOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileRcvOrdered.setDescription("The state indicating whether or not to in-order deliver messages to upper layer \nfor the specified profile.")
ltmSctpProfileSndPartial = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileSndPartial.setDescription("The state indicating whether or not to accept partial of application data\nfor the specified profile.")
ltmSctpProfileTcpShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileTcpShutdown.setDescription("The state indicating whether or not to emulate TCP closing\nfor the specified profile.")
ltmSctpProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileResetOnTimeout.setDescription("The state indicating whether or not reset connection when timeout\nfor the specified profile.")
ltmSctpProfileOutStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileOutStreams.setDescription("The total number of out-bound streams for the specified profile.")
ltmSctpProfileInStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileInStreams.setDescription("The total number of in-bound streams for the specified profile.")
ltmSctpProfileSndbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileSndbuf.setDescription("The send buffer size in bytes for the specified profile.")
ltmSctpProfileRcvwnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileRcvwnd.setDescription("The received window size, should be prorated to ltmSctpProfileRxChuncks \nfor the specified profile.")
ltmSctpProfileTxChunks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileTxChunks.setDescription("The number of sending chunk buffer for the specified profile.")
ltmSctpProfileRxChunks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileRxChunks.setDescription("The number of receiving chunk buffer for the specified profile.")
ltmSctpProfileCookieExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileCookieExpiration.setDescription("The valid duration of cookie for the specified profile.")
ltmSctpProfileInitMaxrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileInitMaxrtx.setDescription("The maximum number of retries to establish a connection for the specified profile.")
ltmSctpProfileAssocMaxrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileAssocMaxrtx.setDescription("The maximum number of retries to send data for the specified profile.")
ltmSctpProfileProxyBufferLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileProxyBufferLow.setDescription("The proxy buffer level at which the receive window is opened \nfor the specified profile.")
ltmSctpProfileProxyBufferHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileProxyBufferHigh.setDescription("The proxy buffer level at which the receive window is closed \nfor the specified profile.")
ltmSctpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileIdleTimeout.setDescription("The number of seconds without traffic before a connection is eligible \nfor deletion for the specified profile.")
ltmSctpProfileHeartbeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileHeartbeatInterval.setDescription("The number of seconds to send heartbeat for the specified profile.")
ltmSctpProfileIpTosToPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileIpTosToPeer.setDescription("The IP type of service set in packets sent to peer for the specified profile.")
ltmSctpProfileLinkQosToPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileLinkQosToPeer.setDescription("The link quality of service set in packets sent to peer for the specified profile.")
ltmSctpProfileSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 23), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileSecret.setDescription("The internal secret string used to HMAC cookie for the specified profile.")
ltmSctpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2))
ltmSctpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSctpProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmSctpProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmSctpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatNumber.setDescription("The number of ltmSctpProfileStat entries in the table.")
ltmSctpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3))
if mibBuilder.loadTexts: ltmSctpProfileStatTable.setDescription("A table containing statistic information of SCTP profile.")
ltmSctpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatName"))
if mibBuilder.loadTexts: ltmSctpProfileStatEntry.setDescription("Columns in the ltmSctpProfileStat Table")
ltmSctpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatName.setDescription("The name of a SCTP profile.")
ltmSctpProfileStatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatAccepts.setDescription("The total number of accepted connections for the specified profile.")
ltmSctpProfileStatAcceptfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatAcceptfails.setDescription("The total number of not accepted responses for the specified profile.")
ltmSctpProfileStatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatConnects.setDescription("The total number of established connections for the specified profile.")
ltmSctpProfileStatConnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatConnfails.setDescription("The total number of connections failures for the specified profile.")
ltmSctpProfileStatExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatExpires.setDescription("The total number of expired connections due to idle timeout for the specified profile.")
ltmSctpProfileStatAbandons = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatAbandons.setDescription("The total number of abandoned connections due to retries/keep-alives  for the specified profile.")
ltmSctpProfileStatRxrst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatRxrst.setDescription("The total number of received Abort chunks for the specified profile.")
ltmSctpProfileStatRxbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatRxbadsum.setDescription("The total number of bad checksum in received packets for the specified profile.")
ltmSctpProfileStatRxcookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatRxcookie.setDescription("The total number of received SCTP cookies (including bad and good ones) for the specified profile.")
ltmSctpProfileStatRxbadcookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatRxbadcookie.setDescription("The total number of received bad SCTP cookies for the specified profile.")
ltmUserStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19))
ltmUserStatProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1))
ltmUserStatProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileNumber.setDescription("The number of ltmUserStatProfile entries in the table.")
ltmUserStatProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2))
if mibBuilder.loadTexts: ltmUserStatProfileTable.setDescription("A table containing basic information of user-defined statistics profiles., \nThe user can define up to 32 statistic fields in each profile. \nSee ltmUserStatProfileStatTable for user-defined fields for each profile.")
ltmUserStatProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileName"))
if mibBuilder.loadTexts: ltmUserStatProfileEntry.setDescription("Columns in the ltmUserStatProfile Table")
ltmUserStatProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileName.setDescription("The name of an user-defined statistics profile.")
ltmUserStatProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmUserStatProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmUserStatProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2))
ltmUserStatProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmUserStatProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmUserStatProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmUserStatProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatNumber.setDescription("The number of ltmUserStatProfileStat entries in the table.")
ltmUserStatProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3))
if mibBuilder.loadTexts: ltmUserStatProfileStatTable.setDescription("A table containing user-defined statistics information for related profiles.\nThe maximum for user-defined statistic fields is 32 for each profile.")
ltmUserStatProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatFieldId"))
if mibBuilder.loadTexts: ltmUserStatProfileStatEntry.setDescription("Columns in the ltmUserStatProfileStat Table")
ltmUserStatProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatName.setDescription("The name of an user-defined statistics profile.")
ltmUserStatProfileStatFieldId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldId.setDescription("The index of the user-defined statistics field.")
ltmUserStatProfileStatFieldName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldName.setDescription("The name of the related user-defined statistic field.")
ltmUserStatProfileStatFieldValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldValue.setDescription("The value of the related user-defined statistic field.")
ltmSip = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20))
ltmSipProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1))
ltmSipProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileNumber.setDescription("The number of ltmSipProfile entries in the table.")
ltmSipProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2))
if mibBuilder.loadTexts: ltmSipProfileTable.setDescription("A table containing configuratin information of SIP profiles.")
ltmSipProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSipProfileName"))
if mibBuilder.loadTexts: ltmSipProfileEntry.setDescription("Columns in the ltmSipProfile Table")
ltmSipProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileName.setDescription("The name of a SIP profile.")
ltmSipProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmSipProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmSipProfileMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileMaxSize.setDescription("The acceptable maximum SIP message size for the specified profile.")
ltmSipProfileTerminateBye = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileTerminateBye.setDescription("The state indicating whether  or not to terminate connection after bye (200 BYE) message for the specified profile.")
ltmSipProfileInsertVia = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileInsertVia.setDescription("The state indicating whether or not to insert Via for the specified profile.")
ltmSipProfileSecureVia = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileSecureVia.setDescription("The state indicating whether or not it is SIPS/2.0/TLS for the specified profile.")
ltmSipProfileInsertRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileInsertRecordRoute.setDescription("The state indicating whether or not insert Record-route for the specified profile.")
ltmSipProfileFirewallEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileFirewallEnabled.setDescription("The state indicating whether or not SIP firewall is enabled for the specified \nprofile.")
ltmSipProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2))
ltmSipProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSipProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmSipProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmSipProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatNumber.setDescription("The number of ltmSipProfileStat entries in the table.")
ltmSipProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3))
if mibBuilder.loadTexts: ltmSipProfileStatTable.setDescription("A table containing statistics information of SIP profiles.")
ltmSipProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatName"))
if mibBuilder.loadTexts: ltmSipProfileStatEntry.setDescription("Columns in the ltmSipProfileStat Table")
ltmSipProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatName.setDescription("The name of a SIP profile.")
ltmSipProfileStatRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatRequests.setDescription("The total number of requests received for the specified profile.")
ltmSipProfileStatResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatResponses.setDescription("The total number of responses sent for the specified profile.")
ltmSipProfileStatBadmsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatBadmsgs.setDescription("The total number of bad messages for the specified profile.")
ltmSipProfileStatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatDrops.setDescription("The total number of dropped packets for the specified profile.")
ltmIsession = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21))
ltmIsessionProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1))
ltmIsessionProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileNumber.setDescription("The number of ltmIsessionProfile entries in the table.")
ltmIsessionProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2))
if mibBuilder.loadTexts: ltmIsessionProfileTable.setDescription("A table containing configuratin information of Isession profiles.")
ltmIsessionProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileName"))
if mibBuilder.loadTexts: ltmIsessionProfileEntry.setDescription("Columns in the ltmIsessionProfile Table")
ltmIsessionProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileName.setDescription("The name of a iSession profile.")
ltmIsessionProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileMode.setDescription("Enable/disable this profile.")
ltmIsessionProfileConnectionReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileConnectionReuse.setDescription("Enable/disable connection reuse.")
ltmIsessionProfileCompressionNull = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionNull.setDescription("Deprecated!  \nSelect null compression method if enabled.")
ltmIsessionProfileCompressionDeflate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionDeflate.setDescription("Deprecated!  \nReplaced by ltmIsessionCompression and ltmIsessionCompressionCodecs.")
ltmIsessionProfileCompressionLzo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionLzo.setDescription("Deprecated!  \nReplaced by ltmIsessionCompression and ltmIsessionCompressionCodecs.")
ltmIsessionProfileCompressionAdaptive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionAdaptive.setDescription("Select adaptive compression method if enabled.")
ltmIsessionProfileDeduplication = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileDeduplication.setDescription("Enable/disable deduplication functionality.")
ltmIsessionProfilePortTransparency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfilePortTransparency.setDescription("Use same destination port over WAN as specified by the client.")
ltmIsessionProfileTargetVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(3,0,1,2,)).subtype(namedValues=NamedValues(("none", 0), ("hostmatchnoisession", 1), ("hostmatchall", 2), ("matchall", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileTargetVirtual.setDescription("Use to provide good match for targetted virtual.")
ltmIsessionProfileEndpointPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileEndpointPool.setDescription("The name of a LTM pool for paired tunneling.")
ltmIsessionProfileCompressionDeflateLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionDeflateLevel.setDescription("Select compression level [1-9] when deflate compression method is enabled.")
ltmIsessionProfileCompressionBzip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionBzip2.setDescription("Deprecated! \nReplaced by ltmIsessionCompression and ltmIsessionCompressionCodecs.")
ltmIsessionProfileCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompression.setDescription("Enable/disable compression functionality.")
ltmIsessionProfileCompressionCodecs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionCodecs.setDescription("Assign lzo(0), deflate(1), bzip2(2) comression methods, if compression enabled.")
ltmIsessionProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2))
ltmIsessionProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmIsessionProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmIsessionProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmIsessionProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNumber.setDescription("The number of ltmIsessionProfileStat entries in the table.")
ltmIsessionProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3))
if mibBuilder.loadTexts: ltmIsessionProfileStatTable.setDescription("A table containing statistics information for virtual servers with iSession profiles")
ltmIsessionProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatVsName"))
if mibBuilder.loadTexts: ltmIsessionProfileStatEntry.setDescription("Columns in the ltmIsessionProfileStat Table")
ltmIsessionProfileStatVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatVsName.setDescription("The name of a iSession virtual server.")
ltmIsessionProfileStatProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatProfileName.setDescription("The name of a iSession profile.")
ltmIsessionProfileStatNullInUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInUses.setDescription("The number of uses NULL compression for IN towards LAN")
ltmIsessionProfileStatNullInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInErrors.setDescription("The number of errors in use NULL compression for IN towards LAN")
ltmIsessionProfileStatNullInBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInBytesOpt.setDescription("The number of opt bytes NULL compression for IN towards LAN")
ltmIsessionProfileStatNullInBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInBytesRaw.setDescription("The number of raw bytes NULL compression for IN towards LAN")
ltmIsessionProfileStatNullOutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutUses.setDescription("The number of uses NULL compression for OUT towards WAN")
ltmIsessionProfileStatNullOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutErrors.setDescription("The number of errors in use NULL compression for OUT towards WAN")
ltmIsessionProfileStatNullOutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutBytesOpt.setDescription("The number of opt bytes NULL compression for OUT towards WAN")
ltmIsessionProfileStatNullOutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutBytesRaw.setDescription("The number of raw bytes NULL compression for OUT towards WAN")
ltmIsessionProfileStatLzoInUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInUses.setDescription("The number of uses LZO compression for IN towards LAN")
ltmIsessionProfileStatLzoInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInErrors.setDescription("The number of errors in use LZO compression for IN towards LAN")
ltmIsessionProfileStatLzoInBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInBytesOpt.setDescription("The number of opt bytes LZO compression for IN towards LAN")
ltmIsessionProfileStatLzoInBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInBytesRaw.setDescription("The number of raw bytes LZO compression for IN towards LAN")
ltmIsessionProfileStatLzoOutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutUses.setDescription("The number of uses LZO compression for OUT towards WAN")
ltmIsessionProfileStatLzoOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutErrors.setDescription("The number of errors in use LZO compression for OUT towards WAN")
ltmIsessionProfileStatLzoOutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutBytesOpt.setDescription("The number of opt bytes LZO compression for OUT towards WAN")
ltmIsessionProfileStatLzoOutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutBytesRaw.setDescription("The number of raw bytes LZO compression for OUT towards WAN")
ltmIsessionProfileStatDeflateInUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInUses.setDescription("The number of uses DEFLATE compression for IN towards LAN")
ltmIsessionProfileStatDeflateInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInErrors.setDescription("The number of errors in use DEFLATE compression for IN towards LAN")
ltmIsessionProfileStatDeflateInBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInBytesOpt.setDescription("The number of opt bytes DEFLATE compression for IN towards LAN")
ltmIsessionProfileStatDeflateInBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInBytesRaw.setDescription("The number of raw bytes DEFLATE compression for IN towards LAN")
ltmIsessionProfileStatDeflateOutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutUses.setDescription("The number of uses DEFLATE compression for OUT towards WAN")
ltmIsessionProfileStatDeflateOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutErrors.setDescription("The number of errors in use DEFLATE compression for OUT towards WAN")
ltmIsessionProfileStatDeflateOutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutBytesOpt.setDescription("The number of opt bytes DEFLATE compression for OUT towards WAN")
ltmIsessionProfileStatDeflateOutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutBytesRaw.setDescription("The number of raw bytes DEFLATE compression for OUT towards WAN")
ltmIsessionProfileStatDedupInUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInUses.setDescription("The number of uses DEDUPLICATION compression for IN towards LAN")
ltmIsessionProfileStatDedupInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInErrors.setDescription("The number of errors in use DEDUPLICATION compression for IN towards LAN")
ltmIsessionProfileStatDedupInBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInBytesOpt.setDescription("The number of opt bytes DEDUPLICATION compression for IN towards LAN")
ltmIsessionProfileStatDedupInBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInBytesRaw.setDescription("The number of raw bytes DEDUPLICATION compression for IN towards LAN")
ltmIsessionProfileStatDedupOutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutUses.setDescription("The number of uses DEDUPLICATION compression for OUT towards WAN")
ltmIsessionProfileStatDedupOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutErrors.setDescription("The number of errors in use DEDUPLICATION compression for OUT towards WAN")
ltmIsessionProfileStatDedupOutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutBytesOpt.setDescription("The number of opt bytes DEDUPLICATION compression for OUT towards WAN")
ltmIsessionProfileStatDedupOutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutBytesRaw.setDescription("The number of raw bytes DEDUPLICATION compression for OUT towards WAN")
ltmIsessionProfileStatDedupInHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHits.setDescription("The number of deduplication hits for IN towards LAN")
ltmIsessionProfileStatDedupInHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitBytes.setDescription("The number of deduplication hit bytes for IN towards LAN")
ltmIsessionProfileStatDedupInHitHistBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket1k.setDescription("The number of deduplication hits with size less than 1k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInHitHistBucket2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket2k.setDescription("The number of deduplication hits with size between 1k and 2k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInHitHistBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket4k.setDescription("The number of deduplication hits with size between 2k and 4k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInHitHistBucket8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket8k.setDescription("The number of deduplication hits with size between 4k and 8k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInHitHistBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket16k.setDescription("The number of deduplication hits with size between 8k and 16k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInHitHistBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket32k.setDescription("The number of deduplication hits with size between 16k and 32k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInHitHistBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket64k.setDescription("The number of deduplication hits with size between 32k and 64k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInHitHistBucket128k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket128k.setDescription("The number of deduplication hits with size between 64k and 128k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInHitHistBucket256k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket256k.setDescription("The number of deduplication hits with size between 128k and 256k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInHitHistBucket512k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket512k.setDescription("The number of deduplication hits with size between 256k and 512k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInHitHistBucket1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket1m.setDescription("The number of deduplication hits with size between 512k and 1m bytes for IN towards LAN")
ltmIsessionProfileStatDedupInHitHistBucketLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucketLarge.setDescription("The number of deduplication hits with size more than 1m bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMisses.setDescription("The number of deduplication misses for IN towards LAN")
ltmIsessionProfileStatDedupInMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissBytes.setDescription("The number of deduplication misses bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMissHistBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket1k.setDescription("The number of deduplication misses with size less than 1k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMissHistBucket2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket2k.setDescription("The number of deduplication misses with size between 1k and 2k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMissHistBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket4k.setDescription("The number of deduplication misses with size between 2k and 4k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMissHistBucket8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket8k.setDescription("The number of deduplication misses with size between 4k and 8k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMissHistBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket16k.setDescription("The number of deduplication misses with size between 8k and 16k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMissHistBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket32k.setDescription("The number of deduplication misses with size between 16k and 32k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMissHistBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket64k.setDescription("The number of deduplication misses with size between 32k and 64k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMissHistBucket128k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket128k.setDescription("The number of deduplication misses with size between 64k and 128k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMissHistBucket256k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket256k.setDescription("The number of deduplication misses with size between 128k and 256k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMissHistBucket512k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket512k.setDescription("The number of deduplication misses with size between 256k and 512k bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMissHistBucket1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket1m.setDescription("The number of deduplication misses with size between 512k and 1m bytes for IN towards LAN")
ltmIsessionProfileStatDedupInMissHistBucketLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucketLarge.setDescription("The number of deduplication misses with size more than 1m bytes for IN towards LAN")
ltmIsessionProfileStatDedupOutHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHits.setDescription("The number of deduplication hits for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitBytes.setDescription("The number of deduplication hit bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitHistBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket1k.setDescription("The number of deduplication hits with size less than 1k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitHistBucket2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket2k.setDescription("The number of deduplication hits with size between 1k and 2k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitHistBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket4k.setDescription("The number of deduplication hits with size between 2k and 4k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitHistBucket8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket8k.setDescription("The number of deduplication hits with size between 4k and 8k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitHistBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket16k.setDescription("The number of deduplication hits with size between 8k and 16k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitHistBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket32k.setDescription("The number of deduplication hits with size between 16k and 32k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitHistBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket64k.setDescription("The number of deduplication hits with size between 32k and 64k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitHistBucket128k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket128k.setDescription("The number of deduplication hits with size between 64k and 128k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitHistBucket256k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket256k.setDescription("The number of deduplication hits with size between 128k and 256k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitHistBucket512k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket512k.setDescription("The number of deduplication hits with size between 256k and 512k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitHistBucket1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket1m.setDescription("The number of deduplication hits with size between 512k and 1m bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutHitHistBucketLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucketLarge.setDescription("The number of deduplication hits with size more than 1m bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMisses.setDescription("The number of deduplication misses for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissBytes.setDescription("The number of deduplication misses bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissHistBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket1k.setDescription("The number of deduplication misses with size less than 1k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissHistBucket2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket2k.setDescription("The number of deduplication misses with size between 1k and 2k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissHistBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket4k.setDescription("The number of deduplication misses with size between 2k and 4k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissHistBucket8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket8k.setDescription("The number of deduplication misses with size between 4k and 8k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissHistBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket16k.setDescription("The number of deduplication misses with size between 8k and 16k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissHistBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket32k.setDescription("The number of deduplication misses with size between 16k and 32k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissHistBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket64k.setDescription("The number of deduplication misses with size between 32k and 64k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissHistBucket128k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket128k.setDescription("The number of deduplication misses with size between 64k and 128k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissHistBucket256k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket256k.setDescription("The number of deduplication misses with size between 128k and 256k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissHistBucket512k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket512k.setDescription("The number of deduplication misses with size between 256k and 512k bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissHistBucket1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket1m.setDescription("The number of deduplication misses with size between 512k and 1m bytes for OUT towards WAN")
ltmIsessionProfileStatDedupOutMissHistBucketLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucketLarge.setDescription("The number of deduplication misses with size more than 1m bytes for OUT towards WAN")
ltmIsessionProfileStatOutgoingConnsIdleCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 91), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleCur.setDescription("The current number of outgoing idle connections")
ltmIsessionProfileStatOutgoingConnsIdleMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleMax.setDescription("The maximum number of outgoing idle connections")
ltmIsessionProfileStatOutgoingConnsIdleTot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleTot.setDescription("The total number of outgoing idle connections")
ltmIsessionProfileStatOutgoingConnsActiveCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 94), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveCur.setDescription("The current number of outgoing active connections")
ltmIsessionProfileStatOutgoingConnsActiveMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveMax.setDescription("The maximum number of outgoing active connections")
ltmIsessionProfileStatOutgoingConnsActiveTot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveTot.setDescription("The total number of outgoing active connections")
ltmIsessionProfileStatOutgoingConnsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsErrors.setDescription("The number of outgoing connection errors")
ltmIsessionProfileStatOutgoingConnsPassthruTot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsPassthruTot.setDescription("The number of outgoing passthrough connections")
ltmIsessionProfileStatIncomingConnsActiveCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 99), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveCur.setDescription("The current number of incoming active connections")
ltmIsessionProfileStatIncomingConnsActiveMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveMax.setDescription("The maximum number of incoming active connections")
ltmIsessionProfileStatIncomingConnsActiveTot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveTot.setDescription("The total number of incoming active connections")
ltmIsessionProfileStatIncomingConnsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsErrors.setDescription("The number of incoming connection errors")
ltmIsessionProfileStatBzip2InUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InUses.setDescription("The number of uses BZIP2 compression for IN towards LAN")
ltmIsessionProfileStatBzip2InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InErrors.setDescription("The number of errors in use BZIP2 compression for IN towards LAN")
ltmIsessionProfileStatBzip2InBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InBytesOpt.setDescription("The number of opt bytes BZIP2 compression for IN towards LAN")
ltmIsessionProfileStatBzip2InBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InBytesRaw.setDescription("The number of raw bytes BZIP2 compression for IN towards LAN")
ltmIsessionProfileStatBzip2OutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutUses.setDescription("The number of uses BZIP2 compression for OUT towards WAN")
ltmIsessionProfileStatBzip2OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutErrors.setDescription("The number of errors in use BZIP2 compression for OUT towards WAN")
ltmIsessionProfileStatBzip2OutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutBytesOpt.setDescription("The number of opt bytes BZIP2 compression for OUT towards WAN")
ltmIsessionProfileStatBzip2OutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutBytesRaw.setDescription("The number of raw bytes BZIP2 compression for OUT towards WAN")
ltmHttpCompression = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22))
ltmHttpCompressionProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1))
ltmHttpCompressionProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileNumber.setDescription("The number of ltmHttpCompressionProfile entries in the table.")
ltmHttpCompressionProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2))
if mibBuilder.loadTexts: ltmHttpCompressionProfileTable.setDescription("A table containing information of HTTP Compression profiles.")
ltmHttpCompressionProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileName"))
if mibBuilder.loadTexts: ltmHttpCompressionProfileEntry.setDescription("Columns in the ltmHttpCompressionProfile Table")
ltmHttpCompressionProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileName.setDescription("The name of a HTTP compression profile.")
ltmHttpCompressionProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmHttpCompressionProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmHttpCompressionProfileSelective = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileSelective.setDescription("The state that specifies whether selective compression is enabled.")
ltmHttpCompressionProfileMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileMinSize.setDescription("The value that specifies the minimum length of the server \nresponses (in bytes) to be considered acceptable for compression.")
ltmHttpCompressionProfileBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileBufferSize.setDescription("The value that specifies the maximum number of uncompressed bytes \nthat the compression proxy will buffer before it decides whether or \nnot to compress the server's response, in case the server's response \nheaders don't specify the content length of the response.")
ltmHttpCompressionProfileVaryHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileVaryHeader.setDescription("The state that specifies whether to insert the header \n'Vary: Accept-Encoding' in the server response for responses that \nhave been compressed. If the 'Vary:' header already exists in the \nserver response, then the value 'Accept-Encoding' will be appended to it.")
ltmHttpCompressionProfileAllowHttp10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileAllowHttp10.setDescription("The state that specifies whether to allow compression on responses \nto HTTP 1.0 requests.")
ltmHttpCompressionProfileGzipMemlevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipMemlevel.setDescription("The amount of memory that the proxy will use when doing compression. \nIt must be an integer no less than 1 and no greater than 9. Higher \nvalues produce faster compression at the expense of more memory usage. \nThe default memory level will be 8.")
ltmHttpCompressionProfileGzipWindowsize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipWindowsize.setDescription("The number of bits in the window size that the compression proxy \nwill use when compressing the server response. It should be an integer \nno less than 8 and no greater than 15. Higher values produce better \ncompression ratios at the expense of more memory usage. \nThe default window size will be 15.")
ltmHttpCompressionProfileGzipLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipLevel.setDescription("The speed of compression that is applied to the response. Minimum\nvalue is 1, maximum is 9. The lower numbers give faster compression \nwith lower ratios, and higher numbers give slower compression with \nhigher ratios.")
ltmHttpCompressionProfileKeepAcceptEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileKeepAcceptEncoding.setDescription("The state of the option to keep client-encoding header.")
ltmHttpCompressionProfileBrowserWorkarounds = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileBrowserWorkarounds.setDescription("The option to control whether or not to disable compression for \nknown browsers that cannot handle certain types of compressed \nresponses properly. If it's true, compression for known browsers \nwill be disabled.")
ltmHttpCompressionProfileCpusaver = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaver.setDescription("The state indicating whether CPU saving mode is enable or not\nwhen doing compression.")
ltmHttpCompressionProfileCpusaverHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaverHigh.setDescription("The CPU saver high threshold. When CPU utilization exceeds this value,\ncompression is switched to NULL compression.")
ltmHttpCompressionProfileCpusaverLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaverLow.setDescription("The CPU saver low threshold. When CPU utilization drops below\nthis value, compression is switched to full throttle.")
ltmHttpCompressionProfilePreferredMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("deflate", 0), ("gzip", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfilePreferredMethod.setDescription("The option for preferred compression method.")
ltmHttpCompressionProfileUriIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2))
ltmHttpcompUriInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriInclNumber.setDescription("The number of ltmHttpCompressionProfileUriIncl entries in the table.")
ltmHttpcompUriInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2))
if mibBuilder.loadTexts: ltmHttpcompUriInclTable.setDescription("A table containing information of regular expressions used to match \nthe request URI part of the client requests during compression. \nA match must be found in at least one of the 'include' fields.")
ltmHttpcompUriInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclIndex"))
if mibBuilder.loadTexts: ltmHttpcompUriInclEntry.setDescription("Columns in the ltmHttpcompUriIncl Table")
ltmHttpcompUriInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriInclName.setDescription("The name of a HTTP Compression profile.")
ltmHttpcompUriInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriInclIndex.setDescription("The index of the regular expression used to match the request \nURI part of the client requests during compression in \n'include' fields for the specified HTTP Compression profile.")
ltmHttpcompUriInclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriInclUri.setDescription("The regular expression used to match the request URI part \nof the client requests during compression in 'include' fields \nfor the specified HTTP Compression profile.")
ltmHttpCompressionProfileUriExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3))
ltmHttpcompUriExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriExclNumber.setDescription("The number of ltmHttpCompressionProfileUriExcl entries in the table.")
ltmHttpcompUriExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2))
if mibBuilder.loadTexts: ltmHttpcompUriExclTable.setDescription("A table containing information of regular expressions used to match \nthe request URI part of the client requests during compression. \nA match must be found in at least one of the 'exclude' fields.")
ltmHttpcompUriExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclIndex"))
if mibBuilder.loadTexts: ltmHttpcompUriExclEntry.setDescription("Columns in the ltmHttpcompUriExcl Table")
ltmHttpcompUriExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriExclName.setDescription("The name of a HTTP Compression profile.")
ltmHttpcompUriExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriExclIndex.setDescription("The index of the regular expression used to match the request \nURI part of the client requests during compression in \n'exclude' fields for the specified HTTP Compression profile.")
ltmHttpcompUriExclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriExclUri.setDescription("The regular expression used to match the request URI part \nof the client requests during compression in 'exclude' fields \nfor the specified HTTP Compression profile.")
ltmHttpCompressionProfileContTypeIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4))
ltmHttpcompContTypeInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeInclNumber.setDescription("The number of ltmHttpCompressionProfileContTypeIncl entries in the table.")
ltmHttpcompContTypeInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2))
if mibBuilder.loadTexts: ltmHttpcompContTypeInclTable.setDescription("A table containing information of regular expressions used to match \nthe MIME types in the server response's 'Content-Type:' headers. \nA match must be found in at least one of the 'include' fields.")
ltmHttpcompContTypeInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclIndex"))
if mibBuilder.loadTexts: ltmHttpcompContTypeInclEntry.setDescription("Columns in the ltmHttpcompContTypeIncl Table")
ltmHttpcompContTypeInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeInclName.setDescription("The name of a HTTP Compression profile.")
ltmHttpcompContTypeInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeInclIndex.setDescription("The index of the regular expression to match the MIME types in the \nserver response's 'Content-Type:' headers in 'include' fields for \nthe specified HTTP Compression profile.")
ltmHttpcompContTypeInclContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeInclContentType.setDescription("The regular expression used to match the MIME types in the server \nresponse's 'Content-Type:' headers in 'include' fields for the\nspecified HTTP Compression profile.")
ltmHttpCompressionProfileContTypeExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5))
ltmHttpcompContTypeExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeExclNumber.setDescription("The number of ltmHttpCompressionProfileContTypeExcl entries in the table.")
ltmHttpcompContTypeExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2))
if mibBuilder.loadTexts: ltmHttpcompContTypeExclTable.setDescription("A table containing information of regular expressions used to match \nthe MIME types in the server response's 'Content-Type:' headers. \nA match must be found in at least one of the 'exclude' fields.")
ltmHttpcompContTypeExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclIndex"))
if mibBuilder.loadTexts: ltmHttpcompContTypeExclEntry.setDescription("Columns in the ltmHttpcompContTypeExcl Table")
ltmHttpcompContTypeExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeExclName.setDescription("The name of a HTTP Compression profile.")
ltmHttpcompContTypeExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeExclIndex.setDescription("The index of the regular expression to match the MIME types in the \nserver response's 'Content-Type:' headers in 'exclude' fields for \nthe specified HTTP Compression profile.")
ltmHttpcompContTypeExclContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeExclContentType.setDescription("The regular expression used to match the MIME types in the server \nresponse's 'Content-Type:' headers in 'exclude' fields for the\nspecified HTTP Compression profile.")
ltmHttpCompressionProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6))
ltmHttpCompressionProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmHttpCompressionProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmHttpCompressionProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatNumber.setDescription("The number of ltmHttpCompressionProfileStat entries in the table.")
ltmHttpCompressionProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3))
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatTable.setDescription("A table containing statistic information of HTTP Compression profiles.")
ltmHttpCompressionProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatName"))
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatEntry.setDescription("Columns in the ltmHttpCompressionProfileStat Table")
ltmHttpCompressionProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatName.setDescription("The name of a HTTP Compression profile.")
ltmHttpCompressionProfileStatPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPrecompressBytes.setDescription("The number of response bytes before compression has taken place.")
ltmHttpCompressionProfileStatPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPostcompressBytes.setDescription("The number of response bytes after compression has taken place.")
ltmHttpCompressionProfileStatNullCompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatNullCompressBytes.setDescription("The number of bytes subjected to NULL compression (for license enforcement).")
ltmHttpCompressionProfileStatHtmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatHtmlPrecompressBytes.setDescription("The number of pre-compressed bytes for the MIME-Types: HTML.")
ltmHttpCompressionProfileStatHtmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatHtmlPostcompressBytes.setDescription("The number of post-compressed bytes for the MIME-Types: HTML.")
ltmHttpCompressionProfileStatCssPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatCssPrecompressBytes.setDescription("The number of pre-compressed bytes for the MIME-Types: CSS.")
ltmHttpCompressionProfileStatCssPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatCssPostcompressBytes.setDescription("The number of post-compressed bytes for the MIME-Types: CSS.")
ltmHttpCompressionProfileStatJsPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatJsPrecompressBytes.setDescription("The number of pre-compressed bytes for the MIME-Types: Javascript.")
ltmHttpCompressionProfileStatJsPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatJsPostcompressBytes.setDescription("The number of post-compressed bytes for the MIME-Types: Javascript.")
ltmHttpCompressionProfileStatXmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatXmlPrecompressBytes.setDescription("The number of pre-compressed bytes for the MIME-Types: XML.")
ltmHttpCompressionProfileStatXmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatXmlPostcompressBytes.setDescription("The number of post-compressed bytes for the MIME-Types: XML.")
ltmHttpCompressionProfileStatSgmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatSgmlPrecompressBytes.setDescription("The number of pre-compressed bytes for the MIME-Types: SGML.")
ltmHttpCompressionProfileStatSgmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatSgmlPostcompressBytes.setDescription("The number of post-compressed bytes for the MIME-Types: SGML.")
ltmHttpCompressionProfileStatPlainPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPlainPrecompressBytes.setDescription("The number of pre-compressed bytes for the MIME-Types: Plain.")
ltmHttpCompressionProfileStatPlainPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPlainPostcompressBytes.setDescription("The number of post-compressed bytes for the MIME-Types: Plain.")
ltmHttpCompressionProfileStatOctetPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOctetPrecompressBytes.setDescription("The number of pre-compressed bytes for the MIME-Types: Octet stream.")
ltmHttpCompressionProfileStatOctetPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOctetPostcompressBytes.setDescription("The number of post-compressed bytes for the MIME-Types: Octet stream.")
ltmHttpCompressionProfileStatImagePrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatImagePrecompressBytes.setDescription("The number of pre-compressed bytes for the MIME-Types: Images.")
ltmHttpCompressionProfileStatImagePostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatImagePostcompressBytes.setDescription("The number of post-compressed bytes for the MIME-Types: Images.")
ltmHttpCompressionProfileStatVideoPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatVideoPrecompressBytes.setDescription("The number of pre-compressed bytes for the MIME-Types: Video files.")
ltmHttpCompressionProfileStatVideoPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatVideoPostcompressBytes.setDescription("The number of post-compressed bytes for the MIME-Types: Video files.")
ltmHttpCompressionProfileStatAudioPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatAudioPrecompressBytes.setDescription("The number of pre-compressed bytes for the MIME-Types: Audio files.")
ltmHttpCompressionProfileStatAudioPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatAudioPostcompressBytes.setDescription("The number of post-compressed bytes for the MIME-Types: Audio files.")
ltmHttpCompressionProfileStatOtherPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOtherPrecompressBytes.setDescription("The number of pre-compressed bytes for the MIME-Types: other than \nHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \nAudio files.")
ltmHttpCompressionProfileStatOtherPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOtherPostcompressBytes.setDescription("The number of post-compressed bytes for the MIME-Types: other than \nHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \nAudio files.")
ltmWebAcceleration = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23))
ltmWebAccelerationProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1))
ltmWebAccelerationProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileNumber.setDescription("The number of ltmWebAccelerationProfile entries in the table.")
ltmWebAccelerationProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2))
if mibBuilder.loadTexts: ltmWebAccelerationProfileTable.setDescription("A table containing information of Web Acceleration profiles.")
ltmWebAccelerationProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileName"))
if mibBuilder.loadTexts: ltmWebAccelerationProfileEntry.setDescription("Columns in the ltmWebAccelerationProfile Table")
ltmWebAccelerationProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileName.setDescription("The name of a Web Acceleration profile.")
ltmWebAccelerationProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmWebAccelerationProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmWebAccelerationProfileCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheSize.setDescription("The maximum cache size in MB's.")
ltmWebAccelerationProfileCacheMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheMaxEntries.setDescription("The maximum cache entries.")
ltmWebAccelerationProfileCacheMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheMaxAge.setDescription("The maximum age of cached object.")
ltmWebAccelerationProfileCacheObjectMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheObjectMinSize.setDescription("The minimum size requirement for cached object in bytes.")
ltmWebAccelerationProfileCacheObjectMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheObjectMaxSize.setDescription("The maximum size limitation for cached object in bytes.")
ltmWebAccelerationProfileCacheIgnoreClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("none", 0), ("maxage", 1), ("all", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheIgnoreClient.setDescription("The state that determine whether cache ignores client cache.")
ltmWebAccelerationProfileCacheAgingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheAgingRate.setDescription("The aging rate for the cache.")
ltmWebAccelerationProfileCacheInsertAgeHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("disable", 0), ("enable", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheInsertAgeHeader.setDescription("The mode that indicates whether to insert the Age headers.")
ltmWebAccelerationProfileUriExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2))
ltmWebaccCacheUriExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriExclNumber.setDescription("The number of ltmWebAccelerationProfileUriExcl entries in the table.")
ltmWebaccCacheUriExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2))
if mibBuilder.loadTexts: ltmWebaccCacheUriExclTable.setDescription("A table containing information of excludes URIs in \nWeb Acceleration profiles.")
ltmWebaccCacheUriExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclIndex"))
if mibBuilder.loadTexts: ltmWebaccCacheUriExclEntry.setDescription("Columns in the ltmWebaccCacheUriExcl Table")
ltmWebaccCacheUriExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriExclName.setDescription("The name of a Web Acceleration profile.")
ltmWebaccCacheUriExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriExclIndex.setDescription("The index of exclude URI for the specified profile.")
ltmWebaccCacheUriExclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriExclUri.setDescription("The exclude URI for the specified profile.")
ltmWebAccelerationProfileUriIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3))
ltmWebaccCacheUriInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriInclNumber.setDescription("The number of ltmWebAccelerationProfileUriIncl entries in the table.")
ltmWebaccCacheUriInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2))
if mibBuilder.loadTexts: ltmWebaccCacheUriInclTable.setDescription("A table containing information of includes URI in Web Acceleration\nprofiles.")
ltmWebaccCacheUriInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclIndex"))
if mibBuilder.loadTexts: ltmWebaccCacheUriInclEntry.setDescription("Columns in the ltmWebaccCacheUriIncl Table")
ltmWebaccCacheUriInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriInclName.setDescription("The name of a Web Acceleration profile.")
ltmWebaccCacheUriInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriInclIndex.setDescription("The index of include URI for the specified profile.")
ltmWebaccCacheUriInclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriInclUri.setDescription("The include URI for the specified profile.")
ltmWebAccelerationProfileUriPin = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4))
ltmWebaccCacheUriPinNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriPinNumber.setDescription("The number of ltmWebAccelerationProfileUriPin entries in the table.")
ltmWebaccCacheUriPinTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2))
if mibBuilder.loadTexts: ltmWebaccCacheUriPinTable.setDescription("A table containing information of pinned URIs in Web Acceleration profiles.")
ltmWebaccCacheUriPinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinIndex"))
if mibBuilder.loadTexts: ltmWebaccCacheUriPinEntry.setDescription("Columns in the ltmWebaccCacheUriPin Table")
ltmWebaccCacheUriPinName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriPinName.setDescription("The name of a Web Acceleration profile.")
ltmWebaccCacheUriPinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriPinIndex.setDescription("The index of pinned URI for the specified profile.")
ltmWebaccCacheUriPinUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriPinUri.setDescription("The pinned URI for the specified profile.")
ltmWebAccelerationProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5))
ltmWebAccelerationProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmWebAccelerationProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmWebAccelerationProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatNumber.setDescription("The number of ltmWebAccelerationProfileStat entries in the table.")
ltmWebAccelerationProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3))
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatTable.setDescription("A table containing statistic information of Web Acceleration profiles.")
ltmWebAccelerationProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatName"))
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatEntry.setDescription("Columns in the ltmWebAccelerationProfileStat Table")
ltmWebAccelerationProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatName.setDescription("The name of a Web Acceleration profile.")
ltmWebAccelerationProfileStatCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheHits.setDescription("The number of cache hits.")
ltmWebAccelerationProfileStatCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMisses.setDescription("The number of cache misses, excluding un-cacheable data.")
ltmWebAccelerationProfileStatCacheMissesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissesAll.setDescription("The total number of cache misses.")
ltmWebAccelerationProfileStatCacheHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheHitBytes.setDescription("The number of cache hits in bytes.")
ltmWebAccelerationProfileStatCacheMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissBytes.setDescription("The number of cache misses in bytes, excluding un-cacheable data.")
ltmWebAccelerationProfileStatCacheMissBytesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissBytesAll.setDescription("The total number of cache misses in bytes.")
ltmWebAccelerationProfileStatCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheSize.setDescription("The current cache size (in bytes).")
ltmWebAccelerationProfileStatCacheCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheCount.setDescription("The number of items stored in cache.")
ltmWebAccelerationProfileStatCacheEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheEvictions.setDescription("The number of cache evictions.")
ltmWebAccelerationProfileStatInterStripeHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeHits.setDescription("The number of inter-stripe cache hits.")
ltmWebAccelerationProfileStatInterStripeMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeMisses.setDescription("The number of inter-stripe cache misses.")
ltmWebAccelerationProfileStatInterStripeHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeHitBytes.setDescription("The number of inter-stripe cache hits in bytes.")
ltmWebAccelerationProfileStatInterStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeSize.setDescription("The current inter-stripe cache size (in bytes).")
ltmWebAccelerationProfileStatInterStripeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeCount.setDescription("The number of items stored in inter-stripe cache.")
ltmWebAccelerationProfileStatInterStripeEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeEvictions.setDescription("The number of inter-stripe cache evictions.")
ltmWebAccelerationProfileStatRemoteHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteHits.setDescription("The number of remote cache hits.")
ltmWebAccelerationProfileStatRemoteMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteMisses.setDescription("The number of remote cache misses.")
ltmWebAccelerationProfileStatRemoteHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteHitBytes.setDescription("The number of remote cache hits in bytes.")
ltmWebAccelerationProfileUriOver = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6))
ltmWebaccCacheUriOverNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriOverNumber.setDescription("The number of ltmWebAccelerationProfileUriOver entries in the table.")
ltmWebaccCacheUriOverTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2))
if mibBuilder.loadTexts: ltmWebaccCacheUriOverTable.setDescription("A table containing information of include override URI in Web Acceleration profiles.")
ltmWebaccCacheUriOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverIndex"))
if mibBuilder.loadTexts: ltmWebaccCacheUriOverEntry.setDescription("Columns in the ltmWebaccCacheUriOver Table")
ltmWebaccCacheUriOverName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriOverName.setDescription("The name of a Web Acceleration profile.")
ltmWebaccCacheUriOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriOverIndex.setDescription("The index of include override URI for the specified profile.")
ltmWebaccCacheUriOverUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriOverUri.setDescription("The include override URI for the specified profile.")
ltmDos = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24))
ltmDosProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1))
ltmDosProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosProfileNumber.setDescription("The number of ltmDosProfile entries in the table.")
ltmDosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2))
if mibBuilder.loadTexts: ltmDosProfileTable.setDescription("A table containing information of DoS profile.")
ltmDosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosProfileName"))
if mibBuilder.loadTexts: ltmDosProfileEntry.setDescription("Columns in the ltmDosProfile Table")
ltmDosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosProfileName.setDescription("The name of a DoS profile.")
ltmDosProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmDosProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmDosApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2))
ltmDosApplicationNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationNumber.setDescription("The number of ltmDosApplication entries in the table.")
ltmDosApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2))
if mibBuilder.loadTexts: ltmDosApplicationTable.setDescription("A table containing information of DoS profile Application Security.")
ltmDosApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationProfileName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationName"))
if mibBuilder.loadTexts: ltmDosApplicationEntry.setDescription("Columns in the ltmDosApplication Table")
ltmDosApplicationProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationProfileName.setDescription("The name of a DoS profile.")
ltmDosApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationName.setDescription("The dummy name of enabled Application Security on this profile.")
ltmDosApplicationTriggerIrule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTriggerIrule.setDescription("The state indicating whether Application DoS iRule event is triggered or not.")
ltmDosApplicationTpsBasedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("off", 0), ("transparent", 1), ("blocking", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedMode.setDescription("The operation mode of TPS-based anomaly detection .")
ltmDosApplicationLatencyBasedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("off", 0), ("transparent", 1), ("blocking", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedMode.setDescription("The operation mode of Latency-based anomaly detection.")
ltmDosApplicationTpsBasedIpClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpClientSideDefense.setDescription("The state indicating whether Source IP-based client side integrity defense in TPS-based anomaly is enabled or not.")
ltmDosApplicationTpsBasedUrlClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlClientSideDefense.setDescription("The state indicating whether URL-based client side integrity defense in TPS-based anomaly is enabled or not.")
ltmDosApplicationTpsBasedIpRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpRateLimiting.setDescription("The state indicating whether Source IP-based rate limiting in TPS-based anomaly is enabled or not.")
ltmDosApplicationTpsBasedUrlRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlRateLimiting.setDescription("The state indicating whether URL-based rate limiting in TPS-based anomaly is enabled or not.")
ltmDosApplicationTpsBasedIpTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpTpsIncreaseRate.setDescription("The value that specifies the percentage by which TPS increased in IP detection criteria of TPS-based anomaly.\nIt is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.")
ltmDosApplicationTpsBasedIpMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpMaximumTps.setDescription("The value that specifies the amount which TPS reached in IP detection criteria of TPS-based anomaly.\nIt is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.")
ltmDosApplicationTpsBasedIpMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpMinimumTps.setDescription("The value that specifies the minimum TPS threshold for detection in IP detection criteria of TPS-based anomaly.\nIt is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.")
ltmDosApplicationTpsBasedUrlTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlTpsIncreaseRate.setDescription("The value that specifies the percentage by which TPS increased in URL detection criteria of TPS-based anomaly.\nIt is only used when URL-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.")
ltmDosApplicationTpsBasedUrlMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlMaximumTps.setDescription("The value that specifies the amount which TPS reached in URL detection criteria of TPS-based anomaly.\nIt is only used when URL-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.")
ltmDosApplicationTpsBasedUrlMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlMinimumTps.setDescription("The value that specifies the minimum TPS threshold for detection in URL detection criteria of TPS-based anomaly.\nIt is only used when URL-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.")
ltmDosApplicationTpsBasedMaximumPreventionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedMaximumPreventionDuration.setDescription("The value that specifies the maximum prevention duration (in seconds) in TPS-based anomaly.\n0 for unlimited.")
ltmDosApplicationLatencyIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyIncreaseRate.setDescription("The value that specifies the percentage by which latency increased in detection criteria of Latency-based anomaly.")
ltmDosApplicationMaximumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationMaximumLatency.setDescription("The value that specifies the amount which latency reached in detection criteria of Latency-based anomaly.")
ltmDosApplicationMinimumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationMinimumLatency.setDescription("The value that specifies the minimum latency threshold for detection in detection criteria Latency-based anomaly.")
ltmDosApplicationLatencyBasedIpClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpClientSideDefense.setDescription("The state indicating whether Source IP-based client side integrity defense in Latency-based anomaly is enabled or not.")
ltmDosApplicationLatencyBasedUrlClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlClientSideDefense.setDescription("The state indicating whether URL-based client side integrity defense in Latency-based anomaly is enabled or not.")
ltmDosApplicationLatencyBasedIpRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpRateLimiting.setDescription("The state indicating whether Source IP-based rate limiting in Latency-based anomaly is enabled or not.")
ltmDosApplicationLatencyBasedUrlRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlRateLimiting.setDescription("The state indicating whether URL-based rate limiting in Latency-based anomaly is enabled or not.")
ltmDosApplicationLatencyBasedIpTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpTpsIncreaseRate.setDescription("The value that specifies the percentage by which TPS increased in suspicious IP criteria of Latency-based anomaly.\nIt is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.")
ltmDosApplicationLatencyBasedIpMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpMaximumTps.setDescription("The value that specifies the amount which TPS reached in suspicious IP criteria of Latency-based anomaly.\nIt is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.")
ltmDosApplicationLatencyBasedIpMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpMinimumTps.setDescription("The value that specifies the minimum TPS threshold for detection in suspicious IP criteria of Latency-based anomaly.\nIt is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.")
ltmDosApplicationLatencyBasedUrlTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlTpsIncreaseRate.setDescription("The value that specifies the percentage by which TPS increased in suspicious URL criteria of Latency-based anomaly.\nIt is only used when URL-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.")
ltmDosApplicationLatencyBasedUrlMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlMaximumTps.setDescription("The value that specifies the amount which TPS reached in suspicious URL criteria of Latency-based anomaly.\nIt is only used when URL-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.")
ltmDosApplicationLatencyBasedUrlMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlMinimumTps.setDescription("The value that specifies the minimum TPS threshold for detection in suspicious URL criteria of Latency-based anomaly.\nIt is only used when URL-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.")
ltmDosApplicationLatencyBasedMaximumPreventionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedMaximumPreventionDuration.setDescription("The value that specifies the maximum prevention duration (in seconds) in Latency-based anomaly.\n0 for unlimited.")
ltmDosWhiteIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3))
ltmDosWhiteIpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpNumber.setDescription("The number of ltmDosWhiteIp entries in the table.")
ltmDosWhiteIpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2))
if mibBuilder.loadTexts: ltmDosWhiteIpTable.setDescription("A table containing information of DoS profile Application Security IP address whitelist.")
ltmDosWhiteIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpParentProfile"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpParentName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpAddressType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpAddress"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNetmaskType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNetmask"))
if mibBuilder.loadTexts: ltmDosWhiteIpEntry.setDescription("Columns in the ltmDosWhiteIp Table")
ltmDosWhiteIpParentProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpParentProfile.setDescription("The name of a DoS profile.")
ltmDosWhiteIpParentName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpParentName.setDescription("The dummy name of enabled Application Security on this profile.")
ltmDosWhiteIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpAddressType.setDescription("The IP address type of ltmDosWhiteIpAddress")
ltmDosWhiteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpAddress.setDescription("The IP address in the whitelist of the specified DoS profile with Application Security. \nIt is interpreted within the context of a ltmDosWhiteIpAddressType value.")
ltmDosWhiteIpNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpNetmaskType.setDescription("The IP address type of ltmDosWhiteIpNetmask")
ltmDosWhiteIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpNetmask.setDescription("The subnet mask associated with the specified Application DoS profile whitelist IP address.\nIt is interpreted within the context of a ltmDosWhiteIpNetmaskType value.")
ltmSpdy = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25))
ltmSpdyProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1))
ltmSpdyProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileNumber.setDescription("The number of ltmSpdyProfile entries in the table.")
ltmSpdyProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2))
if mibBuilder.loadTexts: ltmSpdyProfileTable.setDescription("A table containing information about the SPDY profile.")
ltmSpdyProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileName"))
if mibBuilder.loadTexts: ltmSpdyProfileEntry.setDescription("Columns in the ltmSpdyProfile Table")
ltmSpdyProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileName.setDescription("The name of a SPDY profile.")
ltmSpdyProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileConfigSource.setDescription("The state that specifies whether this is a base/pre-configured profile \nor user defined profile.")
ltmSpdyProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileDefaultName.setDescription("The name of the profile from which the specified profile derives \nits attribute default values.")
ltmSpdyProfileActivationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("npn", 0), ("always", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileActivationMode.setDescription("The manner in which SPDY connections are made.\nnpn - TLS Extension, Next Protocol Negotiation is used to decide which\n      SPDY protocol is used.\nalways - All connections will be assumed to be SPDY connections.\n         Clients that only support HTTP will not be supported.")
ltmSpdyProfilePriorityHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("strict", 0), ("fair", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfilePriorityHandling.setDescription("The manner in which streams of different priorities are handled.\nstrict - Higher priority streams will be processed to completion\n         before lower priority streams are processed.\nfair - Higher priority streams will use more bandwidth than lower\n       priority streams without completely blocking the lower priority\n       streams.")
ltmSpdyProfileInsertHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileInsertHeader.setDescription("The state indicating whether or not an HTTP header that indicates the\nuse of SPDY should be inserted into the request going to the back-end\nserver.")
ltmSpdyProfileInsertHeaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileInsertHeaderName.setDescription("The HTTP header inserted into the request going to the back-end server,\nif that functionality is enabled.")
ltmSpdyProfileConcurrentStreamsPerConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileConcurrentStreamsPerConnection.setDescription("The maximum amount of concurrent streams allowed per connection.")
ltmSpdyProfileConnectionIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileConnectionIdleTimeout.setDescription("The amount of time, in seconds, a connection is open idly before it is\nshutdown.")
ltmSpdyProfileReceiveWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileReceiveWindow.setDescription("Specifies the size of the receive window in kilobytes. The receive\nwindow is a mechanism to stall individual upload streams when needed.\nThis mechanism is only available for SPDY version 3 connections.")
ltmSpdyProfileFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileFrameSize.setDescription("Specifies the size of the data frames, in bytes, that SPDY will send to\nthe client. Larger frame sizes will improve network utilization, but\nmay affect concurrency.")
ltmSpdyProfileWriteSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileWriteSize.setDescription("Specifies the total size of combined data frames, in bytes, SPDY will\nsend in a single write. This controls the size of the TLS records when\nSPDY is used over SSL. A large write size will cause SPDY to buffer\nmore data, but will improve network utilization.")
ltmSpdyProfileCompressionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileCompressionLevel.setDescription("Specifies the amount of compression to do by default for the headers of\nthe specified profiles. The compression level must be between 0 and\n10. Higher numbers correspond to more compression.")
ltmSpdyProfileCompressionWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileCompressionWindowSize.setDescription("Specifies the size of the compression window for the specified profiles in\nkilobytes. The compression window size must be between 1 and 128\nkilobytes.")
ltmSpdyProfileProtocolVersions = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2))
ltmSpdyProfileProtocolVersionsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsNumber.setDescription("The number of ltmSpdyProfileProtocolVersions entries in the table.")
ltmSpdyProfileProtocolVersionsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2))
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsTable.setDescription("A table containing information on the supported SPDY protocol\nversions.")
ltmSpdyProfileProtocolVersionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsIndex"))
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsEntry.setDescription("Columns in the ltmSpdyProfileProtocolVersions Table")
ltmSpdyProfileProtocolVersionsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsName.setDescription("The name of a SPDY profile.")
ltmSpdyProfileProtocolVersionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsIndex.setDescription("The index of the protocol versions used to determine which SPDY \nversions are supported and in what order those versions should be\nprioritized when deciding which version to use. This prioritization is\nonly used when the activation mode is set to npn.")
ltmSpdyProfileProtocolVersionsProtocolVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("spdy2", 1), ("spdy3", 2), ("http11", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsProtocolVersions.setDescription("The SPDY version supported.\nspdy2 - indicates that SPDY version 2 is supported.\nspdy3 - indicates that SPDY version 3 is supported.\nhttp11 - indicates that HTTP1.1 is supported when SPDY is not\n         supported/requested by a client.")
ltmSpdyProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3))
ltmSpdyProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSpdyProfileStatResetStats.setDescription("The action to reset resetable statistics data in  ltmSpdyProfileStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmSpdyProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatNumber.setDescription("The number of ltmSpdyProfileStat entries in the table.")
ltmSpdyProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3))
if mibBuilder.loadTexts: ltmSpdyProfileStatTable.setDescription("A table containing statistics information about the SPDY profile.")
ltmSpdyProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatName"))
if mibBuilder.loadTexts: ltmSpdyProfileStatEntry.setDescription("Columns in the ltmSpdyProfileStat Table")
ltmSpdyProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatName.setDescription("The name of the SPDY profile.")
ltmSpdyProfileStatConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsAccepted.setDescription("The total number of accepted connections.")
ltmSpdyProfileStatConnectionsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsCurrent.setDescription("The total number of connections currently active.")
ltmSpdyProfileStatConnectionsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsMax.setDescription("The maximum number of connections open simultaneously.")
ltmSpdyProfileStatDataFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatDataFramesReceived.setDescription("The total number of data frames received.")
ltmSpdyProfileStatDataFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatDataFramesSent.setDescription("The total number of data frames sent.")
ltmSpdyProfileStatFlowsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsCreated.setDescription("The total number of flows created.")
ltmSpdyProfileStatFlowsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsCurrent.setDescription("The total number of flows currently active.")
ltmSpdyProfileStatFlowsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsMax.setDescription("The maximum number of flows open simultaneously.")
ltmSpdyProfileStatGoawayFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatGoawayFramesReceived.setDescription("The total number of GOAWAY frames received.")
ltmSpdyProfileStatGoawayFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatGoawayFramesSent.setDescription("The total number of GOAWAY frames sent.")
ltmSpdyProfileStatHeadersFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatHeadersFramesReceived.setDescription("The total number of HEADERS frames received.")
ltmSpdyProfileStatHeadersFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatHeadersFramesSent.setDescription("The total number of HEADERS frames sent.")
ltmSpdyProfileStatHttpRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatHttpRequestBytes.setDescription("The total number of HTTP request bytes.")
ltmSpdyProfileStatHttpResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatHttpResponseBytes.setDescription("The total number of HTTP response bytes.")
ltmSpdyProfileStatNoopFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatNoopFramesReceived.setDescription("The total number of NOOP frames received.")
ltmSpdyProfileStatNoopFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatNoopFramesSent.setDescription("The total number of NOOP frames sent.")
ltmSpdyProfileStatPingFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatPingFramesReceived.setDescription("The total number of PING frames received.")
ltmSpdyProfileStatPingFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatPingFramesSent.setDescription("The total number of PING frames sent.")
ltmSpdyProfileStatRstStreamFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatRstStreamFramesReceived.setDescription("The total number of RST_STREAM frames received.")
ltmSpdyProfileStatRstStreamFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatRstStreamFramesSent.setDescription("The total number of RST_STREAM frames sent.")
ltmSpdyProfileStatSettingsFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSettingsFramesReceived.setDescription("The total number of SETTINGS frames received.")
ltmSpdyProfileStatSettingsFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSettingsFramesSent.setDescription("The total number of SETTINGS frames sent.")
ltmSpdyProfileStatSpdyRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyRequestBytes.setDescription("The total number of SPDY request bytes.")
ltmSpdyProfileStatSpdyRequestFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyRequestFrames.setDescription("The total number of SPDY request frames.")
ltmSpdyProfileStatSpdyResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyResponseBytes.setDescription("The total number of SPDY response bytes.")
ltmSpdyProfileStatSpdyResponseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyResponseFrames.setDescription("The total number of SPDY response frames.")
ltmSpdyProfileStatSynReplyFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSynReplyFramesReceived.setDescription("The total number of SYN_REPLY frames received.")
ltmSpdyProfileStatSynReplyFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSynReplyFramesSent.setDescription("The total number of SYN_REPLY frames sent.")
ltmSpdyProfileStatSynStreamFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSynStreamFramesReceived.setDescription("The total number of SYN_STREAM frames received.")
ltmSpdyProfileStatSynStreamFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSynStreamFramesSent.setDescription("The total number of SYN_STREAM frames sent.")
ltmSpdyProfileStatV2StreamsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsCreated.setDescription("The total number of SPDYv2 streams created.")
ltmSpdyProfileStatV2StreamsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsCurrent.setDescription("The total number of SPDYv2 streams currently active.")
ltmSpdyProfileStatV2StreamsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsMax.setDescription("The maximum number of SPDYv2 streams open simultaneously.")
ltmSpdyProfileStatV3StreamsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsCreated.setDescription("The total number of SPDYv3 streams created.")
ltmSpdyProfileStatV3StreamsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsCurrent.setDescription("The total number of SPDYv3 streams currently active.")
ltmSpdyProfileStatV3StreamsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsMax.setDescription("The maximum number of SPDYv3 streams open simultaneously.")
ltmSpdyProfileStatWindowUpdateFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatWindowUpdateFramesReceived.setDescription("The total number of WINDOW_UPDATE frames received.")
ltmSpdyProfileStatWindowUpdateFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatWindowUpdateFramesSent.setDescription("The total number of WINDOW_UPDATE frames sent.")
ltmRateFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7))
ltmRateFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1))
ltmRateFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterNumber.setDescription("The number of ltmRateFilter entries in the table.")
ltmRateFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2))
if mibBuilder.loadTexts: ltmRateFilterTable.setDescription("A table containing information of rate filters for shaping.")
ltmRateFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRateFilterCname"))
if mibBuilder.loadTexts: ltmRateFilterEntry.setDescription("Columns in the ltmRateFilter Table")
ltmRateFilterCname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterCname.setDescription("The rate class name specified by the user according to the  \nsame syntax allowed for rules or pool names")
ltmRateFilterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterRate.setDescription("The base rate. It is a number which may be postfixed with a \nmetric of either bps, Kbps or Mbps, to indicate bits per \nsecond, Kilobits per second, or Megabits per second, \nrespectively. \nNote: these numbers are powers of 10, not powers of 2. \nIf no postfix is specified, the number is interpreted as bps. \nThe rate specifies the maximum throughput to allot to traffic \nhandled by the Rate Class. Packets in excess of the posted \nrate will be dropped.")
ltmRateFilterCeil = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterCeil.setDescription("The ceiling rate. It is defined like the base rate, but specifies \nhow far beyond the base rate the traffic is allowed to flow \nwhen bursting (details on bursting below). The ceiling rate is \nan absolute limit - it is impossible for traffic to flow at a \nhigher rate than the ceiling rate, even when bursting. If the \nceiling rate is omitted or is equal to the base rate, the \ntraffic may not exceed the base rate. It is illegal for the \nceiling rate to be less than the base rate.")
ltmRateFilterBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterBurst.setDescription("The burst size. It specifies the maximum number of bytes the \ntraffic is allowed to burst when exceeding the base rate. The \nburst size is measured in bytes. If omitted, a default burst \nsize is 0.")
ltmRateFilterPname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterPname.setDescription("The parent rate class name. It indicates that the rate class \nis a child of the named parent. Any child rate class has the \nability to borrow bandwidth from its parent. (Borrowing is a \nfeature which allows a child to burst even beyond the burst \nsize by borrowing from the burst size of a parent.) If omitted, \nthe rate class is not a child, but may be a parent if another \nrate class refers to it as such.")
ltmRateFilterQtype = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("none", 0), ("sfq", 1), ("pfifo", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterQtype.setDescription("The queue discipline type.\nnone  - invalid state;\nsfq   - stochastic fair queue;\npfifo - priority FIFO.")
ltmRateFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,2,)).subtype(namedValues=NamedValues(("any", 0), ("client", 1), ("server", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterDirection.setDescription("The state of the direction which the filter shapes traffic to.\nany    - shape to the client and server;\nclient - only shape traffic to the client;\nserver - only shape traffic to the server.")
ltmRateFilterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2))
ltmRateFilterStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRateFilterStatResetStats.setDescription("The action to reset resetable statistics data in  ltmRateFilterStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmRateFilterStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatNumber.setDescription("The number of ltmRateFilterStat entries in the table.")
ltmRateFilterStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3))
if mibBuilder.loadTexts: ltmRateFilterStatTable.setDescription("A table containing statistic information of rate filters for shaping.")
ltmRateFilterStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatCname"))
if mibBuilder.loadTexts: ltmRateFilterStatEntry.setDescription("Columns in the ltmRateFilterStat Table")
ltmRateFilterStatCname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatCname.setDescription("The rate class name specified by the user according to the  \nsame syntax allowed for rules or pool names")
ltmRateFilterStatRateBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatRateBytes.setDescription("The number of bytes at or below base rate - increments by 1 for \nevery byte of every packet handled at or below the base rate.")
ltmRateFilterStatBurstBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatBurstBytes.setDescription("The number of bytes bursted (above base rate) - increments by \n1 for every byte of every packet handled above the base rate \n(i.e. bursted traffic)")
ltmRateFilterStatDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDroppedBytes.setDescription("Deprecated!  \nReplaced by ltmRateFilterStatDropTotBytes: \nthe number of bytes dropped - increments by 1 for every byte  \nof every packet dropped by the rate class.")
ltmRateFilterStatBytesQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatBytesQueued.setDescription("The number of bytes queued.")
ltmRateFilterStatBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatBytesPerSec.setDescription("The average bytes/sec over last 4 sec.")
ltmRateFilterStatDropTailPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropTailPkts.setDescription("The number of packets dropped - increments by 1 for\nevery packet dropped by the rate class as queue overflow.")
ltmRateFilterStatDropTailBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropTailBytes.setDescription("The number of bytes dropped - increments by 1 for every byte\nof every packet dropped by the rate class as queue overflow.")
ltmRateFilterStatDropRandPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropRandPkts.setDescription("The number of packets dropped - increments by 1 for\nevery packet dropped by the rate class as RED or FRED policy.")
ltmRateFilterStatDropRandBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropRandBytes.setDescription("The  number of bytes dropped - increments by 1 for every byte\nof every packet dropped by the rate class as RED or FRED policy.")
ltmRateFilterStatDropTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropTotPkts.setDescription("The total number of packets dropped - increments by 1 for\nevery packet dropped by the rate class.")
ltmRateFilterStatDropTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropTotBytes.setDescription("The total number of bytes dropped - increments by 1 for every byte\nof every packet dropped by the rate class.")
ltmRules = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8))
ltmRule = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1))
ltmRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleNumber.setDescription("The number of ltmRule entries in the table.")
ltmRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2))
if mibBuilder.loadTexts: ltmRuleTable.setDescription("A table containing information of rules.")
ltmRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRuleName"))
if mibBuilder.loadTexts: ltmRuleEntry.setDescription("Columns in the ltmRule Table")
ltmRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleName.setDescription("The name of a rule.")
ltmRuleDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleDefinition.setDescription("Deprecated!\nThe definition of the specified rule.")
ltmRuleConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleConfigSource.setDescription("The type of rule that the specified rule is associating with.\nIt is either a base/pre-configured rule or user defined rule.")
ltmRuleEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2))
ltmRuleEventNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventNumber.setDescription("The number of ltmRuleEvent entries in the table.")
ltmRuleEventTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2))
if mibBuilder.loadTexts: ltmRuleEventTable.setDescription("A table containing information of rule events.")
ltmRuleEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventEventType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventPriority"))
if mibBuilder.loadTexts: ltmRuleEventEntry.setDescription("Columns in the ltmRuleEvent Table")
ltmRuleEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventName.setDescription("The name of a rule.")
ltmRuleEventEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventEventType.setDescription("The event type which the rule is used for.")
ltmRuleEventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventPriority.setDescription("The execution priority of this rule event.")
ltmRuleEventScript = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventScript.setDescription("Deprecated!.\nThe TCL script for this rule event.")
ltmRuleEventStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3))
ltmRuleEventStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRuleEventStatResetStats.setDescription("The action to reset resetable statistics data in  ltmRuleEventStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmRuleEventStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatNumber.setDescription("The number of ltmRuleEventStat entries in the table.")
ltmRuleEventStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3))
if mibBuilder.loadTexts: ltmRuleEventStatTable.setDescription("A table containing statistic information of rules.")
ltmRuleEventStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatEventType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatPriority"))
if mibBuilder.loadTexts: ltmRuleEventStatEntry.setDescription("Columns in the ltmRuleEventStat Table")
ltmRuleEventStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatName.setDescription("The name of a rule.")
ltmRuleEventStatEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatEventType.setDescription("The type of the event associated with the specified rule.")
ltmRuleEventStatPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatPriority.setDescription("The rule execution priority.")
ltmRuleEventStatFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatFailures.setDescription("The number of failures for executing the specified rule.")
ltmRuleEventStatAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatAborts.setDescription("The number of aborts when executing the specified rule.")
ltmRuleEventStatTotalExecutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatTotalExecutions.setDescription("The total number of event executions for the specified rule.")
ltmRuleEventStatAvgCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatAvgCycles.setDescription("The average of cycles spent during an execution of the specified rule event.")
ltmRuleEventStatMaxCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatMaxCycles.setDescription("The maximum of cycles spent during an execution of the specified rule event.")
ltmRuleEventStatMinCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatMinCycles.setDescription("The minimum of cycles spent during an execution of the specified rule event.")
ltmSNATs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9))
ltmSnat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1))
ltmSnatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatNumber.setDescription("The number of ltmSnat entries in the table.")
ltmSnatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2))
if mibBuilder.loadTexts: ltmSnatTable.setDescription("A table containing information of SNAT.")
ltmSnatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatName"))
if mibBuilder.loadTexts: ltmSnatEntry.setDescription("Columns in the ltmSnat Table")
ltmSnatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatName.setDescription("The name of a SNAT. It is a named object in the definition of \na standard or a selective SNAT. Standard SNATs translate to \na single address, while selective SNATs translate to a pool of \ntranslation addresses.")
ltmSnatSfFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatSfFlags.setDescription("The state indicating whether connection mirroring is \nenabled or not for the specified SNAT.")
ltmSnatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,0,2,1,)).subtype(namedValues=NamedValues(("none", 0), ("transaddr", 1), ("snatpool", 2), ("automap", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatType.setDescription("The translation type of the specified SNAT.\nnone - No SNAT (invalid default);\ntransaddr - The SNAT uses a single translation address;\nsnatpool - The SNAT uses a SNAT pool of translation addresses;\nautomap - The SNAT uses self IP addresses.")
ltmSnatTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatTransAddrType.setDescription("The IP address type of ltmSnatTransAddr")
ltmSnatTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatTransAddr.setDescription("The translation address used by the specified SNAT \nif the SNAT translates to a translation address. \nIt is interpreted within the context of a ltmSnatTransAddrType value.")
ltmSnatSnatpoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatSnatpoolName.setDescription("The name of a SNAT pool, which is a pool of SNAT translation addresses.\nIt is used by the specified SNAT if the SNAT translates to a pool.")
ltmSnatListedEnabledVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatListedEnabledVlans.setDescription("The state indicating whether associated VLANs are SNAT enabled or not.\nThe associated VLANs are listed in ltmSnatVlanTable.")
ltmSnatTransAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatTransAddrName.setDescription("Translation Name")
ltmSnatStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2))
ltmSnatStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSnatStatResetStats.setDescription("The action to reset resetable statistics data in  ltmSnatStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmSnatStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatNumber.setDescription("The number of ltmSnatStat entries in the table.")
ltmSnatStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3))
if mibBuilder.loadTexts: ltmSnatStatTable.setDescription("A table containing statistic information of SNAT.")
ltmSnatStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatStatName"))
if mibBuilder.loadTexts: ltmSnatStatEntry.setDescription("Columns in the ltmSnatStat Table")
ltmSnatStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatName.setDescription("The name of a SNAT.")
ltmSnatStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientPktsIn.setDescription("The number of packets received from client-side.")
ltmSnatStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientBytesIn.setDescription("The number of bytes received from client-side.")
ltmSnatStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientPktsOut.setDescription("The number of packets sent to client-side.")
ltmSnatStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientBytesOut.setDescription("The number of bytes sent to client-side.")
ltmSnatStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientMaxConns.setDescription("The maximum connections from client-side.")
ltmSnatStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientTotConns.setDescription("The total connections from client-side.")
ltmSnatStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientCurConns.setDescription("The current connections from client-side.")
ltmSnatVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3))
ltmSnatVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatVlanNumber.setDescription("The number of ltmSnatVlan entries in the table.")
ltmSnatVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 2))
if mibBuilder.loadTexts: ltmSnatVlanTable.setDescription("A table containing VLAN information associated with SNAT.")
ltmSnatVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatVlanSnatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatVlanVlanName"))
if mibBuilder.loadTexts: ltmSnatVlanEntry.setDescription("Columns in the ltmSnatVlan Table")
ltmSnatVlanSnatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatVlanSnatName.setDescription("The name of a SNAT.")
ltmSnatVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatVlanVlanName.setDescription("The name of a VLAN associated with the specified SNAT.\nOnly when ltmSnatListedEnabledVlans is set to enable, \nSNAT is enabled on the VLAN. ")
ltmSnatOrigAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4))
ltmSnatOrigAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrNumber.setDescription("The number of ltmSnatOrigAddr entries in the table.")
ltmSnatOrigAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2))
if mibBuilder.loadTexts: ltmSnatOrigAddrTable.setDescription("A table containing information of SNAT original addresses.")
ltmSnatOrigAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrSnatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrAddrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrAddr"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrWildmaskType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrWildmask"))
if mibBuilder.loadTexts: ltmSnatOrigAddrEntry.setDescription("Columns in the ltmSnatOrigAddr Table")
ltmSnatOrigAddrSnatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrSnatName.setDescription("The name of a SNAT.")
ltmSnatOrigAddrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrAddrType.setDescription("The IP address type of ltmSnatOrigAddrAddr")
ltmSnatOrigAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrAddr.setDescription("The original client address associated with the specified SNAT. \nIt is interpreted within the context of a ltmSnatOrigAddrAddrType value.")
ltmSnatOrigAddrWildmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrWildmaskType.setDescription("The IP address type of ltmSnatOrigWidemask")
ltmSnatOrigAddrWildmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrWildmask.setDescription("The wildcard netmask associated with the specified SNAT original address. \nIt is interpreted within the context of a ltmSnatOrigAddrWidemaskType value.")
ltmTransAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5))
ltmTransAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrNumber.setDescription("The number of ltmTransAddr entries in the table.")
ltmTransAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2))
if mibBuilder.loadTexts: ltmTransAddrTable.setDescription("A table containing information of SNAT translated addresses.")
ltmTransAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTransAddrName"))
if mibBuilder.loadTexts: ltmTransAddrEntry.setDescription("Columns in the ltmTransAddr Table")
ltmTransAddrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrAddrType.setDescription("The IP address type of ltmTransAddrAddr")
ltmTransAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrAddr.setDescription("The SNAT translation address for use as a server-side client address.\non the server-side. It is interpreted within the context of \nan ltmTransAddrAddrType value.")
ltmTransAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrEnabled.setDescription("The state indicating whether the specified SNAT translation address is enabled or not.")
ltmTransAddrConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrConnLimit.setDescription("The maximum number of connections the specified SNAT translation address is \nallowed to have open at one time.")
ltmTransAddrTcpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrTcpIdleTimeout.setDescription("The TCP idle timeout (in seconds) of the SNAT specified translation address.")
ltmTransAddrUdpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrUdpIdleTimeout.setDescription("The UDP idle timeout (in seconds) of the specified SNAT translation address.")
ltmTransAddrIpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrIpIdleTimeout.setDescription("The IP idle timeout (in seconds) of the specified SNAT translation address.")
ltmTransAddrArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrArpEnabled.setDescription("The state indicating whether ARP is enabled or not for the specified SNAT translation address.")
ltmTransAddrUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrUnitId.setDescription("The unit number associated with the specified SNAT translation address.")
ltmTransAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrName.setDescription("name of trans addr")
ltmTransAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6))
ltmTransAddrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmTransAddrStatResetStats.setDescription("The action to reset resetable statistics data in  ltmTransAddrStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmTransAddrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatNumber.setDescription("The number of ltmTransAddrStat entries in the table.")
ltmTransAddrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3))
if mibBuilder.loadTexts: ltmTransAddrStatTable.setDescription("A table containing statistic information of SNAT translated addresses.")
ltmTransAddrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatName"))
if mibBuilder.loadTexts: ltmTransAddrStatEntry.setDescription("Columns in the ltmTransAddrStat Table")
ltmTransAddrStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatAddrType.setDescription("Deprecated!  Use name as index\nThe IP address type of ltmTransAddrStatAddr")
ltmTransAddrStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatAddr.setDescription("Deprecated!  Use name as index\nThe SNAT translation address for use as a server-side client address.\non the server-side. It is interpreted within the context of \nan ltmTransAddrStatAddrType value.")
ltmTransAddrStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerPktsIn.setDescription("The number of packets received from server-side.")
ltmTransAddrStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerBytesIn.setDescription("The number of bytes received from server-side.")
ltmTransAddrStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerPktsOut.setDescription("The number of packets sent to server-side.")
ltmTransAddrStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerBytesOut.setDescription("The number of bytes sent to server-side.")
ltmTransAddrStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerMaxConns.setDescription("The maximum connections from server-side.")
ltmTransAddrStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerTotConns.setDescription("The total connections from server-side.")
ltmTransAddrStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerCurConns.setDescription("The current connections from server-side.")
ltmTransAddrStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatName.setDescription("name of trans addr stat")
ltmSnatPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7))
ltmSnatPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolNumber.setDescription("The number of ltmSnatPool entries in the table.")
ltmSnatPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7, 2))
if mibBuilder.loadTexts: ltmSnatPoolTable.setDescription("A table containing information of SNAT pools.")
ltmSnatPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatPoolName"))
if mibBuilder.loadTexts: ltmSnatPoolEntry.setDescription("Columns in the ltmSnatPool Table")
ltmSnatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolName.setDescription("The name of a SNAT pool, which is a pool of SNAT translation addresses.")
ltmSnatPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8))
ltmSnatPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSnatPoolStatResetStats.setDescription("The action to reset resetable statistics data in  ltmSnatPoolStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmSnatPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatNumber.setDescription("The number of ltmSnatPoolStat entries in the table.")
ltmSnatPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3))
if mibBuilder.loadTexts: ltmSnatPoolStatTable.setDescription("A table containing statistic information of SNAT pools.")
ltmSnatPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatName"))
if mibBuilder.loadTexts: ltmSnatPoolStatEntry.setDescription("Columns in the ltmSnatPoolStat Table")
ltmSnatPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatName.setDescription("The name of the SNAT pool.")
ltmSnatPoolStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerPktsIn.setDescription("The number of packets received from server-side.")
ltmSnatPoolStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerBytesIn.setDescription("The number of bytes received from server-side.")
ltmSnatPoolStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerPktsOut.setDescription("The number of packets sent to server-side.")
ltmSnatPoolStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerBytesOut.setDescription("The number of bytes sent to server-side.")
ltmSnatPoolStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerMaxConns.setDescription("The maximum connections from server-side.")
ltmSnatPoolStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerTotConns.setDescription("The total connections from server-side.")
ltmSnatPoolStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 8), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerCurConns.setDescription("The current connections from server-side.")
ltmSnatpoolTransAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9))
ltmSnatpoolTransAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrNumber.setDescription("The number of ltmSnatpoolTransAddr entries in the table.")
ltmSnatpoolTransAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2))
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTable.setDescription("A table containing information of joining SnatPool to TransAddr.")
ltmSnatpoolTransAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrSnatpoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrTransAddrName"))
if mibBuilder.loadTexts: ltmSnatpoolTransAddrEntry.setDescription("Columns in the ltmSnatpoolTransAddr Table")
ltmSnatpoolTransAddrSnatpoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrSnatpoolName.setDescription("The name of a SNAT pool.")
ltmSnatpoolTransAddrTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddrType.setDescription("The IP address type of ltmTransAddrAddr")
ltmSnatpoolTransAddrTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddr.setDescription("The SNAT translation address associated with the specified SNAT pool.,\nIt is interpreted within the context of an ltmSnatpoolTransAddrTransAddrType value.")
ltmSnatpoolTransAddrTransAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddrName.setDescription("The name of a trans_addr.")
ltmVirtualServers = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10))
ltmVirtualServ = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1))
ltmVirtualServNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServNumber.setDescription("The number of ltmVirtualServ entries in the table.")
ltmVirtualServTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2))
if mibBuilder.loadTexts: ltmVirtualServTable.setDescription("A table containing information of virtual servers.")
ltmVirtualServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServName"))
if mibBuilder.loadTexts: ltmVirtualServEntry.setDescription("Columns in the ltmVirtualServ Table")
ltmVirtualServName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServName.setDescription("The name of a virtual server.")
ltmVirtualServAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAddrType.setDescription("The IP address type of ltmVirtualServAddr.")
ltmVirtualServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAddr.setDescription("The IP address of the specified virtual server. It is interpreted \nwithin the context of an ltmVitualServAddrType value.")
ltmVirtualServWildmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServWildmaskType.setDescription("The IP address type of ltmVirtualServWildmask.")
ltmVirtualServWildmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServWildmask.setDescription("The wildcard netmask of the specified virtual server. It is interpreted \nwithin the context of an ltmVitualServWildmaskType value.")
ltmVirtualServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPort.setDescription("The port number of the specified virtual server.")
ltmVirtualServIpProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServIpProto.setDescription("The IP protocol (see RFC 1340) used by the specified virtual server.")
ltmVirtualServListedEnabledVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServListedEnabledVlans.setDescription("The state indicating whether the specified virtual server is listed \nas enabled or not on associated VLANs. The associated VLANs are \ndefined in ltmVirtualServVlanTable.")
ltmVirtualServEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmVirtualServEnabled.setDescription("The state indicating whether the specified virtual server is enabled or not.")
ltmVirtualServConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServConnLimit.setDescription("The maximum number of connections the specified virtual server is allowed \nto have open at one time.")
ltmVirtualServRclass = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRclass.setDescription("The rate class that will be used to rate limit the traffic in \nthe specified virtual server.")
ltmVirtualServSfFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSfFlags.setDescription("The flag to indicate whether connection mirroring is \nenabled or not for the specified virtual server.")
ltmVirtualServTranslateAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServTranslateAddr.setDescription("The state indicating whether the address of the specified virtual server \nshould be translated.")
ltmVirtualServTranslatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServTranslatePort.setDescription("The state indicating whether the port of the specified virtual server \nshould be translated.")
ltmVirtualServType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(6,7,1,4,5,3,2,8,0,)).subtype(namedValues=NamedValues(("poolbased", 0), ("ipforward", 1), ("l2forward", 2), ("reject", 3), ("fastl4", 4), ("fasthttp", 5), ("stateless", 6), ("dhcp-relay", 7), ("internal", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServType.setDescription("The type supported by the specified virtual server.\npoolbased - The virtual server is based on a pool;\nipforward - The virtual server only supports IP forwarding. \n            There is no load balancing on this type of virtual server;\nl2forward - The virtual server only supports L2 forwarding. \n            There is no load balancing on this type of virtual server;\nreject - All connections going to this virtual server will be rejected, and resets will be sent;\nfastl4 - The virtual server is associated with a Fast L4 profile;\nfasthttp - The virtual server is associated with a Fast HTTP profile;\nstateless - The virtual server accepts traffic matching the virtual server\n            address and load balances the packet to the pool members without\n            attempting to match the packet to a pre-existing connection on the connection\n            table;\ndhcp-relay - The virtual server relays DHCP client requests for an IP address to\n             one or more DHCP servers and provides DHCP server responses with \n             an available IP address for the client;\ninternal - The virtual server supports modification of HTTP requests and responses.")
ltmVirtualServSnatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(3,0,2,1,)).subtype(namedValues=NamedValues(("none", 0), ("transaddr", 1), ("snatpool", 2), ("automap", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSnatType.setDescription("Deprecated! Replaced by Source Address Translation type associated with the specified virtual server.\nThe type of SNAT associated with the specified virtual server.\n	none - No SNAT used by the virtual server;\n	transaddr - The SNAT uses a single translation address (invalid type);\n	snatpool - The SNAT uses a SNAT pool of translation addresses;\n	automap - The SNAT uses self IP addresses.")
ltmVirtualServLasthopPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServLasthopPoolName.setDescription("The last hop pool for the specified virtual server if traffic is \ntransparent.")
ltmVirtualServSnatpoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 18), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSnatpoolName.setDescription("Deprecated! No longer a direct attribute of the virtual server.\nThe name of a SNAT pool used by the specified virtual server.")
ltmVirtualServDefaultPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServDefaultPool.setDescription("The name of a default pool used by the specified virtual server.")
ltmVirtualServFallbackPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 20), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServFallbackPersist.setDescription("The persist profile name to use for fallback by the specified virtual server.")
ltmVirtualServActualPvaAccel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,)).subtype(namedValues=NamedValues(("full", 0), ("partial", 1), ("none", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServActualPvaAccel.setDescription("The actual hardware acceleration mode for the specified virtual server.")
ltmVirtualServAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(4,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAvailabilityState.setDescription("Deprecated!  \nReplaced by ltmVsServStatusAvailState under ltmVirtualServStatus.\nThe state of the specified virtual server availability indicated in color.")
ltmVirtualServEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServEnabledState.setDescription("Deprecated!  \nReplaced by ltmVsServStatusEnabledState under ltmVirtualServStatus.\nThe state of the specified virtual server activity status, as specified \nby the user.")
ltmVirtualServDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServDisabledParentType.setDescription("Deprecated!  \nReplaced by ltmVsServStatusParentType under ltmVirtualServStatus.\nThe type of parent object which disabled the specified virtual server.")
ltmVirtualServStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 25), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatusReason.setDescription("Deprecated!  \nReplaced by ltmVsServStatusDetailReason under ltmVirtualServStatus.\nThe detail description of the node's status of parent object \nwhich disabled the specified virtual server.")
ltmVirtualServGtmScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServGtmScore.setDescription("A user-defined value that specifies the ranking of the virtual server \nwhen compared to other virtual servers within the same pool")
ltmVirtualServCmpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServCmpEnabled.setDescription("The state indicating whether CMP (Cluster Multiple Processor) is enabled or not for the specified virtual server.")
ltmVirtualServSrcport = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 28), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,2,)).subtype(namedValues=NamedValues(("srcportreserve", 0), ("srcportreservestrict", 1), ("srcportchange", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSrcport.setDescription("The srcport type.\nsrcportreserve       - The srcport reserved;\nsrcportreservestrict - The srcport reserved strict; \nsrcportchange        - The srcport changed;")
ltmVirtualServVaName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 29), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServVaName.setDescription("virtual address name.")
ltmVirtualServSourceAddressTranslationType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 30), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("snat", 1), ("lsn", 2), ("automap", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSourceAddressTranslationType.setDescription("The type of Source Address Translation associated with the specified virtual server.\nnone - No Source Address Translation used by the virtual server;\nsnat - The Source Address Translation uses a SNAT pool of translation addresses;\nlsn - The Source Address Translation uses an LSN pool of translation addresses;\nautomap - The Source Address Translation uses self IP addresses.")
ltmVirtualServSourceAddressTranslationPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 31), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSourceAddressTranslationPool.setDescription("The name of a LSN Source Address Translation pool used by the specified virtual server.")
ltmVirtualServStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2))
ltmVirtualServStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmVirtualServStatResetStats.setDescription("The action to reset resetable statistics data in  ltmVirtualServStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmVirtualServStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatNumber.setDescription("The number of ltmVirtualServStat entries in the table.")
ltmVirtualServStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3))
if mibBuilder.loadTexts: ltmVirtualServStatTable.setDescription("A table containing statistic information of virtual servers.")
ltmVirtualServStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatName"))
if mibBuilder.loadTexts: ltmVirtualServStatEntry.setDescription("Columns in the ltmVirtualServStat Table")
ltmVirtualServStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatName.setDescription("The name of a virtual server.")
ltmVirtualServStatCsMinConnDur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCsMinConnDur.setDescription("The minimum connection duration in milliseconds among all connections \nthrough the specified virtual server.")
ltmVirtualServStatCsMaxConnDur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCsMaxConnDur.setDescription("The maximum connection duration in milliseconds among all connections \nthrough the specified virtual server.")
ltmVirtualServStatCsMeanConnDur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCsMeanConnDur.setDescription("The average connection duration in milliseconds for all connections \nthrough the specified virtual server.")
ltmVirtualServStatNoNodesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatNoNodesErrors.setDescription("The number of no-node errors. If active server node is zero, \nthis counter is incremented.")
ltmVirtualServStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientPktsIn.setDescription("The number of packets received by the specified virtual server from client-side.")
ltmVirtualServStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientBytesIn.setDescription("The number of bytes received by the specified virtual server from client-side.")
ltmVirtualServStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientPktsOut.setDescription("The number of packets sent to client-side from the specified virtual server.")
ltmVirtualServStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientBytesOut.setDescription("The number of bytes sent to client-side from the specified virtual server.")
ltmVirtualServStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientMaxConns.setDescription("The maximum connections from client-side to the specified virtual server.")
ltmVirtualServStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientTotConns.setDescription("The total connections from client-side to the specified virtual server.")
ltmVirtualServStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 12), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientCurConns.setDescription("The current connections from client-side to the specified virtual server.")
ltmVirtualServStatEphemeralPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralPktsIn.setDescription("The number of packets received ephemeral by the specified virtual server.")
ltmVirtualServStatEphemeralBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralBytesIn.setDescription("The number of bytes received ephemeral by the specified virtual server.")
ltmVirtualServStatEphemeralPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralPktsOut.setDescription("The number of packets transmitted ephemeral from the specified virtual server.")
ltmVirtualServStatEphemeralBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralBytesOut.setDescription("The number of bytes transmitted ephemeral from the specified virtual server.")
ltmVirtualServStatEphemeralMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralMaxConns.setDescription("The maximum ephemeral connections to the specified virtual server.")
ltmVirtualServStatEphemeralTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralTotConns.setDescription("The total ephemeral connections to the specified virtual server.")
ltmVirtualServStatEphemeralCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 19), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralCurConns.setDescription("The current ephemeral connections to the specified virtual server.")
ltmVirtualServStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaPktsIn.setDescription("The total number of hardware accelerated packets received by the specified virtual server.")
ltmVirtualServStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaBytesIn.setDescription("The total number of hardware accelerated bytes received by the specified virtual server.")
ltmVirtualServStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaPktsOut.setDescription("The total number of hardware accelerated packets sent out from the specified virtual server.")
ltmVirtualServStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaBytesOut.setDescription("The total number of hardware accelerated bytes sent out from the specified virtual server.")
ltmVirtualServStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaMaxConns.setDescription("The maximum hardware accelerated connections to the specified virtual server.")
ltmVirtualServStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaTotConns.setDescription("The total hardware accelerated connections to the specified virtual server.")
ltmVirtualServStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 26), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaCurConns.setDescription("The current hardware accelerated connections to the specified virtual server.")
ltmVirtualServStatTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatTotRequests.setDescription("The total number of requests going through the specified virtual server.")
ltmVirtualServStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatTotPvaAssistConn.setDescription("The total number of connections to the specified virtual server, which \nare partially hardware accelerated.")
ltmVirtualServStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 29), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCurrPvaAssistConn.setDescription("The current number of connections to the specified virtual server, which\nare partially hardware accelerated.")
ltmVirtualServStatCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCycleCount.setDescription("CPU cycle count since last system restart.")
ltmVirtualServStatVsUsageRatio5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 31), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio5s.setDescription("The percentage of time Virtual Server was busy over the last 5 seconds.")
ltmVirtualServStatVsUsageRatio1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 32), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio1m.setDescription("The percentage of time Virtual Server was busy over the last 1 minute.")
ltmVirtualServStatVsUsageRatio5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 33), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio5m.setDescription("The percentage of time Virtual Server was busy over the last 5 minutes.")
ltmVirtualServStatCurrentConnsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 34), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCurrentConnsPerSec.setDescription("The number of current connections per second to the specified virtual server.")
ltmVirtualServStatDurationRateExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 35), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatDurationRateExceeded.setDescription("Duration of time the specified virtual server has exceeded the configured \nconnection rate limit.")
ltmVirtualServAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3))
ltmVirtualServAuthNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAuthNumber.setDescription("The number of ltmVirtualServAuth entries in the table.")
ltmVirtualServAuthTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 2))
if mibBuilder.loadTexts: ltmVirtualServAuthTable.setDescription("A table containing information of virtual server auth profiles.")
ltmVirtualServAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthProfileName"))
if mibBuilder.loadTexts: ltmVirtualServAuthEntry.setDescription("Columns in the ltmVirtualServAuth Table")
ltmVirtualServAuthVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAuthVsName.setDescription("The name of a virtual server.")
ltmVirtualServAuthProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAuthProfileName.setDescription("The name of an auth profile associated with the specified virtual server.")
ltmVirtualServPersist = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4))
ltmVirtualServPersistNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPersistNumber.setDescription("The number of ltmVirtualServPersist entries in the table.")
ltmVirtualServPersistTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2))
if mibBuilder.loadTexts: ltmVirtualServPersistTable.setDescription("A table containing information of virtual server persistence profiles.")
ltmVirtualServPersistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistProfileName"))
if mibBuilder.loadTexts: ltmVirtualServPersistEntry.setDescription("Columns in the ltmVirtualServPersist Table")
ltmVirtualServPersistVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPersistVsName.setDescription("The name of a virtual server.")
ltmVirtualServPersistProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPersistProfileName.setDescription("The name of a persist profile associated with the specified virtual server.")
ltmVirtualServPersistUseDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPersistUseDefault.setDescription("The persist profile is to be used if a rule does not \nselect a persist type.")
ltmVirtualServProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5))
ltmVirtualServProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileNumber.setDescription("The number of ltmVirtualServProfile entries in the table.")
ltmVirtualServProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2))
if mibBuilder.loadTexts: ltmVirtualServProfileTable.setDescription("A table containing information of virtual server profiles.")
ltmVirtualServProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileProfileName"))
if mibBuilder.loadTexts: ltmVirtualServProfileEntry.setDescription("Columns in the ltmVirtualServProfile Table")
ltmVirtualServProfileVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileVsName.setDescription("The name of a virtual server.")
ltmVirtualServProfileProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileProfileName.setDescription("The name of a profile associated with the specified virtual server.")
ltmVirtualServProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,10,14,5,16,20,11,7,19,17,8,18,13,6,1,0,15,21,2,9,12,)).subtype(namedValues=NamedValues(("auth", 0), ("http", 1), ("stream", 10), ("xml", 11), ("fasthttp", 12), ("iiop", 13), ("rtsp", 14), ("user", 15), ("httpclass", 16), ("dns", 17), ("sctp", 18), ("instance", 19), ("serverssl", 2), ("sipp", 20), ("dos", 21), ("clientssl", 3), ("fastl4", 4), ("tcp", 5), ("udp", 6), ("ftp", 7), ("persist", 8), ("connpool", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileType.setDescription("The type of the profile used by the specified virtual server.")
ltmVirtualServProfileContext = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("all", 0), ("client", 1), ("server", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileContext.setDescription("This is used to determine which side of the proxy a protocol\ntype profile (specifically  TCP/UDP) is applied to.	\nnone   - for profiles that don't need any context;\nall    - profile applies to both client and server;\nclient - profile applies to the client-side;\nserver - profile applies to the server-side.")
ltmVirtualServPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6))
ltmVirtualServPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPoolNumber.setDescription("The number of ltmVirtualServPool entries in the table.")
ltmVirtualServPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2))
if mibBuilder.loadTexts: ltmVirtualServPoolTable.setDescription("A table containing information of non-default pools related to virtual servers.")
ltmVirtualServPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolVirtualServerName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolPoolName"))
if mibBuilder.loadTexts: ltmVirtualServPoolEntry.setDescription("Columns in the ltmVirtualServPool Table")
ltmVirtualServPoolVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPoolVirtualServerName.setDescription("The name of a virtual server.")
ltmVirtualServPoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPoolPoolName.setDescription("The name of a non-default pool that the specified virtual server is referencing.")
ltmVirtualServPoolRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPoolRuleName.setDescription("The name of a rule that the specified virtual server is referencing.\nThis is for future use and has not been supported in current version.")
ltmVirtualServClonePool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7))
ltmVirtualServClonePoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServClonePoolNumber.setDescription("The number of ltmVirtualServClonePool entries in the table.")
ltmVirtualServClonePoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2))
if mibBuilder.loadTexts: ltmVirtualServClonePoolTable.setDescription("A table containing information of pools related to virtual servers.")
ltmVirtualServClonePoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolVirtualServerName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolType"))
if mibBuilder.loadTexts: ltmVirtualServClonePoolEntry.setDescription("Columns in the ltmVirtualServClonePool Table")
ltmVirtualServClonePoolVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServClonePoolVirtualServerName.setDescription("The name of a virtual server.")
ltmVirtualServClonePoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServClonePoolPoolName.setDescription("The name of a clone pool associated with the specified virtual server.")
ltmVirtualServClonePoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,)).subtype(namedValues=NamedValues(("unspec", 0), ("clientside", 1), ("serverside", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServClonePoolType.setDescription("The type of the clone pool associated with the specified virtual server.")
ltmVirtualServRule = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8))
ltmVirtualServRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRuleNumber.setDescription("The number of ltmVirtualServRule entries in the table.")
ltmVirtualServRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2))
if mibBuilder.loadTexts: ltmVirtualServRuleTable.setDescription("A table containing information of rules related to virtual servers.")
ltmVirtualServRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleVirtualServerName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleRuleName"))
if mibBuilder.loadTexts: ltmVirtualServRuleEntry.setDescription("Columns in the ltmVirtualServRule Table")
ltmVirtualServRuleVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRuleVirtualServerName.setDescription("The name of a virtual server.")
ltmVirtualServRuleRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRuleRuleName.setDescription("The name of a rule associated with the specified virtual server.")
ltmVirtualServRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRulePriority.setDescription("The priority of the rule among rules used by the specified virtual server.")
ltmVirtualServVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9))
ltmVirtualServVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServVlanNumber.setDescription("The number of ltmVirtualServVlan entries in the table.")
ltmVirtualServVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 2))
if mibBuilder.loadTexts: ltmVirtualServVlanTable.setDescription("A table containing VLAN information associated with virtual server.")
ltmVirtualServVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanVlanName"))
if mibBuilder.loadTexts: ltmVirtualServVlanEntry.setDescription("Columns in the ltmVirtualServVlan Table")
ltmVirtualServVlanVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServVlanVsName.setDescription("The name of a virtual server.")
ltmVirtualServVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServVlanVlanName.setDescription("The name of a VLAN which the specified virtual server associated with.")
ltmVirtualAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10))
ltmVirtualAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrNumber.setDescription("The number of ltmVirtualAddr entries in the table.")
ltmVirtualAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2))
if mibBuilder.loadTexts: ltmVirtualAddrTable.setDescription("A table containing information of virtual server addresses.")
ltmVirtualAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrName"))
if mibBuilder.loadTexts: ltmVirtualAddrEntry.setDescription("Columns in the ltmVirtualAddr Table")
ltmVirtualAddrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrAddrType.setDescription("The IP address type of ltmVirtualAddrAddr")
ltmVirtualAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrAddr.setDescription("The IP address of a virtual address. \nIt is interpreted within the context of an ltmVitualAddrAddrType value.")
ltmVirtualAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmVirtualAddrEnabled.setDescription("The state indicating whether the specified virtual address is enabled or not.")
ltmVirtualAddrConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrConnLimit.setDescription("The maximum number of connections the specified virtual address is \nallowed to have open at one time.")
ltmVirtualAddrArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrArpEnabled.setDescription("The state indicating whether ARP for the specified virtual address \nis enabled or not.")
ltmVirtualAddrSfFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrSfFlags.setDescription("Deprecated! This feature has been eliminated.\nThe flag to indicate whether connection mirroring is \nenabled for the specified virtual address.")
ltmVirtualAddrUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrUnitId.setDescription("The unit number associated with the specified virtual address.")
ltmVirtualAddrRouteAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrRouteAdvertisement.setDescription("The state to determine if the specified virtual address should be \nreadvertised by the ZebOS routing daemons or not.")
ltmVirtualAddrAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(4,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrAvailabilityState.setDescription("Deprecated!  \nReplaced by ltmVsAddrStatusAvailState under ltmVirtualAddrStatus.\nThe state of the specified virtual address availability indicated in color.")
ltmVirtualAddrEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrEnabledState.setDescription("Deprecated!  \nReplaced by ltmVsAddrStatusEnabledState under ltmVirtualAddrStatus.\nThe state of the specified virtual address activity status, \nas specified by the user.")
ltmVirtualAddrDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrDisabledParentType.setDescription("Deprecated!  \nReplaced by ltmVsAddrStatusParentType under ltmVirtualAddrStatus.\nThe type of parent object which disabled the specified virtual address.")
ltmVirtualAddrStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatusReason.setDescription("Deprecated!  \nReplaced by ltmVsAddrStatusDetailReason under ltmVirtualAddrStatus.\nThe detail description of the virtual address's status of parent object \nwhich disabled the specified virtual address.")
ltmVirtualAddrServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("none", 0), ("any", 1), ("all", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrServer.setDescription("That state to control how status of virtual address is depending on \nstatus of virtual server.\nnone: virtual address is always green regardless of virtual server status.\nany: any virtual server is green, virtual address is green.\nall: all virtual servers must be green before virtual address is declared as green.")
ltmVirtualAddrIsFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrIsFloat.setDescription("The state indicating whether the virtual address should be shared \nbetween the redundant pair. This is typically used in one-armed \nCombo pair, where GTM is only licensed on one of the boxes.")
ltmVirtualAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrName.setDescription("Virtual Address name")
ltmVirtualAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11))
ltmVirtualAddrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmVirtualAddrStatResetStats.setDescription("The action to reset resetable statistics data in  ltmVirtualAddrStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmVirtualAddrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatNumber.setDescription("The number of ltmVirtualAddrStat entries in the table.")
ltmVirtualAddrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3))
if mibBuilder.loadTexts: ltmVirtualAddrStatTable.setDescription("A table containing statistic information of virtual server addresses.")
ltmVirtualAddrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatName"))
if mibBuilder.loadTexts: ltmVirtualAddrStatEntry.setDescription("Columns in the ltmVirtualAddrStat Table")
ltmVirtualAddrStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatAddrType.setDescription("Deprecated! use name instead, \nThe IP address type of ltmVirtualAddrStatAddr")
ltmVirtualAddrStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatAddr.setDescription("Deprecated! use name instead, \nThe IP address of a virtual address. It is interpreted \n	 within the context of a ltmVitualAddrStatAddrType value.")
ltmVirtualAddrStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientPktsIn.setDescription("The number of packets received by the specified virtual address\nfrom client-side.")
ltmVirtualAddrStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientBytesIn.setDescription("The number of bytes received by the specified virtual address \nfrom client-side.")
ltmVirtualAddrStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientPktsOut.setDescription("The number of packets sent to client-side from the specified virtual address.")
ltmVirtualAddrStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientBytesOut.setDescription("The number of bytes sent to client-side from the specified virtual address.")
ltmVirtualAddrStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientMaxConns.setDescription("The maximum connections to the specified virtual address from client-side.")
ltmVirtualAddrStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientTotConns.setDescription("The total connections to the specified virtual address from client-side.")
ltmVirtualAddrStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 9), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientCurConns.setDescription("The current connections to the specified virtual address from client-side.")
ltmVirtualAddrStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaPktsIn.setDescription("The number of hardware accelerated packets received by the specified virtual address.")
ltmVirtualAddrStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaBytesIn.setDescription("The number of hardware accelerated bytes received by the specified virtual address.")
ltmVirtualAddrStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaPktsOut.setDescription("The number of hardware accelerated packets sent out from  the specified virtual address.")
ltmVirtualAddrStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaBytesOut.setDescription("The number of hardware accelerated bytes sent out from the specified virtual address.")
ltmVirtualAddrStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaMaxConns.setDescription("The maximum hardware accelerated connections to the specified virtual address.")
ltmVirtualAddrStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaTotConns.setDescription("The total hardware accelerated connections to the specified virtual address.")
ltmVirtualAddrStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 16), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaCurConns.setDescription("The current hardware accelerated connections to the specified virtual address.")
ltmVirtualAddrStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatTotPvaAssistConn.setDescription("The total number of connections to the specified virtual address,\nwhich are partially hardware accelerated.")
ltmVirtualAddrStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 18), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatCurrPvaAssistConn.setDescription("The current number of connections to the specified virtual address,\nwhich are partially hardware accelerated.")
ltmVirtualAddrStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatName.setDescription("Virtual Address name")
ltmVirtualServHttpClass = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12))
ltmVsHttpClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsHttpClassNumber.setDescription("Deprecated!.\nThe number of ltmVirtualServHttpClass entries in the table.")
ltmVsHttpClassTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2))
if mibBuilder.loadTexts: ltmVsHttpClassTable.setDescription("Deprecated! A table containing information of HTTP class profiles with which the specified virtual servers associate.")
ltmVsHttpClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassProfileName"))
if mibBuilder.loadTexts: ltmVsHttpClassEntry.setDescription("Columns in the ltmVsHttpClass Table")
ltmVsHttpClassVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsHttpClassVsName.setDescription("Deprecated! The name of a virtual server.")
ltmVsHttpClassProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsHttpClassProfileName.setDescription("Deprecated! The name of HTTP class profile with which the specified virtual server associate.")
ltmVsHttpClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsHttpClassPriority.setDescription("Deprecated! The priority of the profile among profiles used by the specified virtual server.")
ltmVirtualServStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13))
ltmVsStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusNumber.setDescription("The number of ltmVirtualServStatus entries in the table.")
ltmVsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2))
if mibBuilder.loadTexts: ltmVsStatusTable.setDescription("A table containing status information of virtual servers.")
ltmVsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVsStatusName"))
if mibBuilder.loadTexts: ltmVsStatusEntry.setDescription("Columns in the ltmVsStatus Table")
ltmVsStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusName.setDescription("The name of a virtual server.")
ltmVsStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusAvailState.setDescription("The availability of the specified virtual server indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
ltmVsStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusEnabledState.setDescription("The activity status of the specified virtual server, as specified \nby the user.")
ltmVsStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified virtual server.")
ltmVsStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusDetailReason.setDescription("The detail description of the specified virtual server's status.")
ltmVirtualAddrStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14))
ltmVAddrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusNumber.setDescription("The number of ltmVirtualAddrStatus entries in the table.")
ltmVAddrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2))
if mibBuilder.loadTexts: ltmVAddrStatusTable.setDescription("A table containing status information of virtual addressess.")
ltmVAddrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusName"))
if mibBuilder.loadTexts: ltmVAddrStatusEntry.setDescription("Columns in the ltmVAddrStatus Table")
ltmVAddrStatusAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusAddrType.setDescription("The IP address type of ltmVsAddrStatusAddr")
ltmVAddrStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusAddr.setDescription("The IP address of a virtual address. It is interpreted \nwithin the context of a ltmVsAddrAddrType value.")
ltmVAddrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,0,2,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusAvailState.setDescription("The availability of the specified virtual address indicated in color.\nnone - error;\ngreen - available in some capacity;\nyellow - not currently available;\nred - not available;\nblue - availability is unknown;\ngray - unlicensed.")
ltmVAddrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,3,1,)).subtype(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusEnabledState.setDescription("The activity status of the specified virtual address, as specified \nby the user.")
ltmVAddrStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusParentType.setDescription("Deprecated! This is an internal data.\nThe type of parent object which disabled the specified virtual address.")
ltmVAddrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusDetailReason.setDescription("The detail description of the specified virtual address's status.")
ltmVAddrStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusName.setDescription("Virtual Address name")
ltmVirtualModuleScore = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15))
ltmVirtualModuleScoreNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualModuleScoreNumber.setDescription("The number of ltmVirtualModuleScore entries in the table.")
ltmVirtualModuleScoreTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2))
if mibBuilder.loadTexts: ltmVirtualModuleScoreTable.setDescription("A table containing module capacity scores for virtual servers")
ltmVirtualModuleScoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreModuleType"))
if mibBuilder.loadTexts: ltmVirtualModuleScoreEntry.setDescription("Columns in the ltmVirtualModuleScore Table")
ltmVirtualModuleScoreVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualModuleScoreVsName.setDescription("The name of the virtual server this score applies to.")
ltmVirtualModuleScoreScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualModuleScoreScore.setDescription("The score represents how much capacity the module estimates it has left.")
ltmRst = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11))
ltmRstCauseStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1))
ltmRstCauseStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRstCauseStatResetStats.setDescription("The action to reset resetable statistics data in  ltmRstCauseStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmRstCauseStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRstCauseStatNumber.setDescription("The number of ltmRstCauseStat entries in the table.")
ltmRstCauseStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3))
if mibBuilder.loadTexts: ltmRstCauseStatTable.setDescription("A table containing statistics for TCP/IP reset (RST) causes.")
ltmRstCauseStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatIndex"))
if mibBuilder.loadTexts: ltmRstCauseStatEntry.setDescription("Columns in the ltmRstCauseStat Table")
ltmRstCauseStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRstCauseStatIndex.setDescription("The index of cause of TCP/IP reset.")
ltmRstCauseStatRstCause = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRstCauseStatRstCause.setDescription("The cause for TCP/IP reset (RST).")
ltmRstCauseStatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRstCauseStatCount.setDescription("The count for each TCP/IP reset (RST) cause.")
ltmDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12))
ltmDnsCache = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1))
ltmDnsCacheNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheNumber.setDescription("The number of ltmDnsCache entries in the table.")
ltmDnsCacheTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2))
if mibBuilder.loadTexts: ltmDnsCacheTable.setDescription("A table containing information of DNS cache.")
ltmDnsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheName"))
if mibBuilder.loadTexts: ltmDnsCacheEntry.setDescription("Columns in the ltmDnsCache Table")
ltmDnsCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheName.setDescription("The name of DNS cache.")
ltmDnsCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,0,)).subtype(namedValues=NamedValues(("resolver", 0), ("validating-resolver", 1), ("transparent-resolver", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheType.setDescription("The type of DNS cache.\nresolver - configures a DNS cache with a resolver on the BIG-IP system;\nvalidating-resolver - configures a DNS cache with a resolver and\nvalidator on the BIG-IP system;\ntransparent-resolver - configures a DNS cache without a resolver\non the BIG-IP system.")
ltmDnsCacheMsgCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheMsgCacheSize.setDescription("The number of bytes allocated to the message cache. The default\nvalue is 1m. Relevant to resolver, validating-resolver, and\ntransparent-resolver types.")
ltmDnsCacheRrsetCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheRrsetCacheSize.setDescription("The number of bytes allocated to the resource records set cache.\nThe default value is 10m. Relevant to resolver, validating-resolver,\nand transparent-resolver types.")
ltmDnsCacheAnswerDefaultZones = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheAnswerDefaultZones.setDescription("The state indicating whether or not the resolver answers queries for \ndefault zones: localhost, reverse 127.0.0.1 and ::1, and AS112 zones.\nThe default value is no. Relevant to resolver, validating-resolver,\nand transparent-resolver types.")
ltmDnsCacheUseIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUseIpv4.setDescription("The state indicating whether or not the resolver is enabled to \nsend queries to IPv4 addresses. The default value is yes. Relevant\nto resolver and validating-resolver types.")
ltmDnsCacheUseIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUseIpv6.setDescription("The state indicating whether or not the resolver is enabled to \nsend queries to IPv6 addresses. The default value is yes. Relevant\nto resolver and validating-resolver types.")
ltmDnsCacheUseUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUseUdp.setDescription("The state indicating whether or not the resolver is enabled to \nsend queries over UDP. The default value is yes. Relevant to\nresolver and validating-resolver types.")
ltmDnsCacheUseTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUseTcp.setDescription("The state indicating whether or not the resolver is enabled to \nsend queries over TCP. The default value is yes. Relevant to\nresolver and validating-resolver types.")
ltmDnsCacheNameserverCacheCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheNameserverCacheCount.setDescription("The number of DNS name-servers for which connection and capability \ndata is cached. The default value is 16k. Relevant to resolver and\nvalidating-resolver types.")
ltmDnsCacheMaxConcurrentTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentTcp.setDescription("The maximum number of concurrent TCP flows used by the resolver. \nThe default value is 20. Relevant to resolver and validating-resolver\ntypes.")
ltmDnsCacheMaxConcurrentUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentUdp.setDescription("The maximum number of concurrent UDP flows used by the resolver. \nThe default value is 8192. Relevant to resolver and\nvalidating-resolver types.")
ltmDnsCacheUnwantedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUnwantedThreshold.setDescription("The threshold count of unsolicited query replies which triggers \nan alert (potential DOS attack underway). The default value is\nzero (or off). Relevant to resolver and validating-resolver types.")
ltmDnsCacheRouteDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheRouteDomainName.setDescription("The name of the route domain used for resolver outbound traffic. \nThe default value is the default route domain. Relevant to resolver\nand validating-resolver types.")
ltmDnsCacheIgnoreCd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheIgnoreCd.setDescription("The state indicating whether or not the validating-resolver ignores\nclient queries setting of checking-disabled and performs validation\nanyway and only returns secure answers. The default value is no.\nRelevant to validating-resolver type.")
ltmDnsCachePrefetchKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCachePrefetchKey.setDescription("The state indicating whether or not the validating-resolver fetches\nDNSKEY early in validation process. The default value is yes.\nRelevant to validating-resolver type.")
ltmDnsCacheKeyCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheKeyCacheSize.setDescription("The number of bytes allocated to the DNSKEY cache. The default \nvalue is 1m. Relevant to validating-resolver type.")
ltmDnsCacheRandomizeQueryNameCase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheRandomizeQueryNameCase.setDescription("The state indicating whether or not the resolver is enabled to randomize\nthe case of query names. The default value is yes. Relevant to resolver\nand validating-resolver types.")
ltmDnsCacheMaxConcurrentQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentQueries.setDescription("The maximum number of concurrent distinct queries used\nby the resolver. A query is identified by query name, type and class.\nIf the number of distinct queries exceeds this limit, the resolver\nwill try to find a query from the queue which arrives the earliest.\nReplace it with the new query if it has been in the queue longer than\nthe allowed time. The default value is 1024.")
ltmDnsCacheAllowedQueryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheAllowedQueryTime.setDescription("The time allowed for a query to stay in the queue before replaced by\na new query when the number of concurrrent distinct queries exceeds\nthe limit. The default value is 200 milliseconds.")
ltmDnsCacheStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2))
ltmDnsCacheStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsCacheStatResetStats.setDescription("The action to reset resetable statistics data in  ltmDnsCacheStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmDnsCacheStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNumber.setDescription("The number of ltmDnsCacheStat entries in the table.")
ltmDnsCacheStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3))
if mibBuilder.loadTexts: ltmDnsCacheStatTable.setDescription("A table containing statistics information of DNS cache.")
ltmDnsCacheStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatName"))
if mibBuilder.loadTexts: ltmDnsCacheStatEntry.setDescription("Columns in the ltmDnsCacheStat Table")
ltmDnsCacheStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatName.setDescription("The name of DNS cache.")
ltmDnsCacheStatQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatQueries.setDescription("The total number of queries.")
ltmDnsCacheStatResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatResponses.setDescription("The total number of responses.")
ltmDnsCacheStatSync = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSync.setDescription("The total number of synchronous responses.")
ltmDnsCacheStatAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatAsync.setDescription("The total number of asynchronous responses.")
ltmDnsCacheStatFailureResolv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFailureResolv.setDescription("The total number of internal resolution failures.")
ltmDnsCacheStatFailureCf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFailureCf.setDescription("The total number of internal connection failures.")
ltmDnsCacheStatFailureServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFailureServer.setDescription("The total number of server core failures.")
ltmDnsCacheStatFailureSend = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFailureSend.setDescription("The total number of response send failures.")
ltmDnsCacheStatMsgHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgHits.setDescription("The number of complete message cache hits.")
ltmDnsCacheStatMsgMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgMisses.setDescription("The number of complete message cache misses.")
ltmDnsCacheStatMsgInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgInserts.setDescription("The number of complete message cache inserts.")
ltmDnsCacheStatMsgUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgUpdates.setDescription("The number of complete message cache updates.")
ltmDnsCacheStatMsgEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgEvictions.setDescription("The number of complete message cache evictions.")
ltmDnsCacheStatRrsetHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetHits.setDescription("The number of resource record set cache hits.")
ltmDnsCacheStatRrsetMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetMisses.setDescription("The number of resource record set cache misses.")
ltmDnsCacheStatRrsetInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetInserts.setDescription("The number of resource record set cache inserts.")
ltmDnsCacheStatRrsetUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetUpdates.setDescription("The number of resource record set cache updates.")
ltmDnsCacheStatRrsetEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetEvictions.setDescription("The number of resource record set cache evictions.")
ltmDnsCacheStatNameserverHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverHits.setDescription("The number of internet name-server cache hits.")
ltmDnsCacheStatNameserverMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverMisses.setDescription("The number of internet name-server cache misses.")
ltmDnsCacheStatNameserverInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverInserts.setDescription("The number of internet name-server cache inserts.")
ltmDnsCacheStatNameserverUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverUpdates.setDescription("The number of internet name-server cache updates.")
ltmDnsCacheStatNameserverEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverEvictions.setDescription("The number of internet name-server evictions.")
ltmDnsCacheStatKeyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyHits.setDescription("The number of DNSSEC key cache hits.")
ltmDnsCacheStatKeyMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyMisses.setDescription("The number of DNSSEC key cache misses.")
ltmDnsCacheStatKeyInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyInserts.setDescription("The number of DNSSEC key cache inserts.")
ltmDnsCacheStatKeyUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyUpdates.setDescription("The number of DNSSEC key cache updates.")
ltmDnsCacheStatKeyEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyEvictions.setDescription("The number of DNSSEC key cache evictions.")
ltmDnsCacheStatUdpBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpBytesIn.setDescription("The number of UDP bytes received for resolution.")
ltmDnsCacheStatUdpBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpBytesOut.setDescription("The number of UDP bytes sent for resolution.")
ltmDnsCacheStatUdpPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpPktsIn.setDescription("The number of UDP packets received for resolution.")
ltmDnsCacheStatUdpPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpPktsOut.setDescription("The number of UDP packets sent for resolution.")
ltmDnsCacheStatUdpCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpCurConns.setDescription("The number of current UDP connections for resolution.")
ltmDnsCacheStatUdpMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpMaxConns.setDescription("The number of maximum UDP connections for resolution.")
ltmDnsCacheStatUdpTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpTotConns.setDescription("The total number of UDP connections for resolution.")
ltmDnsCacheStatTcpBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpBytesIn.setDescription("The number of TCP bytes received for resolution.")
ltmDnsCacheStatTcpBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpBytesOut.setDescription("The number of TCP bytes sent for resolution.")
ltmDnsCacheStatTcpPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpPktsIn.setDescription("The number of TCP packets received for resolution.")
ltmDnsCacheStatTcpPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpPktsOut.setDescription("The number of TCP packets sent for resolution.")
ltmDnsCacheStatTcpCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpCurConns.setDescription("The number of current TCP connections for resolution.")
ltmDnsCacheStatTcpMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpMaxConns.setDescription("The number of maximum TCP connections for resolution.")
ltmDnsCacheStatTcpTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpTotConns.setDescription("The total number of TCP connections for resolution.")
ltmDnsCacheStatUnsolicitedReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUnsolicitedReplies.setDescription("The total number of replies received to queries that were\nnever sent.")
ltmDnsCacheStatSecUnchecked = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecUnchecked.setDescription("The number of DNSSEC unchecked responses.")
ltmDnsCacheStatSecBogus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecBogus.setDescription("The number of DNSSEC bogus responses.")
ltmDnsCacheStatSecIndeterminate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecIndeterminate.setDescription("The number of DNSSEC indeterminate responses.")
ltmDnsCacheStatSecInsecure = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecInsecure.setDescription("The number of DNSSEC insecure responses.")
ltmDnsCacheStatSecSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecSecure.setDescription("The number of DNSSEC secure responses.")
ltmDnsSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3))
ltmDnsSecurityNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityNumber.setDescription("The number of ltmDnsSecurity entries in the table.")
ltmDnsSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 2))
if mibBuilder.loadTexts: ltmDnsSecurityTable.setDescription("A table containing information of DNS security.")
ltmDnsSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityName"))
if mibBuilder.loadTexts: ltmDnsSecurityEntry.setDescription("Columns in the ltmDnsSecurity Table")
ltmDnsSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityName.setDescription("The name of DNS security profile.")
ltmDnsSecurityQueryTypeInclusion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityQueryTypeInclusion.setDescription("The state indicating whether or not the query type filter is\nan enable (inclusion) or a disable (exclusion) list.\nValue 0 (no) implies disable and 1 (yes) is enable.")
ltmDnsSecurityStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4))
ltmDnsSecurityStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsSecurityStatResetStats.setDescription("The action to reset resetable statistics data in  ltmDnsSecurityStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmDnsSecurityStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatNumber.setDescription("The number of ltmDnsSecurityStat entries in the table.")
ltmDnsSecurityStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3))
if mibBuilder.loadTexts: ltmDnsSecurityStatTable.setDescription("A table containing statistics information of DNS security.")
ltmDnsSecurityStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatName"))
if mibBuilder.loadTexts: ltmDnsSecurityStatEntry.setDescription("Columns in the ltmDnsSecurityStat Table")
ltmDnsSecurityStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatName.setDescription("The name of DNS security profile.")
ltmDnsSecurityStatFilteredDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatFilteredDrops.setDescription("The total number of dropped DNS packets due to filtering.")
ltmDnsSecurityStatADrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatADrops.setDescription("The total number of dropped A packets due to filtering.")
ltmDnsSecurityStatAaaaDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatAaaaDrops.setDescription("The total number of dropped AAAA packets due to filtering.")
ltmDnsSecurityStatAnyDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatAnyDrops.setDescription("The total number of dropped ANY packets due to filtering.")
ltmDnsSecurityStatCnameDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatCnameDrops.setDescription("The total number of dropped CNAME packets due to filtering.")
ltmDnsSecurityStatMxDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatMxDrops.setDescription("The total number of dropped MX packets due to filtering.")
ltmDnsSecurityStatNsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatNsDrops.setDescription("The total number of dropped NS packets due to filtering.")
ltmDnsSecurityStatPtrDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatPtrDrops.setDescription("The total number of dropped PTR packets due to filtering.")
ltmDnsSecurityStatSoaDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatSoaDrops.setDescription("The total number of dropped SOA packets due to filtering.")
ltmDnsSecurityStatSrvDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatSrvDrops.setDescription("The total number of dropped SRV packets due to filtering.")
ltmDnsSecurityStatTxtDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatTxtDrops.setDescription("The total number of dropped TXT packets due to filtering.")
ltmDnsSecurityStatOtherDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatOtherDrops.setDescription("The total number of dropped OTHER packets due to filtering.")
ltmDnsQueryFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5))
ltmDnsQueryFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsQueryFilterNumber.setDescription("The number of ltmDnsQueryFilter entries in the table.")
ltmDnsQueryFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2))
if mibBuilder.loadTexts: ltmDnsQueryFilterTable.setDescription("A table containing information of DNS query type filtering.")
ltmDnsQueryFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterIndex"))
if mibBuilder.loadTexts: ltmDnsQueryFilterEntry.setDescription("Columns in the ltmDnsQueryFilter Table")
ltmDnsQueryFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsQueryFilterName.setDescription("The name of a DNS security profile.")
ltmDnsQueryFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsQueryFilterIndex.setDescription("The index of DNS query type filter for the specified DNS security profile.")
ltmDnsQueryFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(6,250,27,256,16,12,29,253,26,251,41,35,3,8,4,7,39,14,31,9,15,32,23,28,254,18,11,10,255,20,21,17,0,19,13,2,65536,252,40,25,38,34,1,30,22,249,37,5,33,36,24,)).subtype(namedValues=NamedValues(("invalid", 0), ("a", 1), ("null", 10), ("wks", 11), ("ptr", 12), ("hinfo", 13), ("minfo", 14), ("mx", 15), ("txt", 16), ("rp", 17), ("afsdb", 18), ("x25", 19), ("ns", 2), ("isdn", 20), ("rt", 21), ("nsap", 22), ("nsap-ptr", 23), ("sg", 24), ("tkey", 249), ("key", 25), ("tsig", 250), ("ixfr", 251), ("axfr", 252), ("mailb", 253), ("maila", 254), ("any", 255), ("zxfr", 256), ("px", 26), ("gpos", 27), ("aaaa", 28), ("loc", 29), ("md", 3), ("nxt", 30), ("eid", 31), ("nimloc", 32), ("srv", 33), ("atma", 34), ("naptr", 35), ("kx", 36), ("cert", 37), ("a6", 38), ("dname", 39), ("mf", 4), ("sink", 40), ("opt", 41), ("cname", 5), ("soa", 6), ("max", 65536), ("mb", 7), ("mg", 8), ("mr", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsQueryFilterType.setDescription("The DNS query type value that is either included or excluded\ndepending on the query_type_inclusion flag.  Value 0 (no)\nimplies disable (exclusion) and 1 (yes) is enable\n(inclusion).")
ltmDnsHeaderFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6))
ltmDnsHeaderFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsHeaderFilterNumber.setDescription("The number of ltmDnsHeaderFilter entries in the table.")
ltmDnsHeaderFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2))
if mibBuilder.loadTexts: ltmDnsHeaderFilterTable.setDescription("A table containing information of DNS header opcode filtering.")
ltmDnsHeaderFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterIndex"))
if mibBuilder.loadTexts: ltmDnsHeaderFilterEntry.setDescription("Columns in the ltmDnsHeaderFilter Table")
ltmDnsHeaderFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsHeaderFilterName.setDescription("The name of a DNS security profile.")
ltmDnsHeaderFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsHeaderFilterIndex.setDescription("The index of DNS header opcode exclusion for the specified DNS security profile.")
ltmDnsHeaderFilterOpcodeExclusion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,5,4,0,)).subtype(namedValues=NamedValues(("query", 0), ("iquery", 1), ("status", 2), ("notify", 4), ("update", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsHeaderFilterOpcodeExclusion.setDescription("The DNS header opcode values. Value of 3 is not used.")
ltmBWC = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13))
ltmBwcPolicyStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1))
ltmBwcPolicyStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmBwcPolicyStatResetStats.setDescription("The action to reset resetable statistics data in  ltmBwcPolicyStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmBwcPolicyStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatNumber.setDescription("The number of ltmBwcPolicyStat entries in the table.")
ltmBwcPolicyStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3))
if mibBuilder.loadTexts: ltmBwcPolicyStatTable.setDescription("A table containing statistics information of BWC policy.")
ltmBwcPolicyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatName"))
if mibBuilder.loadTexts: ltmBwcPolicyStatEntry.setDescription("Columns in the ltmBwcPolicyStat Table")
ltmBwcPolicyStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatName.setDescription("The name of BWC policy that is configured. There are many types of\nBWC policies. This name is string upto max of string name of policy.")
ltmBwcPolicyStatBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPerSec.setDescription("The average input bytes/sec over last 4 seconds. These are bytes as\nprocessed by this policy.")
ltmBwcPolicyStatBytesPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPerSecOut.setDescription("The average output bytes/sec over last 4 seconds. These are bytes\nprocessed by this policy.")
ltmBwcPolicyStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesIn.setDescription("The number of bytes ingress. These are bytes ingress to policy before\nbeing processed by policy.")
ltmBwcPolicyStatBytesPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPassed.setDescription("The number of bytes passed. These are bytes processed by the policy.")
ltmBwcPolicyStatBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesDropped.setDescription("The number of bytes dropped. These are bytes dropped by the policy.")
ltmBwcPolicyStatPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsIn.setDescription("The number of packets ingress. These are packets input to the policy\nprocessing.")
ltmBwcPolicyStatPacketsPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsPassed.setDescription("The number of packets passed. These are packets passed by the policy.")
ltmBwcPolicyStatActivePolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatActivePolicies.setDescription("The number of current policies. This is active number of current\npolicies in system.")
ltmBwcPolicyStatInactivePolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatInactivePolicies.setDescription("The number of inactive policies created. This is inactive number of\npolicies in the system.")
ltmBwcPolicyStatTotalPolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatTotalPolicies.setDescription("The number of total policies created. This is total number of\npolicies in system.")
ltmBwcPolicyStatTimeDataCollected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatTimeDataCollected.setDescription("The time since start in seconds. This is the time since the stats\ninformation has been collected.")
ltmLSNs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14))
ltmLsnPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1))
ltmLsnPrefixNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixNumber.setDescription("The number of ltmLsnPrefix entries in the table.")
ltmLsnPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2))
if mibBuilder.loadTexts: ltmLsnPrefixTable.setDescription("A table containing information of LSN prefix.")
ltmLsnPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixName"))
if mibBuilder.loadTexts: ltmLsnPrefixEntry.setDescription("Columns in the ltmLsnPrefix Table")
ltmLsnPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixName.setDescription("The name of a LSN prefix node.")
ltmLsnPrefixAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixAddrType.setDescription("The IP address type of ltmLsnPrefixAddr.")
ltmLsnPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixAddr.setDescription("The IP address of a node. It is interpreted within \nthe context of a ltmLsnPrefixAddrType value.")
ltmLsnPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2))
ltmLsnPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolNumber.setDescription("The number of ltmLsnPool entries in the table.")
ltmLsnPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2))
if mibBuilder.loadTexts: ltmLsnPoolTable.setDescription("A table containing information of LSN pool.")
ltmLsnPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolName"))
if mibBuilder.loadTexts: ltmLsnPoolEntry.setDescription("Columns in the ltmLsnPool Table")
ltmLsnPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolName.setDescription("The name of a LSN Pool.")
ltmLsnPoolMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolMemberCount.setDescription("The total number of members in the specified pool.")
ltmLsnPoolRouteAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolRouteAdvertisement.setDescription("Specifies whether route advertisement is enabled or disabled for \ntranslated IP addresses.")
ltmLsnPoolMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("napt", 0), ("deterministic", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolMode.setDescription("NAPT mode provides standard address and port translation\nallowing multiple clients to share the same external address.\nDeterministic mode provides address and port translations \nthat can be consistently reversed so that external address\nand port combinations can identify specific clients.")
ltmLsnPoolPersistenceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("none", 0), ("address", 1), ("addressPort", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolPersistenceMode.setDescription("Persistence settings for LSN translation entries.\nnone: Specifies that there is no persistence for the translation.\naddress: Specifies that the translation reuses the port mapping for \n    subsequent packets sent from the same internal IP address and port \n    to the same external IP address while the mapping is still active, \n    regardless of the external port.\naddressPort: Specifies that the translation reuses the port mapping \n    for subsequent packets sent from the same internal IP address \n    and port to the same external IP address and port while the \n    mapping is still active.")
ltmLsnPoolPersistenceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolPersistenceTimeout.setDescription("Maximum time-to-live for inactive translation entries.")
ltmLsnPoolPersistencePrefixLengthIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolPersistencePrefixLengthIpv4.setDescription("Number of significant bits in the client IPv4 address to be used as \nthe persistence key.")
ltmLsnPoolPersistencePrefixLengthIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolPersistencePrefixLengthIpv6.setDescription("Number of significant bits in the client IPv6 address to be used as \nthe persistence key.")
ltmLsnPoolInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolInboundConnections.setDescription("If true, will enable inbound connections to translation addresses and ports.")
ltmLsnPoolIcmpEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolIcmpEcho.setDescription("If true, will enable icmp-echo requests for translation addresses.")
ltmLsnPoolTranslationPortRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolTranslationPortRangeLow.setDescription("Specifies the low end of the range of port numbers available for use with \ntranslation IP addresses.")
ltmLsnPoolTranslationPortRangeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolTranslationPortRangeHigh.setDescription("Specifies the high end of the range of port numbers available for use with \ntranslation IP addresses.")
ltmLsnPoolClientConnectionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolClientConnectionLimit.setDescription("Specifies the maximum number of simultaneous translated connections a client or \nsubscriber is allowed to have.  A value of zero signifies no limit.")
ltmLsnPoolEgressInterfacesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("false", 0), ("true", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolEgressInterfacesEnabled.setDescription("If true, source address translation is allowed on the interfaces specified in \nthe egress-interfaces list.")
ltmLsnPoolLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolLogPublisher.setDescription("Specifies the name of the log publisher that logs translation events, if any.")
ltmLsnPoolHairpinMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolHairpinMode.setDescription("If enabled, will enable hairpinning for inbound connections.  A hairpin connection between\ntwo subscribers goes through the NAT device and uses translation addresses so that it \nappears to each subscriber that the other is an external host.")
ltmLsnPrefixLsnPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3))
ltmLsnPrefixLsnPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolNumber.setDescription("The number of ltmLsnPrefixLsnPool entries in the table.")
ltmLsnPrefixLsnPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2))
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolTable.setDescription("A table containing information of LSN pool prefix.")
ltmLsnPrefixLsnPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolLsnPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolLsnPrefixName"))
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolEntry.setDescription("Columns in the ltmLsnPrefixLsnPool Table")
ltmLsnPrefixLsnPoolLsnPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolLsnPrefixName.setDescription("The name of a LSN prefix node.")
ltmLsnPrefixLsnPoolLsnPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolLsnPoolName.setDescription("The name of a LSN pool.")
ltmLsnPrefixLsnPoolPrefixAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolPrefixAddressType.setDescription("The IP address type of ltmLsnPrefixLsnPoolPrefixAddress.")
ltmLsnPrefixLsnPoolPrefixAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolPrefixAddress.setDescription("The IP address of a node. It is interpreted within \nthe context of a ltmLsnPrefixLsnPoolPrefixAddressType value.")
ltmLsnPrefixLsnPoolBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4))
ltmLsnPrefixLsnPoolBackupNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupNumber.setDescription("The number of ltmLsnPrefixLsnPoolBackup entries in the table.")
ltmLsnPrefixLsnPoolBackupTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2))
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupTable.setDescription("A table containing information of LSN pool backup prefix.")
ltmLsnPrefixLsnPoolBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupLsnPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupLsnPrefixName"))
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupEntry.setDescription("Columns in the ltmLsnPrefixLsnPoolBackup Table")
ltmLsnPrefixLsnPoolBackupLsnPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupLsnPrefixName.setDescription("The name of a LSN prefix node.")
ltmLsnPrefixLsnPoolBackupLsnPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupLsnPoolName.setDescription("The name of a LSN pool.")
ltmLsnPrefixLsnPoolBackupPrefixAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupPrefixAddressType.setDescription("The IP address type of ltmLsnPrefixLsnPoolBackupPrefixAddress.")
ltmLsnPrefixLsnPoolBackupPrefixAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupPrefixAddress.setDescription("The IP address of a node. It is interpreted within \nthe context of a ltmLsnPrefixLsnPoolBackupPrefixAddressType value.")
ltmLsnPoolVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5))
ltmLsnPoolVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolVlanNumber.setDescription("The number of ltmLsnPoolVlan entries in the table.")
ltmLsnPoolVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 2))
if mibBuilder.loadTexts: ltmLsnPoolVlanTable.setDescription("A table containing VLAN information of LSN pool.")
ltmLsnPoolVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 2, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanLsnPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanVlanName"))
if mibBuilder.loadTexts: ltmLsnPoolVlanEntry.setDescription("Columns in the ltmLsnPoolVlan Table")
ltmLsnPoolVlanLsnPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolVlanLsnPoolName.setDescription("The name of a LSN pool.")
ltmLsnPoolVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolVlanVlanName.setDescription("The name of VLAN for LSN pool.")
ltmLsnPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6))
ltmLsnPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmLsnPoolStatResetStats.setDescription("The action to reset resetable statistics data in  ltmLsnPoolStat. \nSetting this value to 1 will reset statistics data. \nNote, some statistics data may not be reset including data that are incremental counters.")
ltmLsnPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatNumber.setDescription("The number of ltmLsnPoolStat entries in the table.")
ltmLsnPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3))
if mibBuilder.loadTexts: ltmLsnPoolStatTable.setDescription("A table containing statistic information of LSN pool.")
ltmLsnPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1)).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatName"))
if mibBuilder.loadTexts: ltmLsnPoolStatEntry.setDescription("Columns in the ltmLsnPoolStat Table")
ltmLsnPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatName.setDescription("The name of a LSN Pool.")
ltmLsnPoolStatTranslationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTranslationRequests.setDescription("The number of translation requests.")
ltmLsnPoolStatHairpinConnectionRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatHairpinConnectionRequests.setDescription("The number of hairpin connection requests.  A hairpin connection between \ntwo subscribers goes through the NAT device and uses translation addresses so \nthat it appears to each subscriber that the other is an external host.")
ltmLsnPoolStatActiveTranslations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatActiveTranslations.setDescription("The number of active translations.")
ltmLsnPoolStatActiveHairpinConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatActiveHairpinConnections.setDescription("The number of active hairpin connections.  A hairpin connection between \ntwo subscribers goes through the NAT device and uses translation addresses so \nthat it appears to each subscriber that the other is an external host.")
ltmLsnPoolStatTranslationRequestFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTranslationRequestFailures.setDescription("The number of translation request failures.")
ltmLsnPoolStatPersistenceMappingFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPersistenceMappingFailures.setDescription("The number of persistence mapping translation request failures.")
ltmLsnPoolStatHairpinConnectionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatHairpinConnectionFailures.setDescription("The number of failed hairpin connections.  A hairpin connection failure \noccurs when a subscriber connects to an inbound reservation but a connection \ncould not be created.")
ltmLsnPoolStatBackupPoolTranslations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatBackupPoolTranslations.setDescription("The number of translation requests that were served using the backup pool.")
ltmLsnPoolStatLogAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatLogAttempts.setDescription("The number of logging attempts.")
ltmLsnPoolStatLogFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatLogFailures.setDescription("The number of logging attempts that resulted in failure.")
bigipLocalTMGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2))

# Augmentions

# Groups

ltmAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 1)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmAttrMirrorPeerIpAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrPersistDestAddrLimitMode"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrPersistDestAddrMaxCount"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrMirrorState"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrLbmodeFastestMaxIdleTime"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrSnatAnyIpProtocol"), ) )
if mibBuilder.loadTexts: ltmAttrGroup.setDescription("A collection of objects of ltmGlobalAttr MIB.")
ltmRateFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 2)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmRateFilterCeil"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterRate"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterCname"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterPname"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterBurst"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterQtype"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterDirection"), ) )
if mibBuilder.loadTexts: ltmRateFilterGroup.setDescription("A collection of objects of ltmRateFilter MIB.")
ltmRateFilterStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 3)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDroppedBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatBytesPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropRandPkts"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatBurstBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropTotPkts"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropTotBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropRandBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropTailPkts"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatRateBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatBytesQueued"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatCname"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropTailBytes"), ) )
if mibBuilder.loadTexts: ltmRateFilterStatGroup.setDescription("A collection of objects of ltmRateFilterStat MIB.")
ltmMirrorPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 4)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortName"), ) )
if mibBuilder.loadTexts: ltmMirrorPortGroup.setDescription("A collection of objects of ltmMirrorPort MIB.")
ltmMirrorPortMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 5)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberToName"), ("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberName"), ("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberConduitName"), ) )
if mibBuilder.loadTexts: ltmMirrorPortMemberGroup.setDescription("A collection of objects of ltmMirrorPortMember MIB.")
ltmNatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 6)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmNatListedEnabledVlans"), ("F5-BIGIP-LOCAL-MIB", "ltmNatOrigAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNatEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmNatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNatOrigAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNatArpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmNatTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNatUnitId"), ("F5-BIGIP-LOCAL-MIB", "ltmNatTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNatName"), ) )
if mibBuilder.loadTexts: ltmNatGroup.setDescription("A collection of objects of ltmNat MIB.")
ltmNatStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 7)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatResetStats"), ) )
if mibBuilder.loadTexts: ltmNatStatGroup.setDescription("A collection of objects of ltmNatStat MIB.")
ltmNatVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 8)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmNatVlanVlanName"), ("F5-BIGIP-LOCAL-MIB", "ltmNatVlanNatName"), ("F5-BIGIP-LOCAL-MIB", "ltmNatVlanTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNatVlanNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNatVlanTransAddrType"), ) )
if mibBuilder.loadTexts: ltmNatVlanGroup.setDescription("A collection of objects of ltmNatVlan MIB.")
ltmNodeAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 9)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrMonitorStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrMonitorRule"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrScreenName"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrNewSessionEnable"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrPoolMemberRefCount"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrName"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrMonitorState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrSessionStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrDynamicRatio"), ) )
if mibBuilder.loadTexts: ltmNodeAddrGroup.setDescription("A collection of objects of ltmNodeAddr MIB.")
ltmNodeAddrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 10)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatCurrentConnsPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatTotRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatDurationRateExceeded"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatCurSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatNodeName"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerBytesIn"), ) )
if mibBuilder.loadTexts: ltmNodeAddrStatGroup.setDescription("A collection of objects of ltmNodeAddrStat MIB.")
ltmPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 11)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmPoolMinUpMembersEnable"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolActiveMemberCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolQueueTimeLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolQueueOnConnectionLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDynamicRatioSum"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolLinkQosToServer"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolLinkQosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolIpTosToServer"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMinUpMemberAction"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMonitorRule"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMinUpMembers"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolSlowRampTime"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolQueueDepthLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDisallowSnat"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolIpTosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolLbMode"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDisallowNat"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolActionOnServiceDown"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMinActiveMembers"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolSimpleTimeout"), ) )
if mibBuilder.loadTexts: ltmPoolGroup.setDescription("A collection of objects of ltmPool MIB.")
ltmPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 12)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllAgeHead"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqServiced"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAgeEma"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllAgeEdm"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAgeHead"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllAgeEma"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllAgeMax"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAgeMax"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllServiced"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatTotRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatCurSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAgeEdm"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaPktsIn"), ) )
if mibBuilder.loadTexts: ltmPoolStatGroup.setDescription("A collection of objects of ltmPoolStat MIB.")
ltmPoolMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 13)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPriority"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberMonitorStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberNewSessionEnable"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberMonitorState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberWeight"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPort"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberNodeName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberDynamicRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberSessionStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberMonitorRule"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberAvailabilityState"), ) )
if mibBuilder.loadTexts: ltmPoolMemberGroup.setDescription("A collection of objects of ltmPoolMember MIB.")
ltmPoolMemberStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 14)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqAgeHead"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatCurrentConnsPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPort"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqAgeMax"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatDurationRateExceeded"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatCurSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatNodeName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqAgeEma"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqServiced"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatTotRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqAgeEdm"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaPktsOut"), ) )
if mibBuilder.loadTexts: ltmPoolMemberStatGroup.setDescription("A collection of objects of ltmPoolMemberStat MIB.")
ltmAuthProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 15)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileCredentialSource"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileType"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileConfigName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileMode"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileDefaultName"), ) )
if mibBuilder.loadTexts: ltmAuthProfileGroup.setDescription("A collection of objects of ltmAuthProfile MIB.")
ltmAuthProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 16)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatCurSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatSuccessResults"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatMaxSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatWantcredentialResults"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatTotSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatErrorResults"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatFailureResults"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatName"), ) )
if mibBuilder.loadTexts: ltmAuthProfileStatGroup.setDescription("A collection of objects of ltmAuthProfileStat MIB.")
ltmClientSslGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 17)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCaKey"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslUncleanShutdown"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslSessionTicket"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslPeerCertMode"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslName"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslClientcertca"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslOptions"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAlertTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCrlfile"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslKey"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAuthenticateDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCertExtensionIncludes"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAllowNonssl"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslRenegotiateMaxRecordDelay"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCafile"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslRenegotiateSize"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCertLifespan"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslRenegotiatePeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCaCert"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslMode"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCert"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslModsslmethods"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpLookupByIpaddrPort"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslPassphrase"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslChain"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStrictResume"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCiphers"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCaPassphrase"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslHandshakeTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAuthenticateOnce"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCacheTimeout"), ) )
if mibBuilder.loadTexts: ltmClientSslGroup.setDescription("A collection of objects of ltmClientSslProfile MIB.")
ltmClientSslStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 18)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTlsv11"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCurCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEdhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheCurEntries"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheOverflows"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMaxCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPartiallyHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDesBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatReuseFailed"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPeercertValid"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTotCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatFullyHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEcdheRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatAdhKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSslv3"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSslv2"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPrematureDisconnects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNonHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatHandshakeFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPeercertInvalid"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNullDigest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatInsecureHandshakeAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDtlsv1"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEdhDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNullBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatReused"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNotssl"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatAesBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMidstreamRenegotiations"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatIdeaBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCurNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCachedCerts"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheLookups"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEncryptedBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMd5Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPeercertNone"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTlsv1"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheInvalidations"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSniRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatInsecureHandshakeRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEncryptedBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSecureHandshakes"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatBadRecords"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatInsecureRenegotiationRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTlsv12"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMaxNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDhDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRc2Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRc4Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatFatalAlerts"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTotNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDecryptedBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDecryptedBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatShaDigest"), ) )
if mibBuilder.loadTexts: ltmClientSslStatGroup.setDescription("A collection of objects of ltmClientSslProfileStat MIB.")
ltmServerSslGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 19)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmServerSslChain"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslOptions"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCiphers"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslFwdpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslRenegotiateSize"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslUncleanShutdown"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAuthenticateOnce"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCacheTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslKey"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAlertTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslDropExpCert"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslPeerCertMode"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCert"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStrictResume"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCafile"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslModsslmethods"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAuthenticateDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslHandshakeTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslRenegotiatePeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCrlfile"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslPassphrase"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslSessionTicket"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAuthenticateName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslMode"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslDropUntrustCa"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCacheSize"), ) )
if mibBuilder.loadTexts: ltmServerSslGroup.setDescription("A collection of objects of ltmServerSslProfile MIB.")
ltmServerSslStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 20)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPeercertNone"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDesBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEncryptedBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDecryptedBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSecureHandshakes"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatShaDigest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEcdheRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEdhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNotssl"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSniRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatHandshakeFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPartiallyHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTlsv11"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheCurEntries"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatFullyHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMaxCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPeercertValid"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheOverflows"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRecordsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNonHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatBadRecords"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatAdhKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTotCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDhDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatReused"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatInsecureRenegotiationRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDecryptedBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTotNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPeercertInvalid"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTlsv1"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNullDigest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatInsecureHandshakeRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMd5Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRc4Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNullBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMaxNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSslv2"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatCurNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatReuseFailed"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRecordsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTlsv12"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatIdeaBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEdhDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatFatalAlerts"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSslv3"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatAesBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheInvalidations"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEncryptedBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatInsecureHandshakeAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRc2Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPrematureDisconnects"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatCurCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMidstreamRenegotiations"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheLookups"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDtlsv1"), ) )
if mibBuilder.loadTexts: ltmServerSslStatGroup.setDescription("A collection of objects of ltmServerSslProfileStat MIB.")
ltmConnPoolProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 21)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileSrcMaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileSrcMask"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileMaxReuse"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileMaxAge"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileName"), ) )
if mibBuilder.loadTexts: ltmConnPoolProfileGroup.setDescription("A collection of objects of ltmConnPoolProfile MIB.")
ltmConnPoolProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 22)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatReuses"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatCurSize"), ) )
if mibBuilder.loadTexts: ltmConnPoolProfileStatGroup.setDescription("A collection of objects of ltmConnPoolProfileStat MIB.")
ltmFastL4ProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 23)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpHandshakeTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpTimestampMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfilePvaAccelMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileSoftSyncookie"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpWscaleMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileHardSyncookie"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileRttFromServer"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpGenerateIsn"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileRttFromClient"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpCloseTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileIpFragReass"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLinkQosToServer"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpStripSack"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileIpTosToServer"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileIpTosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLinkQosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileMssOverride"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLooseInitiation"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLooseClose"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileName"), ) )
if mibBuilder.loadTexts: ltmFastL4ProfileGroup.setDescription("A collection of objects of ltmFastL4Profile MIB.")
ltmFtpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 24)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileDataPort"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileTranslateExtended"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileNumber"), ) )
if mibBuilder.loadTexts: ltmFtpProfileGroup.setDescription("A collection of objects of ltmFtpProfile MIB.")
ltmHttpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 25)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileBasicAuthRealm"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileFallbackHost"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheIgnoreClient"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheObjectMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressCpusaverLow"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileHeaderInsert"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressBrowserWorkarounds"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheMaxEntries"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressGzipLevel"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheObjectMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileMaxRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePipelining"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressCpusaver"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressPreferredMethod"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcache"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileInsertXforwardedFor"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileLwsMaxColumn"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressAllowHttp10"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileOneConnect"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheAgingRate"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressGzipMemlevel"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileHeaderErase"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressMode"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileLwsSeparator"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRedirectRewrite"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressCpusaverHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileMaxHeaderSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressGzipWindowsize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressKeepAcceptEncoding"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileServerAgentName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheMaxAge"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileResponseChunking"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressVaryHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheInsertAgeHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressBufferSize"), ) )
if mibBuilder.loadTexts: ltmHttpProfileGroup.setDescription("A collection of objects of ltmHttpProfile MIB.")
ltmCompUriInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 26)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmCompUriInclUri"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriInclName"), ) )
if mibBuilder.loadTexts: ltmCompUriInclGroup.setDescription("A collection of objects of ltmHttpProfileCompUriIncl MIB.")
ltmCompUriExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 27)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmCompUriExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriExclUri"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriExclName"), ) )
if mibBuilder.loadTexts: ltmCompUriExclGroup.setDescription("A collection of objects of ltmHttpProfileCompUriExcl MIB.")
ltmCompContTypeInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 28)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclContentType"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclNumber"), ) )
if mibBuilder.loadTexts: ltmCompContTypeInclGroup.setDescription("A collection of objects of ltmHttpProfileCompContTypeIncl MIB.")
ltmCompContTypeExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 29)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclContentType"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclIndex"), ) )
if mibBuilder.loadTexts: ltmCompContTypeExclGroup.setDescription("A collection of objects of ltmHttpProfileCompContTypeExcl MIB.")
ltmHttpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 30)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV10Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatNumberReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatMaxKeepaliveReq"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV9Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatOctetPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResp4xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatHtmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatAudioPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheMissesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatCssPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatGetReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatCookiePersistInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatCssPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatImagePostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatJsPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatSgmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResp3xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatXmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatAudioPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResp5xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatVideoPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPostReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatSgmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatImagePrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPlainPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatOctetPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV9Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatHtmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheMissBytesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV10Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatVideoPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatOtherPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatNullCompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResp2xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatXmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV11Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheCount"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPlainPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV11Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatJsPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatOtherPrecompressBytes"), ) )
if mibBuilder.loadTexts: ltmHttpProfileStatGroup.setDescription("A collection of objects of ltmHttpProfileStat MIB.")
ltmPersistProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 31)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieHashOffset"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMapProxies"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileSipInfo"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileUieRule"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileAcrossPools"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileAcrossServices"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMode"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileAcrossVirtuals"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMask"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieMethod"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieName"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieHashLength"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMsrdpNoSessionDir"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMirror"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieExpiration"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileNumber"), ) )
if mibBuilder.loadTexts: ltmPersistProfileGroup.setDescription("A collection of objects of ltmPersistProfile MIB.")
ltmStreamProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 32)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileSource"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileTarget"), ) )
if mibBuilder.loadTexts: ltmStreamProfileGroup.setDescription("A collection of objects of ltmStreamProfile MIB.")
ltmStreamProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 33)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatReplaces"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatNumber"), ) )
if mibBuilder.loadTexts: ltmStreamProfileStatGroup.setDescription("A collection of objects of ltmStreamProfileStat MIB.")
ltmTcpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 34)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDsack"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileCmetricsCache"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileIpTosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileProxyBufferLow"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileProxyOptions"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSndbuf"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileTimeWaitRecycle"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDelayedAcks"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfilePktLossIgnoreBurst"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDelayWindowControl"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileNagle"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMaxrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileInitRwnd"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileZeroWindowTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSynMaxrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileInitCwnd"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMd5Sig"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileFinWaitTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileRcvwnd"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSlowStart"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMd5SigPass"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDeferredAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileProxyBufferHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSynRtoBase"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileVerifiedAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSelectiveAcks"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileAbc"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfilePktLossIgnoreRate"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileCongestionCtrl"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileTimestamps"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileKeepAliveInterval"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileLimitedTransmit"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileLinkQosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileEcn"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileHighPerfTcpExt"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileBandwidthDelay"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMinRto"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileTimeWaitTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileProxyMss"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileCloseWaitTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileAckOnPush"), ) )
if mibBuilder.loadTexts: ltmTcpProfileGroup.setDescription("A collection of objects of ltmTcpProfile MIB.")
ltmTcpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 35)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxbadsum"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatExpires"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatSyncacheover"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatAcceptfails"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatTimeWait"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatTxrexmits"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxrst"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxbadseg"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatConnfails"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxooseg"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatOpen"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxcookie"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatAbandons"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatFinWait"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxbadcookie"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatCloseWait"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatNumber"), ) )
if mibBuilder.loadTexts: ltmTcpProfileStatGroup.setDescription("A collection of objects of ltmTcpProfileStat MIB.")
ltmUdpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 36)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileLinkQosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileIpTosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileAllowNoPayload"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileDatagramLb"), ) )
if mibBuilder.loadTexts: ltmUdpProfileGroup.setDescription("A collection of objects of ltmUdpProfile MIB.")
ltmUdpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 37)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatConnfails"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatTxdgram"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxunreach"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxnosum"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatExpires"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatAcceptfails"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxbadsum"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatOpen"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxbaddgram"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxdgram"), ) )
if mibBuilder.loadTexts: ltmUdpProfileStatGroup.setDescription("A collection of objects of ltmUdpProfileStat MIB.")
ltmRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 38)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmRuleNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleDefinition"), ) )
if mibBuilder.loadTexts: ltmRuleGroup.setDescription("A collection of objects of ltmRule MIB.")
ltmRuleEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 39)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmRuleEventName"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventScript"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventPriority"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventEventType"), ) )
if mibBuilder.loadTexts: ltmRuleEventGroup.setDescription("A collection of objects of ltmRuleEvent MIB.")
ltmRuleEventStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 40)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatMinCycles"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatPriority"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatTotalExecutions"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatAborts"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatMaxCycles"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatEventType"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatAvgCycles"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatResetStats"), ) )
if mibBuilder.loadTexts: ltmRuleEventStatGroup.setDescription("A collection of objects of ltmRuleEventStat MIB.")
ltmSnatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 41)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSnatSfFlags"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatSnatpoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatListedEnabledVlans"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatTransAddrName"), ) )
if mibBuilder.loadTexts: ltmSnatGroup.setDescription("A collection of objects of ltmSnat MIB.")
ltmSnatStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 42)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSnatStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientBytesIn"), ) )
if mibBuilder.loadTexts: ltmSnatStatGroup.setDescription("A collection of objects of ltmSnatStat MIB.")
ltmSnatVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 43)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSnatVlanSnatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatVlanNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatVlanVlanName"), ) )
if mibBuilder.loadTexts: ltmSnatVlanGroup.setDescription("A collection of objects of ltmSnatVlan MIB.")
ltmSnatOrigAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 44)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrWildmask"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrSnatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrWildmaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrAddrType"), ) )
if mibBuilder.loadTexts: ltmSnatOrigAddrGroup.setDescription("A collection of objects of ltmSnatOrigAddr MIB.")
ltmTransAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 45)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmTransAddrAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrIpIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrTcpIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrUnitId"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrArpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrName"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrUdpIdleTimeout"), ) )
if mibBuilder.loadTexts: ltmTransAddrGroup.setDescription("A collection of objects of ltmTransAddr MIB.")
ltmTransAddrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 46)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatName"), ) )
if mibBuilder.loadTexts: ltmTransAddrStatGroup.setDescription("A collection of objects of ltmTransAddrStat MIB.")
ltmSnatPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 47)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolNumber"), ) )
if mibBuilder.loadTexts: ltmSnatPoolGroup.setDescription("A collection of objects of ltmSnatPool MIB.")
ltmSnatPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 48)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerTotConns"), ) )
if mibBuilder.loadTexts: ltmSnatPoolStatGroup.setDescription("A collection of objects of ltmSnatPoolStat MIB.")
ltmSnatpoolTransAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 49)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrSnatpoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrTransAddrName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrNumber"), ) )
if mibBuilder.loadTexts: ltmSnatpoolTransAddrGroup.setDescription("A collection of objects of ltmSnatpoolTransAddr MIB.")
ltmVirtualServGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 50)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServTranslatePort"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServCmpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSrcport"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServWildmaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServDefaultPool"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSnatpoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServTranslateAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServVaName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSnatType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServGtmScore"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPort"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServFallbackPersist"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServWildmask"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSourceAddressTranslationPool"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServActualPvaAccel"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServIpProto"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSfFlags"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServListedEnabledVlans"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRclass"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServLasthopPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSourceAddressTranslationType"), ) )
if mibBuilder.loadTexts: ltmVirtualServGroup.setDescription("A collection of objects of ltmVirtualServ MIB.")
ltmVirtualServStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 51)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatDurationRateExceeded"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatVsUsageRatio5s"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatVsUsageRatio5m"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCsMaxConnDur"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatNoNodesErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCsMinConnDur"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCurrentConnsPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCycleCount"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatVsUsageRatio1m"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCsMeanConnDur"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatTotRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatName"), ) )
if mibBuilder.loadTexts: ltmVirtualServStatGroup.setDescription("A collection of objects of ltmVirtualServStat MIB.")
ltmVirtualServAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 52)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthProfileName"), ) )
if mibBuilder.loadTexts: ltmVirtualServAuthGroup.setDescription("A collection of objects of ltmVirtualServAuth MIB.")
ltmVirtualServPersistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 53)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistUseDefault"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistNumber"), ) )
if mibBuilder.loadTexts: ltmVirtualServPersistGroup.setDescription("A collection of objects of ltmVirtualServPersist MIB.")
ltmVirtualServProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 54)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileContext"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileProfileName"), ) )
if mibBuilder.loadTexts: ltmVirtualServProfileGroup.setDescription("A collection of objects of ltmVirtualServProfile MIB.")
ltmVirtualServPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 55)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolVirtualServerName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolRuleName"), ) )
if mibBuilder.loadTexts: ltmVirtualServPoolGroup.setDescription("A collection of objects of ltmVirtualServPool MIB.")
ltmVirtualServClonePoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 56)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolVirtualServerName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolPoolName"), ) )
if mibBuilder.loadTexts: ltmVirtualServClonePoolGroup.setDescription("A collection of objects of ltmVirtualServClonePool MIB.")
ltmVirtualServRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 57)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRulePriority"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleVirtualServerName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleNumber"), ) )
if mibBuilder.loadTexts: ltmVirtualServRuleGroup.setDescription("A collection of objects of ltmVirtualServRule MIB.")
ltmVirtualServVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 58)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanVlanName"), ) )
if mibBuilder.loadTexts: ltmVirtualServVlanGroup.setDescription("A collection of objects of ltmVirtualServVlan MIB.")
ltmVirtualAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 59)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrRouteAdvertisement"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrServer"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrUnitId"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrArpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrIsFloat"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrSfFlags"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrAddrType"), ) )
if mibBuilder.loadTexts: ltmVirtualAddrGroup.setDescription("A collection of objects of ltmVirtualAddr MIB.")
ltmVirtualAddrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 60)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatNumber"), ) )
if mibBuilder.loadTexts: ltmVirtualAddrStatGroup.setDescription("A collection of objects of ltmVirtualAddrStat MIB.")
ltmFastHttpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 61)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileForceHttp10Response"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileMssOverride"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileClientCloseTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileUncleanShutdown"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileMaxHeaderSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileHeaderInsert"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolStep"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileLayer7"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolReplenish"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileMaxRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileHttp11CloseWorkarounds"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileServerCloseTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolMaxReuse"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileInsertXforwardedFor"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConfigSource"), ) )
if mibBuilder.loadTexts: ltmFastHttpProfileGroup.setDescription("A collection of objects of ltmFastHttpProfile MIB.")
ltmFastHttpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 62)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatReqParseErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatClientAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatConnpoolCurSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatConnpoolMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatClientRxBad"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatServerRxBad"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatGetReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResp3xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatV10Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResp5xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatRespParseErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatPipelinedReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatConnpoolExhausted"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResp4xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatUnbufferedReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatV9Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatConnpoolReuses"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatServerConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatPostReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatClientSyns"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatV11Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResp2xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatNumberReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatNumber"), ) )
if mibBuilder.loadTexts: ltmFastHttpProfileStatGroup.setDescription("A collection of objects of ltmFastHttpProfileStat MIB.")
ltmXmlProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 63)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileAbortOnError"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileMaxBufferSize"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileMultipleQueryMatches"), ) )
if mibBuilder.loadTexts: ltmXmlProfileGroup.setDescription("A collection of objects of ltmXmlProfile MIB.")
ltmXmlProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 64)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumDocumentsWithThreeMatches"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumMalformedDocuments"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumDocumentsWithOneMatch"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumDocumentsWithNoMatches"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumInspectedDocuments"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumDocumentsWithTwoMatches"), ) )
if mibBuilder.loadTexts: ltmXmlProfileStatGroup.setDescription("A collection of objects of ltmXmlProfileStat MIB.")
ltmRamUriExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 65)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmRamUriExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriExclUri"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriExclIndex"), ) )
if mibBuilder.loadTexts: ltmRamUriExclGroup.setDescription("A collection of objects of ltmHttpProfileRamUriExcl MIB.")
ltmRamUriInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 66)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmRamUriInclUri"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriInclNumber"), ) )
if mibBuilder.loadTexts: ltmRamUriInclGroup.setDescription("A collection of objects of ltmHttpProfileRamUriIncl MIB.")
ltmRamUriPinGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 67)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmRamUriPinIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriPinUri"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriPinNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriPinName"), ) )
if mibBuilder.loadTexts: ltmRamUriPinGroup.setDescription("A collection of objects of ltmHttpProfileRamUriPin MIB.")
ltmDnsProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 68)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileCacheEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileLoggingEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileSecurity"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileGtmEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileLoggingProfile"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileSecurityEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDns64Mode"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileAvrDnsStatSampleRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDnsCache"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDns64PrefixType"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDnsLastAction"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileProcessRd"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDnssecEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileUseLocalBind"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDns64Prefix"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDns64AdditionalRewrite"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDnsExpressEnabled"), ) )
if mibBuilder.loadTexts: ltmDnsProfileGroup.setDescription("A collection of objects of ltmDnsProfile MIB.")
ltmHttpClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 69)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassAsmEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassRedirectLocation"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUrlRewrite"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassWaEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassNumber"), ) )
if mibBuilder.loadTexts: ltmHttpClassGroup.setDescription("A collection of objects of ltmHttpClassProfile MIB.")
ltmHttpClassHostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 70)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostString"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostIndex"), ) )
if mibBuilder.loadTexts: ltmHttpClassHostGroup.setDescription("A collection of objects of ltmHttpClassProfileHost MIB.")
ltmHttpClassUriGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 71)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriString"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriIndex"), ) )
if mibBuilder.loadTexts: ltmHttpClassUriGroup.setDescription("A collection of objects of ltmHttpClassProfileUri MIB.")
ltmHttpClassHeadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 72)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadString"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadNumber"), ) )
if mibBuilder.loadTexts: ltmHttpClassHeadGroup.setDescription("A collection of objects of ltmHttpClassProfileHead MIB.")
ltmHttpClassCookGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 73)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookString"), ) )
if mibBuilder.loadTexts: ltmHttpClassCookGroup.setDescription("A collection of objects of ltmHttpClassProfileCook MIB.")
ltmHttpClassStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 74)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatCssPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatVideoPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatOtherPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResp5xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatCssPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPlainPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatVideoPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResp4xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV10Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatImagePostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheMissesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV11Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatMaxKeepaliveReq"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatAudioPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResp3xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatNullCompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatXmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResp2xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV9Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatJsPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatOtherPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatHtmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatOctetPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatImagePrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatHtmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatNumberReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPostReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatSgmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV10Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheMissBytesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV9Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPlainPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatAudioPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV11Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatOctetPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatJsPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatGetReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatCookiePersistInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatXmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatSgmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket1k"), ) )
if mibBuilder.loadTexts: ltmHttpClassStatGroup.setDescription("A collection of objects of ltmHttpClassProfileStat MIB.")
ltmIiopProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 75)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfilePersistRequestId"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfilePersistObjectKey"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileAbortOnTimeout"), ) )
if mibBuilder.loadTexts: ltmIiopProfileGroup.setDescription("A collection of objects of ltmIiopProfile MIB.")
ltmIiopProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 76)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumFragments"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumCancels"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumRequests"), ) )
if mibBuilder.loadTexts: ltmIiopProfileStatGroup.setDescription("A collection of objects of ltmIiopProfileStat MIB.")
ltmRtspProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 77)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileSessionReconnect"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileMaxHeaderSize"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileRtcpPort"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileRtpPort"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileRealHttpPersistence"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileProxyHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileProxy"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileMaxQueuedData"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileMulticastRedirect"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileUnicastRedirect"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileNumber"), ) )
if mibBuilder.loadTexts: ltmRtspProfileGroup.setDescription("A collection of objects of ltmRtspProfile MIB.")
ltmRtspProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 78)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumInterleaved"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatResetStats"), ) )
if mibBuilder.loadTexts: ltmRtspProfileStatGroup.setDescription("A collection of objects of ltmRtspProfileStat MIB.")
ltmSctpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 79)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileRxChunks"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileIpTosToPeer"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileProxyBufferHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileAssocMaxrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileCookieExpiration"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileTcpShutdown"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileSndbuf"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileHeartbeatInterval"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileInitMaxrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileTxChunks"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileRcvwnd"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileRcvOrdered"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileSndPartial"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileSecret"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileProxyBufferLow"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileLinkQosToPeer"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileInStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileOutStreams"), ) )
if mibBuilder.loadTexts: ltmSctpProfileGroup.setDescription("A collection of objects of ltmSctpProfile MIB.")
ltmSctpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 80)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatRxbadsum"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatRxrst"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatAbandons"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatExpires"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatAcceptfails"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatConnfails"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatRxbadcookie"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatRxcookie"), ) )
if mibBuilder.loadTexts: ltmSctpProfileStatGroup.setDescription("A collection of objects of ltmSctpProfileStat MIB.")
ltmUserStatProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 81)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileNumber"), ) )
if mibBuilder.loadTexts: ltmUserStatProfileGroup.setDescription("A collection of objects of ltmUserStatProfile MIB.")
ltmUserStatProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 83)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatFieldName"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatFieldValue"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatFieldId"), ) )
if mibBuilder.loadTexts: ltmUserStatProfileStatGroup.setDescription("A collection of objects of ltmUserStatProfileStat MIB.")
ltmVsHttpClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 84)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassPriority"), ("F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassNumber"), ) )
if mibBuilder.loadTexts: ltmVsHttpClassGroup.setDescription("A collection of objects of ltmVirtualServHttpClass MIB.")
ltmNodeAddrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 85)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusDetailReason"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusName"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusEnabledState"), ) )
if mibBuilder.loadTexts: ltmNodeAddrStatusGroup.setDescription("A collection of objects of ltmNodeAddrStatus MIB.")
ltmPoolStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 86)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusDetailReason"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusName"), ) )
if mibBuilder.loadTexts: ltmPoolStatusGroup.setDescription("A collection of objects of ltmPoolStatus MIB.")
ltmPoolMbrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 87)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusNodeName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusDetailReason"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusPort"), ) )
if mibBuilder.loadTexts: ltmPoolMbrStatusGroup.setDescription("A collection of objects of ltmPoolMemberStatus MIB.")
ltmVsStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 88)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVsStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusDetailReason"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusName"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusEnabledState"), ) )
if mibBuilder.loadTexts: ltmVsStatusGroup.setDescription("A collection of objects of ltmVirtualServStatus MIB.")
ltmVAddrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 89)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusDetailReason"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusName"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusAddr"), ) )
if mibBuilder.loadTexts: ltmVAddrStatusGroup.setDescription("A collection of objects of ltmVirtualAddrStatus MIB.")
ltmFallbackStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 90)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusName"), ("F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusCode"), ("F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusIndex"), ) )
if mibBuilder.loadTexts: ltmFallbackStatusGroup.setDescription("A collection of objects of ltmHttpProfileFallbackStatus MIB.")
ltmRespHeadersPermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 91)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermName"), ("F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermStr"), ) )
if mibBuilder.loadTexts: ltmRespHeadersPermGroup.setDescription("A collection of objects of ltmHttpProfileRespHeadersPerm MIB.")
ltmEncCookiesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 92)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmEncCookiesNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmEncCookiesName"), ("F5-BIGIP-LOCAL-MIB", "ltmEncCookiesStr"), ("F5-BIGIP-LOCAL-MIB", "ltmEncCookiesIndex"), ) )
if mibBuilder.loadTexts: ltmEncCookiesGroup.setDescription("A collection of objects of ltmHttpProfileEncCookies MIB.")
ltmFastL4ProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 93)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatRxbadunreach"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatSyncookReject"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatAcceptfails"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatExpires"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatRxbadpkt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatSyncookIssue"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatOpen"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatSyncookAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatRxbadsum"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatServersynrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatRxunreach"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatTxerrors"), ) )
if mibBuilder.loadTexts: ltmFastL4ProfileStatGroup.setDescription("A collection of objects of ltmFastL4ProfileStat MIB.")
ltmSipProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 94)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSipProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileInsertRecordRoute"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileFirewallEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileInsertVia"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileTerminateBye"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileSecureVia"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileConfigSource"), ) )
if mibBuilder.loadTexts: ltmSipProfileGroup.setDescription("A collection of objects of ltmSipProfile MIB.")
ltmSipProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 95)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatBadmsgs"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatDrops"), ) )
if mibBuilder.loadTexts: ltmSipProfileStatGroup.setDescription("A collection of objects of ltmSipProfileStat MIB.")
ltmVirtualModuleScoreGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 96)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreScore"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreModuleType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreVsName"), ) )
if mibBuilder.loadTexts: ltmVirtualModuleScoreGroup.setDescription("A collection of objects of ltmVirtualModuleScore MIB.")
ltmIsessionProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 97)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionBzip2"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileConnectionReuse"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompression"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionAdaptive"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionCodecs"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfilePortTransparency"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionDeflateLevel"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileMode"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionNull"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionDeflate"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileTargetVirtual"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionLzo"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileEndpointPool"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileDeduplication"), ) )
if mibBuilder.loadTexts: ltmIsessionProfileGroup.setDescription("A collection of objects of ltmIsessionProfile MIB.")
ltmIsessionProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 98)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoOutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket128k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsIdleMax"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatIncomingConnsActiveTot"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2OutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullInBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2OutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateInBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucketLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2OutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket128k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket128k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoInBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket256k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullOutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket2k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoInUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket256k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2InErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket2k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2OutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoInBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket8k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullInBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket1m"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateOutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket512k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateInBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket1m"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatIncomingConnsActiveMax"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHits"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsIdleCur"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsPassthruTot"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket128k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket512k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2InBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateInUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket512k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullOutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket1m"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2InBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket512k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoOutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsActiveTot"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateOutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateOutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatIncomingConnsErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2InUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket2k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateOutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHits"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoOutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoInErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucketLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsIdleTot"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsActiveCur"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateInErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket256k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatIncomingConnsActiveCur"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoOutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket2k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket256k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullOutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket8k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullInErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket8k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsActiveMax"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket8k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucketLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullInUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket1m"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullOutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucketLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket4k"), ) )
if mibBuilder.loadTexts: ltmIsessionProfileStatGroup.setDescription("A collection of objects of ltmIsessionProfileStat MIB.")
ltmXmlProfileXpathQueriesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 99)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesString"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesIndex"), ) )
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesGroup.setDescription("A collection of objects of ltmXmlProfileXpathQueries MIB.")
ltmXmlProfileNamespaceMappingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 100)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsMappingNamespace"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsMappingPrefix"), ) )
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsGroup.setDescription("A collection of objects of ltmXmlProfileNamespaceMappings MIB.")
ltmHttpCompressionProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 101)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileSelective"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfilePreferredMethod"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileKeepAcceptEncoding"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileBufferSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileBrowserWorkarounds"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileGzipLevel"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileGzipWindowsize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileGzipMemlevel"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileAllowHttp10"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileCpusaverLow"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileVaryHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileCpusaver"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileCpusaverHigh"), ) )
if mibBuilder.loadTexts: ltmHttpCompressionProfileGroup.setDescription("A collection of objects of ltmHttpCompressionProfile MIB.")
ltmHttpcompUriInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 102)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclUri"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclName"), ) )
if mibBuilder.loadTexts: ltmHttpcompUriInclGroup.setDescription("A collection of objects of ltmHttpCompressionProfileUriIncl MIB.")
ltmHttpcompUriExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 103)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclUri"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclNumber"), ) )
if mibBuilder.loadTexts: ltmHttpcompUriExclGroup.setDescription("A collection of objects of ltmHttpCompressionProfileUriExcl MIB.")
ltmHttpcompContTypeInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 104)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclContentType"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclName"), ) )
if mibBuilder.loadTexts: ltmHttpcompContTypeInclGroup.setDescription("A collection of objects of ltmHttpCompressionProfileContTypeIncl MIB.")
ltmHttpcompContTypeExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 105)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclContentType"), ) )
if mibBuilder.loadTexts: ltmHttpcompContTypeExclGroup.setDescription("A collection of objects of ltmHttpCompressionProfileContTypeExcl MIB.")
ltmHttpCompressionProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 106)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatAudioPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatNullCompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatCssPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatOtherPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatCssPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatXmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatXmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatSgmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatVideoPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatJsPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatVideoPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatImagePostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatOtherPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatJsPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatPlainPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatImagePrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatSgmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatHtmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatHtmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatPlainPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatAudioPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatOctetPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatOctetPrecompressBytes"), ) )
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatGroup.setDescription("A collection of objects of ltmHttpCompressionProfileStat MIB.")
ltmWebAccelerationProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 107)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheMaxEntries"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheMaxAge"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheAgingRate"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheObjectMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheObjectMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheIgnoreClient"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheInsertAgeHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheSize"), ) )
if mibBuilder.loadTexts: ltmWebAccelerationProfileGroup.setDescription("A collection of objects of ltmWebAccelerationProfile MIB.")
ltmWebaccCacheUriExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 108)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclUri"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclName"), ) )
if mibBuilder.loadTexts: ltmWebaccCacheUriExclGroup.setDescription("A collection of objects of ltmWebAccelerationProfileUriExcl MIB.")
ltmWebaccCacheUriInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 109)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclUri"), ) )
if mibBuilder.loadTexts: ltmWebaccCacheUriInclGroup.setDescription("A collection of objects of ltmWebAccelerationProfileUriIncl MIB.")
ltmWebaccCacheUriPinGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 110)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinUri"), ) )
if mibBuilder.loadTexts: ltmWebaccCacheUriPinGroup.setDescription("A collection of objects of ltmWebAccelerationProfileUriPin MIB.")
ltmWebAccelerationProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 111)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheMissBytesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatRemoteHits"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheCount"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatRemoteMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeHits"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheMissesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatRemoteHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeCount"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeSize"), ) )
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatGroup.setDescription("A collection of objects of ltmWebAccelerationProfileStat MIB.")
ltmRstCauseStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 112)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatRstCause"), ("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatCount"), ("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatIndex"), ) )
if mibBuilder.loadTexts: ltmRstCauseStatGroup.setDescription("A collection of objects of ltmRstCauseStat MIB.")
ltmWebaccCacheUriOverGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 113)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverUri"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverName"), ) )
if mibBuilder.loadTexts: ltmWebaccCacheUriOverGroup.setDescription("A collection of objects of ltmWebAccelerationProfileUriOver MIB.")
ltmDnsCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 114)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUseIpv6"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUnwantedThreshold"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUseIpv4"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUseUdp"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheIgnoreCd"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheMaxConcurrentQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheAllowedQueryTime"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheType"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCachePrefetchKey"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheAnswerDefaultZones"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheRouteDomainName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheMaxConcurrentUdp"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheKeyCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUseTcp"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheNameserverCacheCount"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheMsgCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheMaxConcurrentTcp"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheRrsetCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheRandomizeQueryNameCase"), ) )
if mibBuilder.loadTexts: ltmDnsCacheGroup.setDescription("A collection of objects of ltmDnsCache MIB.")
ltmDnsCacheStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 115)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyUpdates"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecBogus"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverHits"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUnsolicitedReplies"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSync"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFailureCf"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecUnchecked"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFailureServer"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFailureSend"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFailureResolv"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecIndeterminate"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecSecure"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetHits"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecInsecure"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatAsync"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyHits"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgHits"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgUpdates"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverUpdates"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetUpdates"), ) )
if mibBuilder.loadTexts: ltmDnsCacheStatGroup.setDescription("A collection of objects of ltmDnsCacheStat MIB.")
ltmDnsProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 116)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatTclSuspends"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatToCache"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeNxdomain"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatToDns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatZoneIxfr"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeNoerror"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsExpressReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatTruncated"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatGtmEffectiveRateLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatCnameReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatZoneAxfr"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatSoaReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatResponsesPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRecursionDesired"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRecursionAvailable"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAuthenticatedData"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDns64Failures"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatCheckingDisabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatTxtReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatNoErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatToGtm"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatPtrReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOtherReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatHints"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAnyReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatSrvReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeServfail"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAuthoritativeAnswer"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatGtmConfiguredObjects"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatMxReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsEffectiveRateLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsConfiguredObjects"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatMalformed"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOpcodeQuery"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatMalicious"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatEdns0"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDns64Rewrites"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsExpressNotifies"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAaaaReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDns64Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeRefused"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOpcodeUpdate"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatGtmRateRejectedRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsRateRejectedRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatNsReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOpcodeNotify"), ) )
if mibBuilder.loadTexts: ltmDnsProfileStatGroup.setDescription("A collection of objects of ltmDnsProfileStat MIB.")
ltmDosProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 117)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmDosProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmDosProfileDefaultName"), ) )
if mibBuilder.loadTexts: ltmDosProfileGroup.setDescription("A collection of objects of ltmDosProfile MIB.")
ltmDosApplicationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 118)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationMaximumLatency"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedMaximumPreventionDuration"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedMode"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedMaximumPreventionDuration"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTriggerIrule"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationMinimumLatency"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedMode"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlRateLimiting"), ) )
if mibBuilder.loadTexts: ltmDosApplicationGroup.setDescription("A collection of objects of ltmDosApplication MIB.")
ltmDosWhiteIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 119)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpParentName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpAddressType"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNetmask"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpAddress"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpParentProfile"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNetmaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNumber"), ) )
if mibBuilder.loadTexts: ltmDosWhiteIpGroup.setDescription("A collection of objects of ltmDosWhiteIp MIB.")
ltmDnsSecurityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 120)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityQueryTypeInclusion"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityName"), ) )
if mibBuilder.loadTexts: ltmDnsSecurityGroup.setDescription("A collection of objects of ltmDnsSecurity MIB.")
ltmDnsSecurityStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 121)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatAnyDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatSrvDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatFilteredDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatMxDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatAaaaDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatSoaDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatPtrDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatADrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatTxtDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatOtherDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatNsDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatCnameDrops"), ) )
if mibBuilder.loadTexts: ltmDnsSecurityStatGroup.setDescription("A collection of objects of ltmDnsSecurityStat MIB.")
ltmBwcPolicyStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 122)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesPerSecOut"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatTotalPolicies"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatInactivePolicies"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesPassed"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatTimeDataCollected"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatPacketsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatPacketsPassed"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesDropped"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatActivePolicies"), ) )
if mibBuilder.loadTexts: ltmBwcPolicyStatGroup.setDescription("A collection of objects of ltmBwcPolicyStat MIB.")
ltmDnsQueryFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 123)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterType"), ) )
if mibBuilder.loadTexts: ltmDnsQueryFilterGroup.setDescription("A collection of objects of ltmDnsQueryFilter MIB.")
ltmDnsHeaderFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 124)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterOpcodeExclusion"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterIndex"), ) )
if mibBuilder.loadTexts: ltmDnsHeaderFilterGroup.setDescription("A collection of objects of ltmDnsHeaderFilter MIB.")
ltmLsnPrefixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 125)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixName"), ) )
if mibBuilder.loadTexts: ltmLsnPrefixGroup.setDescription("A collection of objects of ltmLsnPrefix MIB.")
ltmLsnPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 126)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolMemberCount"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolTranslationPortRangeHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolPersistenceTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolClientConnectionLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolLogPublisher"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolIcmpEcho"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolPersistenceMode"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolRouteAdvertisement"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolMode"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolInboundConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolHairpinMode"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolPersistencePrefixLengthIpv6"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolTranslationPortRangeLow"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolPersistencePrefixLengthIpv4"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolEgressInterfacesEnabled"), ) )
if mibBuilder.loadTexts: ltmLsnPoolGroup.setDescription("A collection of objects of ltmLsnPool MIB.")
ltmLsnPrefixLsnPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 127)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolLsnPrefixName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolPrefixAddress"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolPrefixAddressType"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolLsnPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolNumber"), ) )
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolGroup.setDescription("A collection of objects of ltmLsnPrefixLsnPool MIB.")
ltmLsnPrefixLsnPoolBackupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 128)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupLsnPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupPrefixAddressType"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupLsnPrefixName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupPrefixAddress"), ) )
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupGroup.setDescription("A collection of objects of ltmLsnPrefixLsnPoolBackup MIB.")
ltmLsnPoolVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 129)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanLsnPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanVlanName"), ) )
if mibBuilder.loadTexts: ltmLsnPoolVlanGroup.setDescription("A collection of objects of ltmLsnPoolVlan MIB.")
ltmLsnPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 130)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatLogAttempts"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTranslationRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatHairpinConnectionRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatActiveTranslations"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatHairpinConnectionFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatActiveHairpinConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPersistenceMappingFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatLogFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTranslationRequestFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatBackupPoolTranslations"), ) )
if mibBuilder.loadTexts: ltmLsnPoolStatGroup.setDescription("A collection of objects of ltmLsnPoolStat MIB.")
ltmSpdyProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 131)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileWriteSize"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileConcurrentStreamsPerConnection"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileInsertHeaderName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileCompressionWindowSize"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileConnectionIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileReceiveWindow"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfilePriorityHandling"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileCompressionLevel"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileFrameSize"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileInsertHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileActivationMode"), ) )
if mibBuilder.loadTexts: ltmSpdyProfileGroup.setDescription("A collection of objects of ltmSpdyProfile MIB.")
ltmSpdyProfileProtocolVersionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 132)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsProtocolVersions"), ) )
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsGroup.setDescription("A collection of objects of ltmSpdyProfileProtocolVersions MIB.")
ltmSpdyProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 133)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV2StreamsCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV3StreamsCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatNoopFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatDataFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatHeadersFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatWindowUpdateFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSynReplyFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatConnectionsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSynStreamFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatNoopFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatFlowsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatFlowsCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSpdyRequestBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatFlowsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSynReplyFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSettingsFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV2StreamsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSynStreamFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatHttpRequestBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSpdyResponseBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatGoawayFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSettingsFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatConnectionsAccepted"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatRstStreamFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatPingFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatPingFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSpdyResponseFrames"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSpdyRequestFrames"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatDataFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV2StreamsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatGoawayFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatRstStreamFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV3StreamsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatConnectionsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV3StreamsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatHttpResponseBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatWindowUpdateFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatHeadersFramesSent"), ) )
if mibBuilder.loadTexts: ltmSpdyProfileStatGroup.setDescription("A collection of objects of ltmSpdyProfileStat MIB.")

# Compliances

bigipLocalTMCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3375, 2, 5, 1, 2)).setObjects(*(("F5-BIGIP-LOCAL-MIB", "bigipLocalTMGroups"), ) )
if mibBuilder.loadTexts: bigipLocalTMCompliance.setDescription("This specifies the objects that are required to claim \ncompliance to F5 Traffic Management System.")

# Exports

# Module identity
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", PYSNMP_MODULE_ID=bigipLocalTM)

# Objects
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", bigipLocalTM=bigipLocalTM, ltmGlobals=ltmGlobals, ltmGlobalAttr=ltmGlobalAttr, ltmAttrLbmodeFastestMaxIdleTime=ltmAttrLbmodeFastestMaxIdleTime, ltmAttrMirrorState=ltmAttrMirrorState, ltmAttrPersistDestAddrLimitMode=ltmAttrPersistDestAddrLimitMode, ltmAttrPersistDestAddrMaxCount=ltmAttrPersistDestAddrMaxCount, ltmAttrSnatAnyIpProtocol=ltmAttrSnatAnyIpProtocol, ltmAttrMirrorPeerIpAddr=ltmAttrMirrorPeerIpAddr, ltmMirrors=ltmMirrors, ltmMirrorPort=ltmMirrorPort, ltmMirrorPortNumber=ltmMirrorPortNumber, ltmMirrorPortTable=ltmMirrorPortTable, ltmMirrorPortEntry=ltmMirrorPortEntry, ltmMirrorPortName=ltmMirrorPortName, ltmMirrorPortMember=ltmMirrorPortMember, ltmMirrorPortMemberNumber=ltmMirrorPortMemberNumber, ltmMirrorPortMemberTable=ltmMirrorPortMemberTable, ltmMirrorPortMemberEntry=ltmMirrorPortMemberEntry, ltmMirrorPortMemberToName=ltmMirrorPortMemberToName, ltmMirrorPortMemberName=ltmMirrorPortMemberName, ltmMirrorPortMemberConduitName=ltmMirrorPortMemberConduitName, ltmNATs=ltmNATs, ltmNat=ltmNat, ltmNatNumber=ltmNatNumber, ltmNatTable=ltmNatTable, ltmNatEntry=ltmNatEntry, ltmNatTransAddrType=ltmNatTransAddrType, ltmNatTransAddr=ltmNatTransAddr, ltmNatOrigAddrType=ltmNatOrigAddrType, ltmNatOrigAddr=ltmNatOrigAddr, ltmNatEnabled=ltmNatEnabled, ltmNatArpEnabled=ltmNatArpEnabled, ltmNatUnitId=ltmNatUnitId, ltmNatListedEnabledVlans=ltmNatListedEnabledVlans, ltmNatName=ltmNatName, ltmNatStat=ltmNatStat, ltmNatStatResetStats=ltmNatStatResetStats, ltmNatStatNumber=ltmNatStatNumber, ltmNatStatTable=ltmNatStatTable, ltmNatStatEntry=ltmNatStatEntry, ltmNatStatTransAddrType=ltmNatStatTransAddrType, ltmNatStatTransAddr=ltmNatStatTransAddr, ltmNatStatServerPktsIn=ltmNatStatServerPktsIn, ltmNatStatServerBytesIn=ltmNatStatServerBytesIn, ltmNatStatServerPktsOut=ltmNatStatServerPktsOut, ltmNatStatServerBytesOut=ltmNatStatServerBytesOut, ltmNatStatServerMaxConns=ltmNatStatServerMaxConns, ltmNatStatServerTotConns=ltmNatStatServerTotConns, ltmNatStatServerCurConns=ltmNatStatServerCurConns, ltmNatStatName=ltmNatStatName, ltmNatVlan=ltmNatVlan, ltmNatVlanNumber=ltmNatVlanNumber, ltmNatVlanTable=ltmNatVlanTable, ltmNatVlanEntry=ltmNatVlanEntry, ltmNatVlanTransAddrType=ltmNatVlanTransAddrType, ltmNatVlanTransAddr=ltmNatVlanTransAddr, ltmNatVlanVlanName=ltmNatVlanVlanName, ltmNatVlanNatName=ltmNatVlanNatName, ltmNodes=ltmNodes, ltmNodeAddr=ltmNodeAddr, ltmNodeAddrNumber=ltmNodeAddrNumber, ltmNodeAddrTable=ltmNodeAddrTable, ltmNodeAddrEntry=ltmNodeAddrEntry, ltmNodeAddrAddrType=ltmNodeAddrAddrType, ltmNodeAddrAddr=ltmNodeAddrAddr, ltmNodeAddrConnLimit=ltmNodeAddrConnLimit, ltmNodeAddrRatio=ltmNodeAddrRatio, ltmNodeAddrDynamicRatio=ltmNodeAddrDynamicRatio, ltmNodeAddrMonitorState=ltmNodeAddrMonitorState, ltmNodeAddrMonitorStatus=ltmNodeAddrMonitorStatus, ltmNodeAddrMonitorRule=ltmNodeAddrMonitorRule, ltmNodeAddrNewSessionEnable=ltmNodeAddrNewSessionEnable, ltmNodeAddrSessionStatus=ltmNodeAddrSessionStatus, ltmNodeAddrPoolMemberRefCount=ltmNodeAddrPoolMemberRefCount, ltmNodeAddrScreenName=ltmNodeAddrScreenName, ltmNodeAddrAvailabilityState=ltmNodeAddrAvailabilityState, ltmNodeAddrEnabledState=ltmNodeAddrEnabledState, ltmNodeAddrDisabledParentType=ltmNodeAddrDisabledParentType, ltmNodeAddrStatusReason=ltmNodeAddrStatusReason, ltmNodeAddrName=ltmNodeAddrName, ltmNodeAddrStat=ltmNodeAddrStat, ltmNodeAddrStatResetStats=ltmNodeAddrStatResetStats, ltmNodeAddrStatNumber=ltmNodeAddrStatNumber, ltmNodeAddrStatTable=ltmNodeAddrStatTable, ltmNodeAddrStatEntry=ltmNodeAddrStatEntry, ltmNodeAddrStatAddrType=ltmNodeAddrStatAddrType, ltmNodeAddrStatAddr=ltmNodeAddrStatAddr, ltmNodeAddrStatServerPktsIn=ltmNodeAddrStatServerPktsIn, ltmNodeAddrStatServerBytesIn=ltmNodeAddrStatServerBytesIn, ltmNodeAddrStatServerPktsOut=ltmNodeAddrStatServerPktsOut, ltmNodeAddrStatServerBytesOut=ltmNodeAddrStatServerBytesOut, ltmNodeAddrStatServerMaxConns=ltmNodeAddrStatServerMaxConns, ltmNodeAddrStatServerTotConns=ltmNodeAddrStatServerTotConns, ltmNodeAddrStatServerCurConns=ltmNodeAddrStatServerCurConns, ltmNodeAddrStatPvaPktsIn=ltmNodeAddrStatPvaPktsIn, ltmNodeAddrStatPvaBytesIn=ltmNodeAddrStatPvaBytesIn, ltmNodeAddrStatPvaPktsOut=ltmNodeAddrStatPvaPktsOut, ltmNodeAddrStatPvaBytesOut=ltmNodeAddrStatPvaBytesOut, ltmNodeAddrStatPvaMaxConns=ltmNodeAddrStatPvaMaxConns, ltmNodeAddrStatPvaTotConns=ltmNodeAddrStatPvaTotConns, ltmNodeAddrStatPvaCurConns=ltmNodeAddrStatPvaCurConns, ltmNodeAddrStatTotRequests=ltmNodeAddrStatTotRequests, ltmNodeAddrStatTotPvaAssistConn=ltmNodeAddrStatTotPvaAssistConn, ltmNodeAddrStatCurrPvaAssistConn=ltmNodeAddrStatCurrPvaAssistConn, ltmNodeAddrStatNodeName=ltmNodeAddrStatNodeName, ltmNodeAddrStatCurSessions=ltmNodeAddrStatCurSessions, ltmNodeAddrStatCurrentConnsPerSec=ltmNodeAddrStatCurrentConnsPerSec, ltmNodeAddrStatDurationRateExceeded=ltmNodeAddrStatDurationRateExceeded, ltmNodeAddrStatus=ltmNodeAddrStatus, ltmNodeAddrStatusNumber=ltmNodeAddrStatusNumber, ltmNodeAddrStatusTable=ltmNodeAddrStatusTable, ltmNodeAddrStatusEntry=ltmNodeAddrStatusEntry, ltmNodeAddrStatusAddrType=ltmNodeAddrStatusAddrType, ltmNodeAddrStatusAddr=ltmNodeAddrStatusAddr, ltmNodeAddrStatusAvailState=ltmNodeAddrStatusAvailState, ltmNodeAddrStatusEnabledState=ltmNodeAddrStatusEnabledState, ltmNodeAddrStatusParentType=ltmNodeAddrStatusParentType, ltmNodeAddrStatusDetailReason=ltmNodeAddrStatusDetailReason, ltmNodeAddrStatusName=ltmNodeAddrStatusName, ltmPools=ltmPools, ltmPool=ltmPool, ltmPoolNumber=ltmPoolNumber, ltmPoolTable=ltmPoolTable, ltmPoolEntry=ltmPoolEntry, ltmPoolName=ltmPoolName)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmPoolLbMode=ltmPoolLbMode, ltmPoolActionOnServiceDown=ltmPoolActionOnServiceDown, ltmPoolMinUpMembers=ltmPoolMinUpMembers, ltmPoolMinUpMembersEnable=ltmPoolMinUpMembersEnable, ltmPoolMinUpMemberAction=ltmPoolMinUpMemberAction, ltmPoolMinActiveMembers=ltmPoolMinActiveMembers, ltmPoolActiveMemberCnt=ltmPoolActiveMemberCnt, ltmPoolDisallowSnat=ltmPoolDisallowSnat, ltmPoolDisallowNat=ltmPoolDisallowNat, ltmPoolSimpleTimeout=ltmPoolSimpleTimeout, ltmPoolIpTosToClient=ltmPoolIpTosToClient, ltmPoolIpTosToServer=ltmPoolIpTosToServer, ltmPoolLinkQosToClient=ltmPoolLinkQosToClient, ltmPoolLinkQosToServer=ltmPoolLinkQosToServer, ltmPoolDynamicRatioSum=ltmPoolDynamicRatioSum, ltmPoolMonitorRule=ltmPoolMonitorRule, ltmPoolAvailabilityState=ltmPoolAvailabilityState, ltmPoolEnabledState=ltmPoolEnabledState, ltmPoolDisabledParentType=ltmPoolDisabledParentType, ltmPoolStatusReason=ltmPoolStatusReason, ltmPoolSlowRampTime=ltmPoolSlowRampTime, ltmPoolMemberCnt=ltmPoolMemberCnt, ltmPoolQueueOnConnectionLimit=ltmPoolQueueOnConnectionLimit, ltmPoolQueueDepthLimit=ltmPoolQueueDepthLimit, ltmPoolQueueTimeLimit=ltmPoolQueueTimeLimit, ltmPoolStat=ltmPoolStat, ltmPoolStatResetStats=ltmPoolStatResetStats, ltmPoolStatNumber=ltmPoolStatNumber, ltmPoolStatTable=ltmPoolStatTable, ltmPoolStatEntry=ltmPoolStatEntry, ltmPoolStatName=ltmPoolStatName, ltmPoolStatServerPktsIn=ltmPoolStatServerPktsIn, ltmPoolStatServerBytesIn=ltmPoolStatServerBytesIn, ltmPoolStatServerPktsOut=ltmPoolStatServerPktsOut, ltmPoolStatServerBytesOut=ltmPoolStatServerBytesOut, ltmPoolStatServerMaxConns=ltmPoolStatServerMaxConns, ltmPoolStatServerTotConns=ltmPoolStatServerTotConns, ltmPoolStatServerCurConns=ltmPoolStatServerCurConns, ltmPoolStatPvaPktsIn=ltmPoolStatPvaPktsIn, ltmPoolStatPvaBytesIn=ltmPoolStatPvaBytesIn, ltmPoolStatPvaPktsOut=ltmPoolStatPvaPktsOut, ltmPoolStatPvaBytesOut=ltmPoolStatPvaBytesOut, ltmPoolStatPvaMaxConns=ltmPoolStatPvaMaxConns, ltmPoolStatPvaTotConns=ltmPoolStatPvaTotConns, ltmPoolStatPvaCurConns=ltmPoolStatPvaCurConns, ltmPoolStatTotPvaAssistConn=ltmPoolStatTotPvaAssistConn, ltmPoolStatCurrPvaAssistConn=ltmPoolStatCurrPvaAssistConn, ltmPoolStatConnqDepth=ltmPoolStatConnqDepth, ltmPoolStatConnqAgeHead=ltmPoolStatConnqAgeHead, ltmPoolStatConnqAgeMax=ltmPoolStatConnqAgeMax, ltmPoolStatConnqAgeEma=ltmPoolStatConnqAgeEma, ltmPoolStatConnqAgeEdm=ltmPoolStatConnqAgeEdm, ltmPoolStatConnqServiced=ltmPoolStatConnqServiced, ltmPoolStatConnqAllDepth=ltmPoolStatConnqAllDepth, ltmPoolStatConnqAllAgeHead=ltmPoolStatConnqAllAgeHead, ltmPoolStatConnqAllAgeMax=ltmPoolStatConnqAllAgeMax, ltmPoolStatConnqAllAgeEma=ltmPoolStatConnqAllAgeEma, ltmPoolStatConnqAllAgeEdm=ltmPoolStatConnqAllAgeEdm, ltmPoolStatConnqAllServiced=ltmPoolStatConnqAllServiced, ltmPoolStatTotRequests=ltmPoolStatTotRequests, ltmPoolStatCurSessions=ltmPoolStatCurSessions, ltmPoolMember=ltmPoolMember, ltmPoolMemberNumber=ltmPoolMemberNumber, ltmPoolMemberTable=ltmPoolMemberTable, ltmPoolMemberEntry=ltmPoolMemberEntry, ltmPoolMemberPoolName=ltmPoolMemberPoolName, ltmPoolMemberAddrType=ltmPoolMemberAddrType, ltmPoolMemberAddr=ltmPoolMemberAddr, ltmPoolMemberPort=ltmPoolMemberPort, ltmPoolMemberConnLimit=ltmPoolMemberConnLimit, ltmPoolMemberRatio=ltmPoolMemberRatio, ltmPoolMemberWeight=ltmPoolMemberWeight, ltmPoolMemberPriority=ltmPoolMemberPriority, ltmPoolMemberDynamicRatio=ltmPoolMemberDynamicRatio, ltmPoolMemberMonitorState=ltmPoolMemberMonitorState, ltmPoolMemberMonitorStatus=ltmPoolMemberMonitorStatus, ltmPoolMemberNewSessionEnable=ltmPoolMemberNewSessionEnable, ltmPoolMemberSessionStatus=ltmPoolMemberSessionStatus, ltmPoolMemberMonitorRule=ltmPoolMemberMonitorRule, ltmPoolMemberAvailabilityState=ltmPoolMemberAvailabilityState, ltmPoolMemberEnabledState=ltmPoolMemberEnabledState, ltmPoolMemberDisabledParentType=ltmPoolMemberDisabledParentType, ltmPoolMemberStatusReason=ltmPoolMemberStatusReason, ltmPoolMemberNodeName=ltmPoolMemberNodeName, ltmPoolMemberStat=ltmPoolMemberStat, ltmPoolMemberStatResetStats=ltmPoolMemberStatResetStats, ltmPoolMemberStatNumber=ltmPoolMemberStatNumber, ltmPoolMemberStatTable=ltmPoolMemberStatTable, ltmPoolMemberStatEntry=ltmPoolMemberStatEntry, ltmPoolMemberStatPoolName=ltmPoolMemberStatPoolName, ltmPoolMemberStatAddrType=ltmPoolMemberStatAddrType, ltmPoolMemberStatAddr=ltmPoolMemberStatAddr, ltmPoolMemberStatPort=ltmPoolMemberStatPort, ltmPoolMemberStatServerPktsIn=ltmPoolMemberStatServerPktsIn, ltmPoolMemberStatServerBytesIn=ltmPoolMemberStatServerBytesIn, ltmPoolMemberStatServerPktsOut=ltmPoolMemberStatServerPktsOut, ltmPoolMemberStatServerBytesOut=ltmPoolMemberStatServerBytesOut, ltmPoolMemberStatServerMaxConns=ltmPoolMemberStatServerMaxConns, ltmPoolMemberStatServerTotConns=ltmPoolMemberStatServerTotConns, ltmPoolMemberStatServerCurConns=ltmPoolMemberStatServerCurConns, ltmPoolMemberStatPvaPktsIn=ltmPoolMemberStatPvaPktsIn, ltmPoolMemberStatPvaBytesIn=ltmPoolMemberStatPvaBytesIn, ltmPoolMemberStatPvaPktsOut=ltmPoolMemberStatPvaPktsOut, ltmPoolMemberStatPvaBytesOut=ltmPoolMemberStatPvaBytesOut, ltmPoolMemberStatPvaMaxConns=ltmPoolMemberStatPvaMaxConns, ltmPoolMemberStatPvaTotConns=ltmPoolMemberStatPvaTotConns, ltmPoolMemberStatPvaCurConns=ltmPoolMemberStatPvaCurConns, ltmPoolMemberStatTotRequests=ltmPoolMemberStatTotRequests, ltmPoolMemberStatTotPvaAssistConn=ltmPoolMemberStatTotPvaAssistConn, ltmPoolMemberStatCurrPvaAssistConn=ltmPoolMemberStatCurrPvaAssistConn, ltmPoolMemberStatConnqDepth=ltmPoolMemberStatConnqDepth, ltmPoolMemberStatConnqAgeHead=ltmPoolMemberStatConnqAgeHead, ltmPoolMemberStatConnqAgeMax=ltmPoolMemberStatConnqAgeMax, ltmPoolMemberStatConnqAgeEma=ltmPoolMemberStatConnqAgeEma, ltmPoolMemberStatConnqAgeEdm=ltmPoolMemberStatConnqAgeEdm, ltmPoolMemberStatConnqServiced=ltmPoolMemberStatConnqServiced, ltmPoolMemberStatNodeName=ltmPoolMemberStatNodeName, ltmPoolMemberStatCurSessions=ltmPoolMemberStatCurSessions, ltmPoolMemberStatCurrentConnsPerSec=ltmPoolMemberStatCurrentConnsPerSec, ltmPoolMemberStatDurationRateExceeded=ltmPoolMemberStatDurationRateExceeded, ltmPoolStatus=ltmPoolStatus, ltmPoolStatusNumber=ltmPoolStatusNumber, ltmPoolStatusTable=ltmPoolStatusTable, ltmPoolStatusEntry=ltmPoolStatusEntry, ltmPoolStatusName=ltmPoolStatusName, ltmPoolStatusAvailState=ltmPoolStatusAvailState, ltmPoolStatusEnabledState=ltmPoolStatusEnabledState)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmPoolStatusParentType=ltmPoolStatusParentType, ltmPoolStatusDetailReason=ltmPoolStatusDetailReason, ltmPoolMemberStatus=ltmPoolMemberStatus, ltmPoolMbrStatusNumber=ltmPoolMbrStatusNumber, ltmPoolMbrStatusTable=ltmPoolMbrStatusTable, ltmPoolMbrStatusEntry=ltmPoolMbrStatusEntry, ltmPoolMbrStatusPoolName=ltmPoolMbrStatusPoolName, ltmPoolMbrStatusAddrType=ltmPoolMbrStatusAddrType, ltmPoolMbrStatusAddr=ltmPoolMbrStatusAddr, ltmPoolMbrStatusPort=ltmPoolMbrStatusPort, ltmPoolMbrStatusAvailState=ltmPoolMbrStatusAvailState, ltmPoolMbrStatusEnabledState=ltmPoolMbrStatusEnabledState, ltmPoolMbrStatusParentType=ltmPoolMbrStatusParentType, ltmPoolMbrStatusDetailReason=ltmPoolMbrStatusDetailReason, ltmPoolMbrStatusNodeName=ltmPoolMbrStatusNodeName, ltmProfiles=ltmProfiles, ltmAuth=ltmAuth, ltmAuthProfile=ltmAuthProfile, ltmAuthProfileNumber=ltmAuthProfileNumber, ltmAuthProfileTable=ltmAuthProfileTable, ltmAuthProfileEntry=ltmAuthProfileEntry, ltmAuthProfileName=ltmAuthProfileName, ltmAuthProfileConfigSource=ltmAuthProfileConfigSource, ltmAuthProfileDefaultName=ltmAuthProfileDefaultName, ltmAuthProfileConfigName=ltmAuthProfileConfigName, ltmAuthProfileType=ltmAuthProfileType, ltmAuthProfileMode=ltmAuthProfileMode, ltmAuthProfileCredentialSource=ltmAuthProfileCredentialSource, ltmAuthProfileRuleName=ltmAuthProfileRuleName, ltmAuthProfileIdleTimeout=ltmAuthProfileIdleTimeout, ltmAuthProfileStat=ltmAuthProfileStat, ltmAuthProfileStatResetStats=ltmAuthProfileStatResetStats, ltmAuthProfileStatNumber=ltmAuthProfileStatNumber, ltmAuthProfileStatTable=ltmAuthProfileStatTable, ltmAuthProfileStatEntry=ltmAuthProfileStatEntry, ltmAuthProfileStatName=ltmAuthProfileStatName, ltmAuthProfileStatTotSessions=ltmAuthProfileStatTotSessions, ltmAuthProfileStatCurSessions=ltmAuthProfileStatCurSessions, ltmAuthProfileStatMaxSessions=ltmAuthProfileStatMaxSessions, ltmAuthProfileStatSuccessResults=ltmAuthProfileStatSuccessResults, ltmAuthProfileStatFailureResults=ltmAuthProfileStatFailureResults, ltmAuthProfileStatWantcredentialResults=ltmAuthProfileStatWantcredentialResults, ltmAuthProfileStatErrorResults=ltmAuthProfileStatErrorResults, ltmClientSsl=ltmClientSsl, ltmClientSslProfile=ltmClientSslProfile, ltmClientSslNumber=ltmClientSslNumber, ltmClientSslTable=ltmClientSslTable, ltmClientSslEntry=ltmClientSslEntry, ltmClientSslName=ltmClientSslName, ltmClientSslConfigSource=ltmClientSslConfigSource, ltmClientSslDefaultName=ltmClientSslDefaultName, ltmClientSslMode=ltmClientSslMode, ltmClientSslKey=ltmClientSslKey, ltmClientSslCert=ltmClientSslCert, ltmClientSslChain=ltmClientSslChain, ltmClientSslCafile=ltmClientSslCafile, ltmClientSslCrlfile=ltmClientSslCrlfile, ltmClientSslClientcertca=ltmClientSslClientcertca, ltmClientSslCiphers=ltmClientSslCiphers, ltmClientSslPassphrase=ltmClientSslPassphrase, ltmClientSslOptions=ltmClientSslOptions, ltmClientSslModsslmethods=ltmClientSslModsslmethods, ltmClientSslCacheSize=ltmClientSslCacheSize, ltmClientSslCacheTimeout=ltmClientSslCacheTimeout, ltmClientSslRenegotiatePeriod=ltmClientSslRenegotiatePeriod, ltmClientSslRenegotiateSize=ltmClientSslRenegotiateSize, ltmClientSslRenegotiateMaxRecordDelay=ltmClientSslRenegotiateMaxRecordDelay, ltmClientSslHandshakeTimeout=ltmClientSslHandshakeTimeout, ltmClientSslAlertTimeout=ltmClientSslAlertTimeout, ltmClientSslPeerCertMode=ltmClientSslPeerCertMode, ltmClientSslAuthenticateOnce=ltmClientSslAuthenticateOnce, ltmClientSslAuthenticateDepth=ltmClientSslAuthenticateDepth, ltmClientSslUncleanShutdown=ltmClientSslUncleanShutdown, ltmClientSslStrictResume=ltmClientSslStrictResume, ltmClientSslAllowNonssl=ltmClientSslAllowNonssl, ltmClientSslSessionTicket=ltmClientSslSessionTicket, ltmClientSslFwdpEnabled=ltmClientSslFwdpEnabled, ltmClientSslFwdpCaKey=ltmClientSslFwdpCaKey, ltmClientSslFwdpCaCert=ltmClientSslFwdpCaCert, ltmClientSslFwdpCaPassphrase=ltmClientSslFwdpCaPassphrase, ltmClientSslFwdpCertLifespan=ltmClientSslFwdpCertLifespan, ltmClientSslFwdpCertExtensionIncludes=ltmClientSslFwdpCertExtensionIncludes, ltmClientSslFwdpLookupByIpaddrPort=ltmClientSslFwdpLookupByIpaddrPort, ltmClientSslProfileStat=ltmClientSslProfileStat, ltmClientSslStatResetStats=ltmClientSslStatResetStats, ltmClientSslStatNumber=ltmClientSslStatNumber, ltmClientSslStatTable=ltmClientSslStatTable, ltmClientSslStatEntry=ltmClientSslStatEntry, ltmClientSslStatName=ltmClientSslStatName, ltmClientSslStatCurConns=ltmClientSslStatCurConns, ltmClientSslStatMaxConns=ltmClientSslStatMaxConns, ltmClientSslStatCurNativeConns=ltmClientSslStatCurNativeConns, ltmClientSslStatMaxNativeConns=ltmClientSslStatMaxNativeConns, ltmClientSslStatTotNativeConns=ltmClientSslStatTotNativeConns, ltmClientSslStatCurCompatConns=ltmClientSslStatCurCompatConns, ltmClientSslStatMaxCompatConns=ltmClientSslStatMaxCompatConns, ltmClientSslStatTotCompatConns=ltmClientSslStatTotCompatConns, ltmClientSslStatEncryptedBytesIn=ltmClientSslStatEncryptedBytesIn, ltmClientSslStatEncryptedBytesOut=ltmClientSslStatEncryptedBytesOut, ltmClientSslStatDecryptedBytesIn=ltmClientSslStatDecryptedBytesIn, ltmClientSslStatDecryptedBytesOut=ltmClientSslStatDecryptedBytesOut, ltmClientSslStatRecordsIn=ltmClientSslStatRecordsIn, ltmClientSslStatRecordsOut=ltmClientSslStatRecordsOut, ltmClientSslStatFullyHwAcceleratedConns=ltmClientSslStatFullyHwAcceleratedConns, ltmClientSslStatPartiallyHwAcceleratedConns=ltmClientSslStatPartiallyHwAcceleratedConns, ltmClientSslStatNonHwAcceleratedConns=ltmClientSslStatNonHwAcceleratedConns, ltmClientSslStatPrematureDisconnects=ltmClientSslStatPrematureDisconnects, ltmClientSslStatMidstreamRenegotiations=ltmClientSslStatMidstreamRenegotiations, ltmClientSslStatSessCacheCurEntries=ltmClientSslStatSessCacheCurEntries, ltmClientSslStatSessCacheHits=ltmClientSslStatSessCacheHits, ltmClientSslStatSessCacheLookups=ltmClientSslStatSessCacheLookups, ltmClientSslStatSessCacheOverflows=ltmClientSslStatSessCacheOverflows, ltmClientSslStatSessCacheInvalidations=ltmClientSslStatSessCacheInvalidations, ltmClientSslStatPeercertValid=ltmClientSslStatPeercertValid, ltmClientSslStatPeercertInvalid=ltmClientSslStatPeercertInvalid, ltmClientSslStatPeercertNone=ltmClientSslStatPeercertNone, ltmClientSslStatHandshakeFailures=ltmClientSslStatHandshakeFailures, ltmClientSslStatBadRecords=ltmClientSslStatBadRecords, ltmClientSslStatFatalAlerts=ltmClientSslStatFatalAlerts, ltmClientSslStatSslv2=ltmClientSslStatSslv2, ltmClientSslStatSslv3=ltmClientSslStatSslv3, ltmClientSslStatTlsv1=ltmClientSslStatTlsv1, ltmClientSslStatAdhKeyxchg=ltmClientSslStatAdhKeyxchg, ltmClientSslStatDhDssKeyxchg=ltmClientSslStatDhDssKeyxchg, ltmClientSslStatDhRsaKeyxchg=ltmClientSslStatDhRsaKeyxchg, ltmClientSslStatDssKeyxchg=ltmClientSslStatDssKeyxchg, ltmClientSslStatEdhDssKeyxchg=ltmClientSslStatEdhDssKeyxchg)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmClientSslStatRsaKeyxchg=ltmClientSslStatRsaKeyxchg, ltmClientSslStatNullBulk=ltmClientSslStatNullBulk, ltmClientSslStatAesBulk=ltmClientSslStatAesBulk, ltmClientSslStatDesBulk=ltmClientSslStatDesBulk, ltmClientSslStatIdeaBulk=ltmClientSslStatIdeaBulk, ltmClientSslStatRc2Bulk=ltmClientSslStatRc2Bulk, ltmClientSslStatRc4Bulk=ltmClientSslStatRc4Bulk, ltmClientSslStatNullDigest=ltmClientSslStatNullDigest, ltmClientSslStatMd5Digest=ltmClientSslStatMd5Digest, ltmClientSslStatShaDigest=ltmClientSslStatShaDigest, ltmClientSslStatNotssl=ltmClientSslStatNotssl, ltmClientSslStatEdhRsaKeyxchg=ltmClientSslStatEdhRsaKeyxchg, ltmClientSslStatSecureHandshakes=ltmClientSslStatSecureHandshakes, ltmClientSslStatInsecureHandshakeAccepts=ltmClientSslStatInsecureHandshakeAccepts, ltmClientSslStatInsecureHandshakeRejects=ltmClientSslStatInsecureHandshakeRejects, ltmClientSslStatInsecureRenegotiationRejects=ltmClientSslStatInsecureRenegotiationRejects, ltmClientSslStatSniRejects=ltmClientSslStatSniRejects, ltmClientSslStatTlsv11=ltmClientSslStatTlsv11, ltmClientSslStatTlsv12=ltmClientSslStatTlsv12, ltmClientSslStatDtlsv1=ltmClientSslStatDtlsv1, ltmClientSslStatReused=ltmClientSslStatReused, ltmClientSslStatReuseFailed=ltmClientSslStatReuseFailed, ltmClientSslStatEcdheRsaKeyxchg=ltmClientSslStatEcdheRsaKeyxchg, ltmClientSslStatConns=ltmClientSslStatConns, ltmClientSslStatCachedCerts=ltmClientSslStatCachedCerts, ltmServerSsl=ltmServerSsl, ltmServerSslProfile=ltmServerSslProfile, ltmServerSslNumber=ltmServerSslNumber, ltmServerSslTable=ltmServerSslTable, ltmServerSslEntry=ltmServerSslEntry, ltmServerSslName=ltmServerSslName, ltmServerSslConfigSource=ltmServerSslConfigSource, ltmServerSslDefaultName=ltmServerSslDefaultName, ltmServerSslMode=ltmServerSslMode, ltmServerSslKey=ltmServerSslKey, ltmServerSslCert=ltmServerSslCert, ltmServerSslChain=ltmServerSslChain, ltmServerSslCafile=ltmServerSslCafile, ltmServerSslCrlfile=ltmServerSslCrlfile, ltmServerSslCiphers=ltmServerSslCiphers, ltmServerSslPassphrase=ltmServerSslPassphrase, ltmServerSslOptions=ltmServerSslOptions, ltmServerSslModsslmethods=ltmServerSslModsslmethods, ltmServerSslRenegotiatePeriod=ltmServerSslRenegotiatePeriod, ltmServerSslRenegotiateSize=ltmServerSslRenegotiateSize, ltmServerSslPeerCertMode=ltmServerSslPeerCertMode, ltmServerSslAuthenticateOnce=ltmServerSslAuthenticateOnce, ltmServerSslAuthenticateDepth=ltmServerSslAuthenticateDepth, ltmServerSslAuthenticateName=ltmServerSslAuthenticateName, ltmServerSslUncleanShutdown=ltmServerSslUncleanShutdown, ltmServerSslStrictResume=ltmServerSslStrictResume, ltmServerSslHandshakeTimeout=ltmServerSslHandshakeTimeout, ltmServerSslAlertTimeout=ltmServerSslAlertTimeout, ltmServerSslCacheSize=ltmServerSslCacheSize, ltmServerSslCacheTimeout=ltmServerSslCacheTimeout, ltmServerSslSessionTicket=ltmServerSslSessionTicket, ltmServerSslFwdpEnabled=ltmServerSslFwdpEnabled, ltmServerSslDropExpCert=ltmServerSslDropExpCert, ltmServerSslDropUntrustCa=ltmServerSslDropUntrustCa, ltmServerSslProfileStat=ltmServerSslProfileStat, ltmServerSslStatResetStats=ltmServerSslStatResetStats, ltmServerSslStatNumber=ltmServerSslStatNumber, ltmServerSslStatTable=ltmServerSslStatTable, ltmServerSslStatEntry=ltmServerSslStatEntry, ltmServerSslStatName=ltmServerSslStatName, ltmServerSslStatCurConns=ltmServerSslStatCurConns, ltmServerSslStatMaxConns=ltmServerSslStatMaxConns, ltmServerSslStatCurNativeConns=ltmServerSslStatCurNativeConns, ltmServerSslStatMaxNativeConns=ltmServerSslStatMaxNativeConns, ltmServerSslStatTotNativeConns=ltmServerSslStatTotNativeConns, ltmServerSslStatCurCompatConns=ltmServerSslStatCurCompatConns, ltmServerSslStatMaxCompatConns=ltmServerSslStatMaxCompatConns, ltmServerSslStatTotCompatConns=ltmServerSslStatTotCompatConns, ltmServerSslStatEncryptedBytesIn=ltmServerSslStatEncryptedBytesIn, ltmServerSslStatEncryptedBytesOut=ltmServerSslStatEncryptedBytesOut, ltmServerSslStatDecryptedBytesIn=ltmServerSslStatDecryptedBytesIn, ltmServerSslStatDecryptedBytesOut=ltmServerSslStatDecryptedBytesOut, ltmServerSslStatRecordsIn=ltmServerSslStatRecordsIn, ltmServerSslStatRecordsOut=ltmServerSslStatRecordsOut, ltmServerSslStatFullyHwAcceleratedConns=ltmServerSslStatFullyHwAcceleratedConns, ltmServerSslStatPartiallyHwAcceleratedConns=ltmServerSslStatPartiallyHwAcceleratedConns, ltmServerSslStatNonHwAcceleratedConns=ltmServerSslStatNonHwAcceleratedConns, ltmServerSslStatPrematureDisconnects=ltmServerSslStatPrematureDisconnects, ltmServerSslStatMidstreamRenegotiations=ltmServerSslStatMidstreamRenegotiations, ltmServerSslStatSessCacheCurEntries=ltmServerSslStatSessCacheCurEntries, ltmServerSslStatSessCacheHits=ltmServerSslStatSessCacheHits, ltmServerSslStatSessCacheLookups=ltmServerSslStatSessCacheLookups, ltmServerSslStatSessCacheOverflows=ltmServerSslStatSessCacheOverflows, ltmServerSslStatSessCacheInvalidations=ltmServerSslStatSessCacheInvalidations, ltmServerSslStatPeercertValid=ltmServerSslStatPeercertValid, ltmServerSslStatPeercertInvalid=ltmServerSslStatPeercertInvalid, ltmServerSslStatPeercertNone=ltmServerSslStatPeercertNone, ltmServerSslStatHandshakeFailures=ltmServerSslStatHandshakeFailures, ltmServerSslStatBadRecords=ltmServerSslStatBadRecords, ltmServerSslStatFatalAlerts=ltmServerSslStatFatalAlerts, ltmServerSslStatSslv2=ltmServerSslStatSslv2, ltmServerSslStatSslv3=ltmServerSslStatSslv3, ltmServerSslStatTlsv1=ltmServerSslStatTlsv1, ltmServerSslStatAdhKeyxchg=ltmServerSslStatAdhKeyxchg, ltmServerSslStatDhDssKeyxchg=ltmServerSslStatDhDssKeyxchg, ltmServerSslStatDhRsaKeyxchg=ltmServerSslStatDhRsaKeyxchg, ltmServerSslStatDssKeyxchg=ltmServerSslStatDssKeyxchg, ltmServerSslStatEdhDssKeyxchg=ltmServerSslStatEdhDssKeyxchg, ltmServerSslStatRsaKeyxchg=ltmServerSslStatRsaKeyxchg, ltmServerSslStatNullBulk=ltmServerSslStatNullBulk, ltmServerSslStatAesBulk=ltmServerSslStatAesBulk, ltmServerSslStatDesBulk=ltmServerSslStatDesBulk, ltmServerSslStatIdeaBulk=ltmServerSslStatIdeaBulk, ltmServerSslStatRc2Bulk=ltmServerSslStatRc2Bulk, ltmServerSslStatRc4Bulk=ltmServerSslStatRc4Bulk, ltmServerSslStatNullDigest=ltmServerSslStatNullDigest, ltmServerSslStatMd5Digest=ltmServerSslStatMd5Digest, ltmServerSslStatShaDigest=ltmServerSslStatShaDigest, ltmServerSslStatNotssl=ltmServerSslStatNotssl, ltmServerSslStatEdhRsaKeyxchg=ltmServerSslStatEdhRsaKeyxchg, ltmServerSslStatSecureHandshakes=ltmServerSslStatSecureHandshakes, ltmServerSslStatInsecureHandshakeAccepts=ltmServerSslStatInsecureHandshakeAccepts, ltmServerSslStatInsecureHandshakeRejects=ltmServerSslStatInsecureHandshakeRejects, ltmServerSslStatInsecureRenegotiationRejects=ltmServerSslStatInsecureRenegotiationRejects, ltmServerSslStatSniRejects=ltmServerSslStatSniRejects, ltmServerSslStatTlsv11=ltmServerSslStatTlsv11, ltmServerSslStatTlsv12=ltmServerSslStatTlsv12, ltmServerSslStatDtlsv1=ltmServerSslStatDtlsv1, ltmServerSslStatReused=ltmServerSslStatReused, ltmServerSslStatReuseFailed=ltmServerSslStatReuseFailed, ltmServerSslStatEcdheRsaKeyxchg=ltmServerSslStatEcdheRsaKeyxchg, ltmServerSslStatConns=ltmServerSslStatConns)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmConnPool=ltmConnPool, ltmConnPoolProfile=ltmConnPoolProfile, ltmConnPoolProfileNumber=ltmConnPoolProfileNumber, ltmConnPoolProfileTable=ltmConnPoolProfileTable, ltmConnPoolProfileEntry=ltmConnPoolProfileEntry, ltmConnPoolProfileName=ltmConnPoolProfileName, ltmConnPoolProfileConfigSource=ltmConnPoolProfileConfigSource, ltmConnPoolProfileDefaultName=ltmConnPoolProfileDefaultName, ltmConnPoolProfileSrcMaskType=ltmConnPoolProfileSrcMaskType, ltmConnPoolProfileSrcMask=ltmConnPoolProfileSrcMask, ltmConnPoolProfileMaxSize=ltmConnPoolProfileMaxSize, ltmConnPoolProfileMaxAge=ltmConnPoolProfileMaxAge, ltmConnPoolProfileMaxReuse=ltmConnPoolProfileMaxReuse, ltmConnPoolProfileIdleTimeout=ltmConnPoolProfileIdleTimeout, ltmConnPoolProfileStat=ltmConnPoolProfileStat, ltmConnPoolProfileStatResetStats=ltmConnPoolProfileStatResetStats, ltmConnPoolProfileStatNumber=ltmConnPoolProfileStatNumber, ltmConnPoolProfileStatTable=ltmConnPoolProfileStatTable, ltmConnPoolProfileStatEntry=ltmConnPoolProfileStatEntry, ltmConnPoolProfileStatName=ltmConnPoolProfileStatName, ltmConnPoolProfileStatCurSize=ltmConnPoolProfileStatCurSize, ltmConnPoolProfileStatMaxSize=ltmConnPoolProfileStatMaxSize, ltmConnPoolProfileStatReuses=ltmConnPoolProfileStatReuses, ltmConnPoolProfileStatConnects=ltmConnPoolProfileStatConnects, ltmFastL4=ltmFastL4, ltmFastL4Profile=ltmFastL4Profile, ltmFastL4ProfileNumber=ltmFastL4ProfileNumber, ltmFastL4ProfileTable=ltmFastL4ProfileTable, ltmFastL4ProfileEntry=ltmFastL4ProfileEntry, ltmFastL4ProfileName=ltmFastL4ProfileName, ltmFastL4ProfileConfigSource=ltmFastL4ProfileConfigSource, ltmFastL4ProfileDefaultName=ltmFastL4ProfileDefaultName, ltmFastL4ProfileResetOnTimeout=ltmFastL4ProfileResetOnTimeout, ltmFastL4ProfileIpFragReass=ltmFastL4ProfileIpFragReass, ltmFastL4ProfileIdleTimeout=ltmFastL4ProfileIdleTimeout, ltmFastL4ProfileTcpHandshakeTimeout=ltmFastL4ProfileTcpHandshakeTimeout, ltmFastL4ProfileMssOverride=ltmFastL4ProfileMssOverride, ltmFastL4ProfilePvaAccelMode=ltmFastL4ProfilePvaAccelMode, ltmFastL4ProfileTcpTimestampMode=ltmFastL4ProfileTcpTimestampMode, ltmFastL4ProfileTcpWscaleMode=ltmFastL4ProfileTcpWscaleMode, ltmFastL4ProfileTcpGenerateIsn=ltmFastL4ProfileTcpGenerateIsn, ltmFastL4ProfileTcpStripSack=ltmFastL4ProfileTcpStripSack, ltmFastL4ProfileIpTosToClient=ltmFastL4ProfileIpTosToClient, ltmFastL4ProfileIpTosToServer=ltmFastL4ProfileIpTosToServer, ltmFastL4ProfileLinkQosToClient=ltmFastL4ProfileLinkQosToClient, ltmFastL4ProfileLinkQosToServer=ltmFastL4ProfileLinkQosToServer, ltmFastL4ProfileRttFromClient=ltmFastL4ProfileRttFromClient, ltmFastL4ProfileRttFromServer=ltmFastL4ProfileRttFromServer, ltmFastL4ProfileTcpCloseTimeout=ltmFastL4ProfileTcpCloseTimeout, ltmFastL4ProfileLooseInitiation=ltmFastL4ProfileLooseInitiation, ltmFastL4ProfileLooseClose=ltmFastL4ProfileLooseClose, ltmFastL4ProfileHardSyncookie=ltmFastL4ProfileHardSyncookie, ltmFastL4ProfileSoftSyncookie=ltmFastL4ProfileSoftSyncookie, ltmFastL4ProfileStat=ltmFastL4ProfileStat, ltmFastL4ProfileStatResetStats=ltmFastL4ProfileStatResetStats, ltmFastL4ProfileStatNumber=ltmFastL4ProfileStatNumber, ltmFastL4ProfileStatTable=ltmFastL4ProfileStatTable, ltmFastL4ProfileStatEntry=ltmFastL4ProfileStatEntry, ltmFastL4ProfileStatName=ltmFastL4ProfileStatName, ltmFastL4ProfileStatOpen=ltmFastL4ProfileStatOpen, ltmFastL4ProfileStatAccepts=ltmFastL4ProfileStatAccepts, ltmFastL4ProfileStatAcceptfails=ltmFastL4ProfileStatAcceptfails, ltmFastL4ProfileStatExpires=ltmFastL4ProfileStatExpires, ltmFastL4ProfileStatRxbadpkt=ltmFastL4ProfileStatRxbadpkt, ltmFastL4ProfileStatRxunreach=ltmFastL4ProfileStatRxunreach, ltmFastL4ProfileStatRxbadunreach=ltmFastL4ProfileStatRxbadunreach, ltmFastL4ProfileStatRxbadsum=ltmFastL4ProfileStatRxbadsum, ltmFastL4ProfileStatTxerrors=ltmFastL4ProfileStatTxerrors, ltmFastL4ProfileStatSyncookIssue=ltmFastL4ProfileStatSyncookIssue, ltmFastL4ProfileStatSyncookAccept=ltmFastL4ProfileStatSyncookAccept, ltmFastL4ProfileStatSyncookReject=ltmFastL4ProfileStatSyncookReject, ltmFastL4ProfileStatServersynrtx=ltmFastL4ProfileStatServersynrtx, ltmFtp=ltmFtp, ltmFtpProfile=ltmFtpProfile, ltmFtpProfileNumber=ltmFtpProfileNumber, ltmFtpProfileTable=ltmFtpProfileTable, ltmFtpProfileEntry=ltmFtpProfileEntry, ltmFtpProfileName=ltmFtpProfileName, ltmFtpProfileConfigSource=ltmFtpProfileConfigSource, ltmFtpProfileDefaultName=ltmFtpProfileDefaultName, ltmFtpProfileTranslateExtended=ltmFtpProfileTranslateExtended, ltmFtpProfileDataPort=ltmFtpProfileDataPort, ltmHttp=ltmHttp, ltmHttpProfile=ltmHttpProfile, ltmHttpProfileNumber=ltmHttpProfileNumber, ltmHttpProfileTable=ltmHttpProfileTable, ltmHttpProfileEntry=ltmHttpProfileEntry, ltmHttpProfileName=ltmHttpProfileName, ltmHttpProfileConfigSource=ltmHttpProfileConfigSource, ltmHttpProfileDefaultName=ltmHttpProfileDefaultName, ltmHttpProfileBasicAuthRealm=ltmHttpProfileBasicAuthRealm, ltmHttpProfileOneConnect=ltmHttpProfileOneConnect, ltmHttpProfileHeaderInsert=ltmHttpProfileHeaderInsert, ltmHttpProfileHeaderErase=ltmHttpProfileHeaderErase, ltmHttpProfileFallbackHost=ltmHttpProfileFallbackHost, ltmHttpProfileCompressMode=ltmHttpProfileCompressMode, ltmHttpProfileCompressMinSize=ltmHttpProfileCompressMinSize, ltmHttpProfileCompressBufferSize=ltmHttpProfileCompressBufferSize, ltmHttpProfileCompressVaryHeader=ltmHttpProfileCompressVaryHeader, ltmHttpProfileCompressAllowHttp10=ltmHttpProfileCompressAllowHttp10, ltmHttpProfileCompressGzipMemlevel=ltmHttpProfileCompressGzipMemlevel, ltmHttpProfileCompressGzipWindowsize=ltmHttpProfileCompressGzipWindowsize, ltmHttpProfileCompressGzipLevel=ltmHttpProfileCompressGzipLevel, ltmHttpProfileCompressKeepAcceptEncoding=ltmHttpProfileCompressKeepAcceptEncoding, ltmHttpProfileCompressBrowserWorkarounds=ltmHttpProfileCompressBrowserWorkarounds, ltmHttpProfileResponseChunking=ltmHttpProfileResponseChunking, ltmHttpProfileLwsMaxColumn=ltmHttpProfileLwsMaxColumn, ltmHttpProfileLwsSeparator=ltmHttpProfileLwsSeparator, ltmHttpProfileRedirectRewrite=ltmHttpProfileRedirectRewrite, ltmHttpProfileMaxHeaderSize=ltmHttpProfileMaxHeaderSize, ltmHttpProfilePipelining=ltmHttpProfilePipelining, ltmHttpProfileInsertXforwardedFor=ltmHttpProfileInsertXforwardedFor, ltmHttpProfileMaxRequests=ltmHttpProfileMaxRequests, ltmHttpProfileCompressCpusaver=ltmHttpProfileCompressCpusaver, ltmHttpProfileCompressCpusaverHigh=ltmHttpProfileCompressCpusaverHigh, ltmHttpProfileCompressCpusaverLow=ltmHttpProfileCompressCpusaverLow, ltmHttpProfileRamcache=ltmHttpProfileRamcache, ltmHttpProfileRamcacheSize=ltmHttpProfileRamcacheSize, ltmHttpProfileRamcacheMaxEntries=ltmHttpProfileRamcacheMaxEntries, ltmHttpProfileRamcacheMaxAge=ltmHttpProfileRamcacheMaxAge, ltmHttpProfileRamcacheObjectMinSize=ltmHttpProfileRamcacheObjectMinSize, ltmHttpProfileRamcacheObjectMaxSize=ltmHttpProfileRamcacheObjectMaxSize, ltmHttpProfileRamcacheIgnoreClient=ltmHttpProfileRamcacheIgnoreClient, ltmHttpProfileRamcacheAgingRate=ltmHttpProfileRamcacheAgingRate, ltmHttpProfileRamcacheInsertAgeHeader=ltmHttpProfileRamcacheInsertAgeHeader, ltmHttpProfileCompressPreferredMethod=ltmHttpProfileCompressPreferredMethod, ltmHttpProfileServerAgentName=ltmHttpProfileServerAgentName)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmHttpProfileCompUriIncl=ltmHttpProfileCompUriIncl, ltmCompUriInclNumber=ltmCompUriInclNumber, ltmCompUriInclTable=ltmCompUriInclTable, ltmCompUriInclEntry=ltmCompUriInclEntry, ltmCompUriInclName=ltmCompUriInclName, ltmCompUriInclIndex=ltmCompUriInclIndex, ltmCompUriInclUri=ltmCompUriInclUri, ltmHttpProfileCompUriExcl=ltmHttpProfileCompUriExcl, ltmCompUriExclNumber=ltmCompUriExclNumber, ltmCompUriExclTable=ltmCompUriExclTable, ltmCompUriExclEntry=ltmCompUriExclEntry, ltmCompUriExclName=ltmCompUriExclName, ltmCompUriExclIndex=ltmCompUriExclIndex, ltmCompUriExclUri=ltmCompUriExclUri, ltmHttpProfileCompContTypeIncl=ltmHttpProfileCompContTypeIncl, ltmCompContTypeInclNumber=ltmCompContTypeInclNumber, ltmCompContTypeInclTable=ltmCompContTypeInclTable, ltmCompContTypeInclEntry=ltmCompContTypeInclEntry, ltmCompContTypeInclName=ltmCompContTypeInclName, ltmCompContTypeInclIndex=ltmCompContTypeInclIndex, ltmCompContTypeInclContentType=ltmCompContTypeInclContentType, ltmHttpProfileCompContTypeExcl=ltmHttpProfileCompContTypeExcl, ltmCompContTypeExclNumber=ltmCompContTypeExclNumber, ltmCompContTypeExclTable=ltmCompContTypeExclTable, ltmCompContTypeExclEntry=ltmCompContTypeExclEntry, ltmCompContTypeExclName=ltmCompContTypeExclName, ltmCompContTypeExclIndex=ltmCompContTypeExclIndex, ltmCompContTypeExclContentType=ltmCompContTypeExclContentType, ltmHttpProfileStat=ltmHttpProfileStat, ltmHttpProfileStatResetStats=ltmHttpProfileStatResetStats, ltmHttpProfileStatNumber=ltmHttpProfileStatNumber, ltmHttpProfileStatTable=ltmHttpProfileStatTable, ltmHttpProfileStatEntry=ltmHttpProfileStatEntry, ltmHttpProfileStatName=ltmHttpProfileStatName, ltmHttpProfileStatCookiePersistInserts=ltmHttpProfileStatCookiePersistInserts, ltmHttpProfileStatResp2xxCnt=ltmHttpProfileStatResp2xxCnt, ltmHttpProfileStatResp3xxCnt=ltmHttpProfileStatResp3xxCnt, ltmHttpProfileStatResp4xxCnt=ltmHttpProfileStatResp4xxCnt, ltmHttpProfileStatResp5xxCnt=ltmHttpProfileStatResp5xxCnt, ltmHttpProfileStatNumberReqs=ltmHttpProfileStatNumberReqs, ltmHttpProfileStatGetReqs=ltmHttpProfileStatGetReqs, ltmHttpProfileStatPostReqs=ltmHttpProfileStatPostReqs, ltmHttpProfileStatV9Reqs=ltmHttpProfileStatV9Reqs, ltmHttpProfileStatV10Reqs=ltmHttpProfileStatV10Reqs, ltmHttpProfileStatV11Reqs=ltmHttpProfileStatV11Reqs, ltmHttpProfileStatV9Resp=ltmHttpProfileStatV9Resp, ltmHttpProfileStatV10Resp=ltmHttpProfileStatV10Resp, ltmHttpProfileStatV11Resp=ltmHttpProfileStatV11Resp, ltmHttpProfileStatMaxKeepaliveReq=ltmHttpProfileStatMaxKeepaliveReq, ltmHttpProfileStatRespBucket1k=ltmHttpProfileStatRespBucket1k, ltmHttpProfileStatRespBucket4k=ltmHttpProfileStatRespBucket4k, ltmHttpProfileStatRespBucket16k=ltmHttpProfileStatRespBucket16k, ltmHttpProfileStatRespBucket32k=ltmHttpProfileStatRespBucket32k, ltmHttpProfileStatPrecompressBytes=ltmHttpProfileStatPrecompressBytes, ltmHttpProfileStatPostcompressBytes=ltmHttpProfileStatPostcompressBytes, ltmHttpProfileStatNullCompressBytes=ltmHttpProfileStatNullCompressBytes, ltmHttpProfileStatHtmlPrecompressBytes=ltmHttpProfileStatHtmlPrecompressBytes, ltmHttpProfileStatHtmlPostcompressBytes=ltmHttpProfileStatHtmlPostcompressBytes, ltmHttpProfileStatCssPrecompressBytes=ltmHttpProfileStatCssPrecompressBytes, ltmHttpProfileStatCssPostcompressBytes=ltmHttpProfileStatCssPostcompressBytes, ltmHttpProfileStatJsPrecompressBytes=ltmHttpProfileStatJsPrecompressBytes, ltmHttpProfileStatJsPostcompressBytes=ltmHttpProfileStatJsPostcompressBytes, ltmHttpProfileStatXmlPrecompressBytes=ltmHttpProfileStatXmlPrecompressBytes, ltmHttpProfileStatXmlPostcompressBytes=ltmHttpProfileStatXmlPostcompressBytes, ltmHttpProfileStatSgmlPrecompressBytes=ltmHttpProfileStatSgmlPrecompressBytes, ltmHttpProfileStatSgmlPostcompressBytes=ltmHttpProfileStatSgmlPostcompressBytes, ltmHttpProfileStatPlainPrecompressBytes=ltmHttpProfileStatPlainPrecompressBytes, ltmHttpProfileStatPlainPostcompressBytes=ltmHttpProfileStatPlainPostcompressBytes, ltmHttpProfileStatOctetPrecompressBytes=ltmHttpProfileStatOctetPrecompressBytes, ltmHttpProfileStatOctetPostcompressBytes=ltmHttpProfileStatOctetPostcompressBytes, ltmHttpProfileStatImagePrecompressBytes=ltmHttpProfileStatImagePrecompressBytes, ltmHttpProfileStatImagePostcompressBytes=ltmHttpProfileStatImagePostcompressBytes, ltmHttpProfileStatVideoPrecompressBytes=ltmHttpProfileStatVideoPrecompressBytes, ltmHttpProfileStatVideoPostcompressBytes=ltmHttpProfileStatVideoPostcompressBytes, ltmHttpProfileStatAudioPrecompressBytes=ltmHttpProfileStatAudioPrecompressBytes, ltmHttpProfileStatAudioPostcompressBytes=ltmHttpProfileStatAudioPostcompressBytes, ltmHttpProfileStatOtherPrecompressBytes=ltmHttpProfileStatOtherPrecompressBytes, ltmHttpProfileStatOtherPostcompressBytes=ltmHttpProfileStatOtherPostcompressBytes, ltmHttpProfileStatRamcacheHits=ltmHttpProfileStatRamcacheHits, ltmHttpProfileStatRamcacheMisses=ltmHttpProfileStatRamcacheMisses, ltmHttpProfileStatRamcacheMissesAll=ltmHttpProfileStatRamcacheMissesAll, ltmHttpProfileStatRamcacheHitBytes=ltmHttpProfileStatRamcacheHitBytes, ltmHttpProfileStatRamcacheMissBytes=ltmHttpProfileStatRamcacheMissBytes, ltmHttpProfileStatRamcacheMissBytesAll=ltmHttpProfileStatRamcacheMissBytesAll, ltmHttpProfileStatRamcacheSize=ltmHttpProfileStatRamcacheSize, ltmHttpProfileStatRamcacheCount=ltmHttpProfileStatRamcacheCount, ltmHttpProfileStatRamcacheEvictions=ltmHttpProfileStatRamcacheEvictions, ltmHttpProfileStatRespBucket64k=ltmHttpProfileStatRespBucket64k, ltmHttpProfileRamUriExcl=ltmHttpProfileRamUriExcl, ltmRamUriExclNumber=ltmRamUriExclNumber, ltmRamUriExclTable=ltmRamUriExclTable, ltmRamUriExclEntry=ltmRamUriExclEntry, ltmRamUriExclName=ltmRamUriExclName, ltmRamUriExclIndex=ltmRamUriExclIndex, ltmRamUriExclUri=ltmRamUriExclUri, ltmHttpProfileRamUriIncl=ltmHttpProfileRamUriIncl, ltmRamUriInclNumber=ltmRamUriInclNumber, ltmRamUriInclTable=ltmRamUriInclTable, ltmRamUriInclEntry=ltmRamUriInclEntry, ltmRamUriInclName=ltmRamUriInclName, ltmRamUriInclIndex=ltmRamUriInclIndex, ltmRamUriInclUri=ltmRamUriInclUri, ltmHttpProfileRamUriPin=ltmHttpProfileRamUriPin, ltmRamUriPinNumber=ltmRamUriPinNumber, ltmRamUriPinTable=ltmRamUriPinTable, ltmRamUriPinEntry=ltmRamUriPinEntry, ltmRamUriPinName=ltmRamUriPinName, ltmRamUriPinIndex=ltmRamUriPinIndex, ltmRamUriPinUri=ltmRamUriPinUri, ltmHttpProfileFallbackStatus=ltmHttpProfileFallbackStatus, ltmFallbackStatusNumber=ltmFallbackStatusNumber, ltmFallbackStatusTable=ltmFallbackStatusTable, ltmFallbackStatusEntry=ltmFallbackStatusEntry, ltmFallbackStatusName=ltmFallbackStatusName, ltmFallbackStatusIndex=ltmFallbackStatusIndex, ltmFallbackStatusCode=ltmFallbackStatusCode, ltmHttpProfileRespHeadersPerm=ltmHttpProfileRespHeadersPerm, ltmRespHeadersPermNumber=ltmRespHeadersPermNumber, ltmRespHeadersPermTable=ltmRespHeadersPermTable, ltmRespHeadersPermEntry=ltmRespHeadersPermEntry, ltmRespHeadersPermName=ltmRespHeadersPermName, ltmRespHeadersPermIndex=ltmRespHeadersPermIndex, ltmRespHeadersPermStr=ltmRespHeadersPermStr, ltmHttpProfileEncCookies=ltmHttpProfileEncCookies, ltmEncCookiesNumber=ltmEncCookiesNumber, ltmEncCookiesTable=ltmEncCookiesTable, ltmEncCookiesEntry=ltmEncCookiesEntry)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmEncCookiesName=ltmEncCookiesName, ltmEncCookiesIndex=ltmEncCookiesIndex, ltmEncCookiesStr=ltmEncCookiesStr, ltmPersist=ltmPersist, ltmPersistProfile=ltmPersistProfile, ltmPersistProfileNumber=ltmPersistProfileNumber, ltmPersistProfileTable=ltmPersistProfileTable, ltmPersistProfileEntry=ltmPersistProfileEntry, ltmPersistProfileName=ltmPersistProfileName, ltmPersistProfileConfigSource=ltmPersistProfileConfigSource, ltmPersistProfileDefaultName=ltmPersistProfileDefaultName, ltmPersistProfileMode=ltmPersistProfileMode, ltmPersistProfileMirror=ltmPersistProfileMirror, ltmPersistProfileTimeout=ltmPersistProfileTimeout, ltmPersistProfileMaskType=ltmPersistProfileMaskType, ltmPersistProfileMask=ltmPersistProfileMask, ltmPersistProfileCookieMethod=ltmPersistProfileCookieMethod, ltmPersistProfileCookieName=ltmPersistProfileCookieName, ltmPersistProfileCookieExpiration=ltmPersistProfileCookieExpiration, ltmPersistProfileCookieHashOffset=ltmPersistProfileCookieHashOffset, ltmPersistProfileCookieHashLength=ltmPersistProfileCookieHashLength, ltmPersistProfileMsrdpNoSessionDir=ltmPersistProfileMsrdpNoSessionDir, ltmPersistProfileMapProxies=ltmPersistProfileMapProxies, ltmPersistProfileAcrossServices=ltmPersistProfileAcrossServices, ltmPersistProfileAcrossVirtuals=ltmPersistProfileAcrossVirtuals, ltmPersistProfileAcrossPools=ltmPersistProfileAcrossPools, ltmPersistProfileUieRule=ltmPersistProfileUieRule, ltmPersistProfileSipInfo=ltmPersistProfileSipInfo, ltmStream=ltmStream, ltmStreamProfile=ltmStreamProfile, ltmStreamProfileNumber=ltmStreamProfileNumber, ltmStreamProfileTable=ltmStreamProfileTable, ltmStreamProfileEntry=ltmStreamProfileEntry, ltmStreamProfileName=ltmStreamProfileName, ltmStreamProfileConfigSource=ltmStreamProfileConfigSource, ltmStreamProfileDefaultName=ltmStreamProfileDefaultName, ltmStreamProfileSource=ltmStreamProfileSource, ltmStreamProfileTarget=ltmStreamProfileTarget, ltmStreamProfileStat=ltmStreamProfileStat, ltmStreamProfileStatResetStats=ltmStreamProfileStatResetStats, ltmStreamProfileStatNumber=ltmStreamProfileStatNumber, ltmStreamProfileStatTable=ltmStreamProfileStatTable, ltmStreamProfileStatEntry=ltmStreamProfileStatEntry, ltmStreamProfileStatName=ltmStreamProfileStatName, ltmStreamProfileStatReplaces=ltmStreamProfileStatReplaces, ltmTcp=ltmTcp, ltmTcpProfile=ltmTcpProfile, ltmTcpProfileNumber=ltmTcpProfileNumber, ltmTcpProfileTable=ltmTcpProfileTable, ltmTcpProfileEntry=ltmTcpProfileEntry, ltmTcpProfileName=ltmTcpProfileName, ltmTcpProfileConfigSource=ltmTcpProfileConfigSource, ltmTcpProfileDefaultName=ltmTcpProfileDefaultName, ltmTcpProfileResetOnTimeout=ltmTcpProfileResetOnTimeout, ltmTcpProfileTimeWaitRecycle=ltmTcpProfileTimeWaitRecycle, ltmTcpProfileDelayedAcks=ltmTcpProfileDelayedAcks, ltmTcpProfileProxyMss=ltmTcpProfileProxyMss, ltmTcpProfileProxyOptions=ltmTcpProfileProxyOptions, ltmTcpProfileProxyBufferLow=ltmTcpProfileProxyBufferLow, ltmTcpProfileProxyBufferHigh=ltmTcpProfileProxyBufferHigh, ltmTcpProfileIdleTimeout=ltmTcpProfileIdleTimeout, ltmTcpProfileTimeWaitTimeout=ltmTcpProfileTimeWaitTimeout, ltmTcpProfileFinWaitTimeout=ltmTcpProfileFinWaitTimeout, ltmTcpProfileCloseWaitTimeout=ltmTcpProfileCloseWaitTimeout, ltmTcpProfileSndbuf=ltmTcpProfileSndbuf, ltmTcpProfileRcvwnd=ltmTcpProfileRcvwnd, ltmTcpProfileKeepAliveInterval=ltmTcpProfileKeepAliveInterval, ltmTcpProfileSynMaxrtx=ltmTcpProfileSynMaxrtx, ltmTcpProfileMaxrtx=ltmTcpProfileMaxrtx, ltmTcpProfileIpTosToClient=ltmTcpProfileIpTosToClient, ltmTcpProfileLinkQosToClient=ltmTcpProfileLinkQosToClient, ltmTcpProfileDeferredAccept=ltmTcpProfileDeferredAccept, ltmTcpProfileSelectiveAcks=ltmTcpProfileSelectiveAcks, ltmTcpProfileEcn=ltmTcpProfileEcn, ltmTcpProfileLimitedTransmit=ltmTcpProfileLimitedTransmit, ltmTcpProfileHighPerfTcpExt=ltmTcpProfileHighPerfTcpExt, ltmTcpProfileSlowStart=ltmTcpProfileSlowStart, ltmTcpProfileBandwidthDelay=ltmTcpProfileBandwidthDelay, ltmTcpProfileNagle=ltmTcpProfileNagle, ltmTcpProfileAckOnPush=ltmTcpProfileAckOnPush, ltmTcpProfileMd5Sig=ltmTcpProfileMd5Sig, ltmTcpProfileMd5SigPass=ltmTcpProfileMd5SigPass, ltmTcpProfileAbc=ltmTcpProfileAbc, ltmTcpProfileCongestionCtrl=ltmTcpProfileCongestionCtrl, ltmTcpProfileDsack=ltmTcpProfileDsack, ltmTcpProfileCmetricsCache=ltmTcpProfileCmetricsCache, ltmTcpProfileVerifiedAccept=ltmTcpProfileVerifiedAccept, ltmTcpProfilePktLossIgnoreRate=ltmTcpProfilePktLossIgnoreRate, ltmTcpProfilePktLossIgnoreBurst=ltmTcpProfilePktLossIgnoreBurst, ltmTcpProfileZeroWindowTimeout=ltmTcpProfileZeroWindowTimeout, ltmTcpProfileInitCwnd=ltmTcpProfileInitCwnd, ltmTcpProfileInitRwnd=ltmTcpProfileInitRwnd, ltmTcpProfileDelayWindowControl=ltmTcpProfileDelayWindowControl, ltmTcpProfileSynRtoBase=ltmTcpProfileSynRtoBase, ltmTcpProfileTimestamps=ltmTcpProfileTimestamps, ltmTcpProfileMinRto=ltmTcpProfileMinRto, ltmTcpProfileStat=ltmTcpProfileStat, ltmTcpProfileStatResetStats=ltmTcpProfileStatResetStats, ltmTcpProfileStatNumber=ltmTcpProfileStatNumber, ltmTcpProfileStatTable=ltmTcpProfileStatTable, ltmTcpProfileStatEntry=ltmTcpProfileStatEntry, ltmTcpProfileStatName=ltmTcpProfileStatName, ltmTcpProfileStatOpen=ltmTcpProfileStatOpen, ltmTcpProfileStatCloseWait=ltmTcpProfileStatCloseWait, ltmTcpProfileStatFinWait=ltmTcpProfileStatFinWait, ltmTcpProfileStatTimeWait=ltmTcpProfileStatTimeWait, ltmTcpProfileStatAccepts=ltmTcpProfileStatAccepts, ltmTcpProfileStatAcceptfails=ltmTcpProfileStatAcceptfails, ltmTcpProfileStatConnects=ltmTcpProfileStatConnects, ltmTcpProfileStatConnfails=ltmTcpProfileStatConnfails, ltmTcpProfileStatExpires=ltmTcpProfileStatExpires, ltmTcpProfileStatAbandons=ltmTcpProfileStatAbandons, ltmTcpProfileStatRxrst=ltmTcpProfileStatRxrst, ltmTcpProfileStatRxbadsum=ltmTcpProfileStatRxbadsum, ltmTcpProfileStatRxbadseg=ltmTcpProfileStatRxbadseg, ltmTcpProfileStatRxooseg=ltmTcpProfileStatRxooseg, ltmTcpProfileStatRxcookie=ltmTcpProfileStatRxcookie, ltmTcpProfileStatRxbadcookie=ltmTcpProfileStatRxbadcookie, ltmTcpProfileStatSyncacheover=ltmTcpProfileStatSyncacheover, ltmTcpProfileStatTxrexmits=ltmTcpProfileStatTxrexmits, ltmUdp=ltmUdp, ltmUdpProfile=ltmUdpProfile, ltmUdpProfileNumber=ltmUdpProfileNumber, ltmUdpProfileTable=ltmUdpProfileTable, ltmUdpProfileEntry=ltmUdpProfileEntry, ltmUdpProfileName=ltmUdpProfileName, ltmUdpProfileConfigSource=ltmUdpProfileConfigSource)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmUdpProfileDefaultName=ltmUdpProfileDefaultName, ltmUdpProfileIdleTimeout=ltmUdpProfileIdleTimeout, ltmUdpProfileIpTosToClient=ltmUdpProfileIpTosToClient, ltmUdpProfileLinkQosToClient=ltmUdpProfileLinkQosToClient, ltmUdpProfileDatagramLb=ltmUdpProfileDatagramLb, ltmUdpProfileAllowNoPayload=ltmUdpProfileAllowNoPayload, ltmUdpProfileStat=ltmUdpProfileStat, ltmUdpProfileStatResetStats=ltmUdpProfileStatResetStats, ltmUdpProfileStatNumber=ltmUdpProfileStatNumber, ltmUdpProfileStatTable=ltmUdpProfileStatTable, ltmUdpProfileStatEntry=ltmUdpProfileStatEntry, ltmUdpProfileStatName=ltmUdpProfileStatName, ltmUdpProfileStatOpen=ltmUdpProfileStatOpen, ltmUdpProfileStatAccepts=ltmUdpProfileStatAccepts, ltmUdpProfileStatAcceptfails=ltmUdpProfileStatAcceptfails, ltmUdpProfileStatConnects=ltmUdpProfileStatConnects, ltmUdpProfileStatConnfails=ltmUdpProfileStatConnfails, ltmUdpProfileStatExpires=ltmUdpProfileStatExpires, ltmUdpProfileStatRxdgram=ltmUdpProfileStatRxdgram, ltmUdpProfileStatRxbaddgram=ltmUdpProfileStatRxbaddgram, ltmUdpProfileStatRxunreach=ltmUdpProfileStatRxunreach, ltmUdpProfileStatRxbadsum=ltmUdpProfileStatRxbadsum, ltmUdpProfileStatRxnosum=ltmUdpProfileStatRxnosum, ltmUdpProfileStatTxdgram=ltmUdpProfileStatTxdgram, ltmFastHttp=ltmFastHttp, ltmFastHttpProfile=ltmFastHttpProfile, ltmFastHttpProfileNumber=ltmFastHttpProfileNumber, ltmFastHttpProfileTable=ltmFastHttpProfileTable, ltmFastHttpProfileEntry=ltmFastHttpProfileEntry, ltmFastHttpProfileName=ltmFastHttpProfileName, ltmFastHttpProfileConfigSource=ltmFastHttpProfileConfigSource, ltmFastHttpProfileDefaultName=ltmFastHttpProfileDefaultName, ltmFastHttpProfileResetOnTimeout=ltmFastHttpProfileResetOnTimeout, ltmFastHttpProfileIdleTimeout=ltmFastHttpProfileIdleTimeout, ltmFastHttpProfileMssOverride=ltmFastHttpProfileMssOverride, ltmFastHttpProfileClientCloseTimeout=ltmFastHttpProfileClientCloseTimeout, ltmFastHttpProfileServerCloseTimeout=ltmFastHttpProfileServerCloseTimeout, ltmFastHttpProfileConnpoolMaxSize=ltmFastHttpProfileConnpoolMaxSize, ltmFastHttpProfileConnpoolMinSize=ltmFastHttpProfileConnpoolMinSize, ltmFastHttpProfileConnpoolStep=ltmFastHttpProfileConnpoolStep, ltmFastHttpProfileConnpoolMaxReuse=ltmFastHttpProfileConnpoolMaxReuse, ltmFastHttpProfileConnpoolIdleTimeout=ltmFastHttpProfileConnpoolIdleTimeout, ltmFastHttpProfileMaxHeaderSize=ltmFastHttpProfileMaxHeaderSize, ltmFastHttpProfileMaxRequests=ltmFastHttpProfileMaxRequests, ltmFastHttpProfileInsertXforwardedFor=ltmFastHttpProfileInsertXforwardedFor, ltmFastHttpProfileHttp11CloseWorkarounds=ltmFastHttpProfileHttp11CloseWorkarounds, ltmFastHttpProfileHeaderInsert=ltmFastHttpProfileHeaderInsert, ltmFastHttpProfileUncleanShutdown=ltmFastHttpProfileUncleanShutdown, ltmFastHttpProfileForceHttp10Response=ltmFastHttpProfileForceHttp10Response, ltmFastHttpProfileLayer7=ltmFastHttpProfileLayer7, ltmFastHttpProfileConnpoolReplenish=ltmFastHttpProfileConnpoolReplenish, ltmFastHttpProfileStat=ltmFastHttpProfileStat, ltmFastHttpProfileStatResetStats=ltmFastHttpProfileStatResetStats, ltmFastHttpProfileStatNumber=ltmFastHttpProfileStatNumber, ltmFastHttpProfileStatTable=ltmFastHttpProfileStatTable, ltmFastHttpProfileStatEntry=ltmFastHttpProfileStatEntry, ltmFastHttpProfileStatName=ltmFastHttpProfileStatName, ltmFastHttpProfileStatClientSyns=ltmFastHttpProfileStatClientSyns, ltmFastHttpProfileStatClientAccepts=ltmFastHttpProfileStatClientAccepts, ltmFastHttpProfileStatServerConnects=ltmFastHttpProfileStatServerConnects, ltmFastHttpProfileStatConnpoolCurSize=ltmFastHttpProfileStatConnpoolCurSize, ltmFastHttpProfileStatConnpoolMaxSize=ltmFastHttpProfileStatConnpoolMaxSize, ltmFastHttpProfileStatConnpoolReuses=ltmFastHttpProfileStatConnpoolReuses, ltmFastHttpProfileStatConnpoolExhausted=ltmFastHttpProfileStatConnpoolExhausted, ltmFastHttpProfileStatNumberReqs=ltmFastHttpProfileStatNumberReqs, ltmFastHttpProfileStatUnbufferedReqs=ltmFastHttpProfileStatUnbufferedReqs, ltmFastHttpProfileStatGetReqs=ltmFastHttpProfileStatGetReqs, ltmFastHttpProfileStatPostReqs=ltmFastHttpProfileStatPostReqs, ltmFastHttpProfileStatV9Reqs=ltmFastHttpProfileStatV9Reqs, ltmFastHttpProfileStatV10Reqs=ltmFastHttpProfileStatV10Reqs, ltmFastHttpProfileStatV11Reqs=ltmFastHttpProfileStatV11Reqs, ltmFastHttpProfileStatResp2xxCnt=ltmFastHttpProfileStatResp2xxCnt, ltmFastHttpProfileStatResp3xxCnt=ltmFastHttpProfileStatResp3xxCnt, ltmFastHttpProfileStatResp4xxCnt=ltmFastHttpProfileStatResp4xxCnt, ltmFastHttpProfileStatResp5xxCnt=ltmFastHttpProfileStatResp5xxCnt, ltmFastHttpProfileStatReqParseErrors=ltmFastHttpProfileStatReqParseErrors, ltmFastHttpProfileStatRespParseErrors=ltmFastHttpProfileStatRespParseErrors, ltmFastHttpProfileStatClientRxBad=ltmFastHttpProfileStatClientRxBad, ltmFastHttpProfileStatServerRxBad=ltmFastHttpProfileStatServerRxBad, ltmFastHttpProfileStatPipelinedReqs=ltmFastHttpProfileStatPipelinedReqs, ltmXml=ltmXml, ltmXmlProfile=ltmXmlProfile, ltmXmlProfileNumber=ltmXmlProfileNumber, ltmXmlProfileTable=ltmXmlProfileTable, ltmXmlProfileEntry=ltmXmlProfileEntry, ltmXmlProfileName=ltmXmlProfileName, ltmXmlProfileConfigSource=ltmXmlProfileConfigSource, ltmXmlProfileDefaultName=ltmXmlProfileDefaultName, ltmXmlProfileAbortOnError=ltmXmlProfileAbortOnError, ltmXmlProfileMaxBufferSize=ltmXmlProfileMaxBufferSize, ltmXmlProfileMultipleQueryMatches=ltmXmlProfileMultipleQueryMatches, ltmXmlProfileStat=ltmXmlProfileStat, ltmXmlProfileStatResetStats=ltmXmlProfileStatResetStats, ltmXmlProfileStatNumber=ltmXmlProfileStatNumber, ltmXmlProfileStatTable=ltmXmlProfileStatTable, ltmXmlProfileStatEntry=ltmXmlProfileStatEntry, ltmXmlProfileStatName=ltmXmlProfileStatName, ltmXmlProfileStatNumErrors=ltmXmlProfileStatNumErrors, ltmXmlProfileStatNumInspectedDocuments=ltmXmlProfileStatNumInspectedDocuments, ltmXmlProfileStatNumDocumentsWithOneMatch=ltmXmlProfileStatNumDocumentsWithOneMatch, ltmXmlProfileStatNumDocumentsWithTwoMatches=ltmXmlProfileStatNumDocumentsWithTwoMatches, ltmXmlProfileStatNumDocumentsWithThreeMatches=ltmXmlProfileStatNumDocumentsWithThreeMatches, ltmXmlProfileStatNumDocumentsWithNoMatches=ltmXmlProfileStatNumDocumentsWithNoMatches, ltmXmlProfileStatNumMalformedDocuments=ltmXmlProfileStatNumMalformedDocuments, ltmXmlProfileXpathQueries=ltmXmlProfileXpathQueries, ltmXmlProfileXpathQueriesNumber=ltmXmlProfileXpathQueriesNumber, ltmXmlProfileXpathQueriesTable=ltmXmlProfileXpathQueriesTable, ltmXmlProfileXpathQueriesEntry=ltmXmlProfileXpathQueriesEntry, ltmXmlProfileXpathQueriesName=ltmXmlProfileXpathQueriesName, ltmXmlProfileXpathQueriesIndex=ltmXmlProfileXpathQueriesIndex, ltmXmlProfileXpathQueriesString=ltmXmlProfileXpathQueriesString, ltmXmlProfileNamespaceMappings=ltmXmlProfileNamespaceMappings, ltmXmlProfileNamespaceMappingsNumber=ltmXmlProfileNamespaceMappingsNumber, ltmXmlProfileNamespaceMappingsTable=ltmXmlProfileNamespaceMappingsTable, ltmXmlProfileNamespaceMappingsEntry=ltmXmlProfileNamespaceMappingsEntry, ltmXmlProfileNamespaceMappingsName=ltmXmlProfileNamespaceMappingsName, ltmXmlProfileNamespaceMappingsIndex=ltmXmlProfileNamespaceMappingsIndex, ltmXmlProfileNamespaceMappingsMappingPrefix=ltmXmlProfileNamespaceMappingsMappingPrefix, ltmXmlProfileNamespaceMappingsMappingNamespace=ltmXmlProfileNamespaceMappingsMappingNamespace, ltmDns=ltmDns, ltmDnsProfile=ltmDnsProfile, ltmDnsProfileNumber=ltmDnsProfileNumber, ltmDnsProfileTable=ltmDnsProfileTable, ltmDnsProfileEntry=ltmDnsProfileEntry, ltmDnsProfileName=ltmDnsProfileName, ltmDnsProfileConfigSource=ltmDnsProfileConfigSource, ltmDnsProfileDefaultName=ltmDnsProfileDefaultName)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmDnsProfileGtmEnabled=ltmDnsProfileGtmEnabled, ltmDnsProfileDns64Mode=ltmDnsProfileDns64Mode, ltmDnsProfileDns64PrefixType=ltmDnsProfileDns64PrefixType, ltmDnsProfileDns64Prefix=ltmDnsProfileDns64Prefix, ltmDnsProfileDns64AdditionalRewrite=ltmDnsProfileDns64AdditionalRewrite, ltmDnsProfileDnsLastAction=ltmDnsProfileDnsLastAction, ltmDnsProfileUseLocalBind=ltmDnsProfileUseLocalBind, ltmDnsProfileDnsExpressEnabled=ltmDnsProfileDnsExpressEnabled, ltmDnsProfileDnssecEnabled=ltmDnsProfileDnssecEnabled, ltmDnsProfileCacheEnabled=ltmDnsProfileCacheEnabled, ltmDnsProfileDnsCache=ltmDnsProfileDnsCache, ltmDnsProfileProcessRd=ltmDnsProfileProcessRd, ltmDnsProfileAvrDnsStatSampleRate=ltmDnsProfileAvrDnsStatSampleRate, ltmDnsProfileSecurity=ltmDnsProfileSecurity, ltmDnsProfileSecurityEnabled=ltmDnsProfileSecurityEnabled, ltmDnsProfileLoggingProfile=ltmDnsProfileLoggingProfile, ltmDnsProfileLoggingEnabled=ltmDnsProfileLoggingEnabled, ltmDnsProfileStat=ltmDnsProfileStat, ltmDnsProfileStatResetStats=ltmDnsProfileStatResetStats, ltmDnsProfileStatNumber=ltmDnsProfileStatNumber, ltmDnsProfileStatTable=ltmDnsProfileStatTable, ltmDnsProfileStatEntry=ltmDnsProfileStatEntry, ltmDnsProfileStatName=ltmDnsProfileStatName, ltmDnsProfileStatQueries=ltmDnsProfileStatQueries, ltmDnsProfileStatResponses=ltmDnsProfileStatResponses, ltmDnsProfileStatResponsesPerSec=ltmDnsProfileStatResponsesPerSec, ltmDnsProfileStatToGtm=ltmDnsProfileStatToGtm, ltmDnsProfileStatDnsExpressReqs=ltmDnsProfileStatDnsExpressReqs, ltmDnsProfileStatDnsExpressNotifies=ltmDnsProfileStatDnsExpressNotifies, ltmDnsProfileStatToCache=ltmDnsProfileStatToCache, ltmDnsProfileStatToDns=ltmDnsProfileStatToDns, ltmDnsProfileStatDns64Reqs=ltmDnsProfileStatDns64Reqs, ltmDnsProfileStatDns64Rewrites=ltmDnsProfileStatDns64Rewrites, ltmDnsProfileStatDns64Failures=ltmDnsProfileStatDns64Failures, ltmDnsProfileStatHints=ltmDnsProfileStatHints, ltmDnsProfileStatRejects=ltmDnsProfileStatRejects, ltmDnsProfileStatNoErrors=ltmDnsProfileStatNoErrors, ltmDnsProfileStatDrops=ltmDnsProfileStatDrops, ltmDnsProfileStatMalformed=ltmDnsProfileStatMalformed, ltmDnsProfileStatTclSuspends=ltmDnsProfileStatTclSuspends, ltmDnsProfileStatRecursionDesired=ltmDnsProfileStatRecursionDesired, ltmDnsProfileStatCheckingDisabled=ltmDnsProfileStatCheckingDisabled, ltmDnsProfileStatEdns0=ltmDnsProfileStatEdns0, ltmDnsProfileStatOpcodeQuery=ltmDnsProfileStatOpcodeQuery, ltmDnsProfileStatOpcodeNotify=ltmDnsProfileStatOpcodeNotify, ltmDnsProfileStatOpcodeUpdate=ltmDnsProfileStatOpcodeUpdate, ltmDnsProfileStatZoneIxfr=ltmDnsProfileStatZoneIxfr, ltmDnsProfileStatZoneAxfr=ltmDnsProfileStatZoneAxfr, ltmDnsProfileStatAuthoritativeAnswer=ltmDnsProfileStatAuthoritativeAnswer, ltmDnsProfileStatRecursionAvailable=ltmDnsProfileStatRecursionAvailable, ltmDnsProfileStatAuthenticatedData=ltmDnsProfileStatAuthenticatedData, ltmDnsProfileStatTruncated=ltmDnsProfileStatTruncated, ltmDnsProfileStatRcodeNoerror=ltmDnsProfileStatRcodeNoerror, ltmDnsProfileStatRcodeNxdomain=ltmDnsProfileStatRcodeNxdomain, ltmDnsProfileStatRcodeServfail=ltmDnsProfileStatRcodeServfail, ltmDnsProfileStatRcodeRefused=ltmDnsProfileStatRcodeRefused, ltmDnsProfileStatMalicious=ltmDnsProfileStatMalicious, ltmDnsProfileStatAReqs=ltmDnsProfileStatAReqs, ltmDnsProfileStatAaaaReqs=ltmDnsProfileStatAaaaReqs, ltmDnsProfileStatAnyReqs=ltmDnsProfileStatAnyReqs, ltmDnsProfileStatCnameReqs=ltmDnsProfileStatCnameReqs, ltmDnsProfileStatMxReqs=ltmDnsProfileStatMxReqs, ltmDnsProfileStatNsReqs=ltmDnsProfileStatNsReqs, ltmDnsProfileStatPtrReqs=ltmDnsProfileStatPtrReqs, ltmDnsProfileStatSoaReqs=ltmDnsProfileStatSoaReqs, ltmDnsProfileStatSrvReqs=ltmDnsProfileStatSrvReqs, ltmDnsProfileStatTxtReqs=ltmDnsProfileStatTxtReqs, ltmDnsProfileStatOtherReqs=ltmDnsProfileStatOtherReqs, ltmDnsProfileStatDnsEffectiveRateLimit=ltmDnsProfileStatDnsEffectiveRateLimit, ltmDnsProfileStatDnsConfiguredObjects=ltmDnsProfileStatDnsConfiguredObjects, ltmDnsProfileStatDnsRateRejectedRequests=ltmDnsProfileStatDnsRateRejectedRequests, ltmDnsProfileStatGtmEffectiveRateLimit=ltmDnsProfileStatGtmEffectiveRateLimit, ltmDnsProfileStatGtmConfiguredObjects=ltmDnsProfileStatGtmConfiguredObjects, ltmDnsProfileStatGtmRateRejectedRequests=ltmDnsProfileStatGtmRateRejectedRequests, ltmHttpClass=ltmHttpClass, ltmHttpClassProfile=ltmHttpClassProfile, ltmHttpClassNumber=ltmHttpClassNumber, ltmHttpClassTable=ltmHttpClassTable, ltmHttpClassEntry=ltmHttpClassEntry, ltmHttpClassName=ltmHttpClassName, ltmHttpClassConfigSource=ltmHttpClassConfigSource, ltmHttpClassDefaultName=ltmHttpClassDefaultName, ltmHttpClassPoolName=ltmHttpClassPoolName, ltmHttpClassAsmEnabled=ltmHttpClassAsmEnabled, ltmHttpClassWaEnabled=ltmHttpClassWaEnabled, ltmHttpClassRedirectLocation=ltmHttpClassRedirectLocation, ltmHttpClassUrlRewrite=ltmHttpClassUrlRewrite, ltmHttpClassProfileHost=ltmHttpClassProfileHost, ltmHttpClassHostNumber=ltmHttpClassHostNumber, ltmHttpClassHostTable=ltmHttpClassHostTable, ltmHttpClassHostEntry=ltmHttpClassHostEntry, ltmHttpClassHostName=ltmHttpClassHostName, ltmHttpClassHostIndex=ltmHttpClassHostIndex, ltmHttpClassHostString=ltmHttpClassHostString, ltmHttpClassProfileUri=ltmHttpClassProfileUri, ltmHttpClassUriNumber=ltmHttpClassUriNumber, ltmHttpClassUriTable=ltmHttpClassUriTable, ltmHttpClassUriEntry=ltmHttpClassUriEntry, ltmHttpClassUriName=ltmHttpClassUriName, ltmHttpClassUriIndex=ltmHttpClassUriIndex, ltmHttpClassUriString=ltmHttpClassUriString, ltmHttpClassProfileHead=ltmHttpClassProfileHead, ltmHttpClassHeadNumber=ltmHttpClassHeadNumber, ltmHttpClassHeadTable=ltmHttpClassHeadTable, ltmHttpClassHeadEntry=ltmHttpClassHeadEntry, ltmHttpClassHeadName=ltmHttpClassHeadName, ltmHttpClassHeadIndex=ltmHttpClassHeadIndex, ltmHttpClassHeadString=ltmHttpClassHeadString, ltmHttpClassProfileCook=ltmHttpClassProfileCook, ltmHttpClassCookNumber=ltmHttpClassCookNumber, ltmHttpClassCookTable=ltmHttpClassCookTable, ltmHttpClassCookEntry=ltmHttpClassCookEntry, ltmHttpClassCookName=ltmHttpClassCookName, ltmHttpClassCookIndex=ltmHttpClassCookIndex, ltmHttpClassCookString=ltmHttpClassCookString, ltmHttpClassProfileStat=ltmHttpClassProfileStat, ltmHttpClassStatResetStats=ltmHttpClassStatResetStats, ltmHttpClassStatNumber=ltmHttpClassStatNumber, ltmHttpClassStatTable=ltmHttpClassStatTable, ltmHttpClassStatEntry=ltmHttpClassStatEntry, ltmHttpClassStatName=ltmHttpClassStatName, ltmHttpClassStatCookiePersistInserts=ltmHttpClassStatCookiePersistInserts, ltmHttpClassStatResp2xxCnt=ltmHttpClassStatResp2xxCnt, ltmHttpClassStatResp3xxCnt=ltmHttpClassStatResp3xxCnt, ltmHttpClassStatResp4xxCnt=ltmHttpClassStatResp4xxCnt, ltmHttpClassStatResp5xxCnt=ltmHttpClassStatResp5xxCnt, ltmHttpClassStatNumberReqs=ltmHttpClassStatNumberReqs)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmHttpClassStatGetReqs=ltmHttpClassStatGetReqs, ltmHttpClassStatPostReqs=ltmHttpClassStatPostReqs, ltmHttpClassStatV9Reqs=ltmHttpClassStatV9Reqs, ltmHttpClassStatV10Reqs=ltmHttpClassStatV10Reqs, ltmHttpClassStatV11Reqs=ltmHttpClassStatV11Reqs, ltmHttpClassStatV9Resp=ltmHttpClassStatV9Resp, ltmHttpClassStatV10Resp=ltmHttpClassStatV10Resp, ltmHttpClassStatV11Resp=ltmHttpClassStatV11Resp, ltmHttpClassStatMaxKeepaliveReq=ltmHttpClassStatMaxKeepaliveReq, ltmHttpClassStatRespBucket1k=ltmHttpClassStatRespBucket1k, ltmHttpClassStatRespBucket4k=ltmHttpClassStatRespBucket4k, ltmHttpClassStatRespBucket16k=ltmHttpClassStatRespBucket16k, ltmHttpClassStatRespBucket32k=ltmHttpClassStatRespBucket32k, ltmHttpClassStatRespBucket64k=ltmHttpClassStatRespBucket64k, ltmHttpClassStatPrecompressBytes=ltmHttpClassStatPrecompressBytes, ltmHttpClassStatPostcompressBytes=ltmHttpClassStatPostcompressBytes, ltmHttpClassStatNullCompressBytes=ltmHttpClassStatNullCompressBytes, ltmHttpClassStatHtmlPrecompressBytes=ltmHttpClassStatHtmlPrecompressBytes, ltmHttpClassStatHtmlPostcompressBytes=ltmHttpClassStatHtmlPostcompressBytes, ltmHttpClassStatCssPrecompressBytes=ltmHttpClassStatCssPrecompressBytes, ltmHttpClassStatCssPostcompressBytes=ltmHttpClassStatCssPostcompressBytes, ltmHttpClassStatJsPrecompressBytes=ltmHttpClassStatJsPrecompressBytes, ltmHttpClassStatJsPostcompressBytes=ltmHttpClassStatJsPostcompressBytes, ltmHttpClassStatXmlPrecompressBytes=ltmHttpClassStatXmlPrecompressBytes, ltmHttpClassStatXmlPostcompressBytes=ltmHttpClassStatXmlPostcompressBytes, ltmHttpClassStatSgmlPrecompressBytes=ltmHttpClassStatSgmlPrecompressBytes, ltmHttpClassStatSgmlPostcompressBytes=ltmHttpClassStatSgmlPostcompressBytes, ltmHttpClassStatPlainPrecompressBytes=ltmHttpClassStatPlainPrecompressBytes, ltmHttpClassStatPlainPostcompressBytes=ltmHttpClassStatPlainPostcompressBytes, ltmHttpClassStatOctetPrecompressBytes=ltmHttpClassStatOctetPrecompressBytes, ltmHttpClassStatOctetPostcompressBytes=ltmHttpClassStatOctetPostcompressBytes, ltmHttpClassStatImagePrecompressBytes=ltmHttpClassStatImagePrecompressBytes, ltmHttpClassStatImagePostcompressBytes=ltmHttpClassStatImagePostcompressBytes, ltmHttpClassStatVideoPrecompressBytes=ltmHttpClassStatVideoPrecompressBytes, ltmHttpClassStatVideoPostcompressBytes=ltmHttpClassStatVideoPostcompressBytes, ltmHttpClassStatAudioPrecompressBytes=ltmHttpClassStatAudioPrecompressBytes, ltmHttpClassStatAudioPostcompressBytes=ltmHttpClassStatAudioPostcompressBytes, ltmHttpClassStatOtherPrecompressBytes=ltmHttpClassStatOtherPrecompressBytes, ltmHttpClassStatOtherPostcompressBytes=ltmHttpClassStatOtherPostcompressBytes, ltmHttpClassStatRamcacheHits=ltmHttpClassStatRamcacheHits, ltmHttpClassStatRamcacheMisses=ltmHttpClassStatRamcacheMisses, ltmHttpClassStatRamcacheMissesAll=ltmHttpClassStatRamcacheMissesAll, ltmHttpClassStatRamcacheHitBytes=ltmHttpClassStatRamcacheHitBytes, ltmHttpClassStatRamcacheMissBytes=ltmHttpClassStatRamcacheMissBytes, ltmHttpClassStatRamcacheMissBytesAll=ltmHttpClassStatRamcacheMissBytesAll, ltmIiop=ltmIiop, ltmIiopProfile=ltmIiopProfile, ltmIiopProfileNumber=ltmIiopProfileNumber, ltmIiopProfileTable=ltmIiopProfileTable, ltmIiopProfileEntry=ltmIiopProfileEntry, ltmIiopProfileName=ltmIiopProfileName, ltmIiopProfileConfigSource=ltmIiopProfileConfigSource, ltmIiopProfileDefaultName=ltmIiopProfileDefaultName, ltmIiopProfilePersistRequestId=ltmIiopProfilePersistRequestId, ltmIiopProfilePersistObjectKey=ltmIiopProfilePersistObjectKey, ltmIiopProfileAbortOnTimeout=ltmIiopProfileAbortOnTimeout, ltmIiopProfileTimeout=ltmIiopProfileTimeout, ltmIiopProfileStat=ltmIiopProfileStat, ltmIiopProfileStatResetStats=ltmIiopProfileStatResetStats, ltmIiopProfileStatNumber=ltmIiopProfileStatNumber, ltmIiopProfileStatTable=ltmIiopProfileStatTable, ltmIiopProfileStatEntry=ltmIiopProfileStatEntry, ltmIiopProfileStatName=ltmIiopProfileStatName, ltmIiopProfileStatNumRequests=ltmIiopProfileStatNumRequests, ltmIiopProfileStatNumResponses=ltmIiopProfileStatNumResponses, ltmIiopProfileStatNumCancels=ltmIiopProfileStatNumCancels, ltmIiopProfileStatNumErrors=ltmIiopProfileStatNumErrors, ltmIiopProfileStatNumFragments=ltmIiopProfileStatNumFragments, ltmRtsp=ltmRtsp, ltmRtspProfile=ltmRtspProfile, ltmRtspProfileNumber=ltmRtspProfileNumber, ltmRtspProfileTable=ltmRtspProfileTable, ltmRtspProfileEntry=ltmRtspProfileEntry, ltmRtspProfileName=ltmRtspProfileName, ltmRtspProfileConfigSource=ltmRtspProfileConfigSource, ltmRtspProfileDefaultName=ltmRtspProfileDefaultName, ltmRtspProfileIdleTimeout=ltmRtspProfileIdleTimeout, ltmRtspProfileMaxHeaderSize=ltmRtspProfileMaxHeaderSize, ltmRtspProfileMaxQueuedData=ltmRtspProfileMaxQueuedData, ltmRtspProfileUnicastRedirect=ltmRtspProfileUnicastRedirect, ltmRtspProfileMulticastRedirect=ltmRtspProfileMulticastRedirect, ltmRtspProfileSessionReconnect=ltmRtspProfileSessionReconnect, ltmRtspProfileRealHttpPersistence=ltmRtspProfileRealHttpPersistence, ltmRtspProfileProxy=ltmRtspProfileProxy, ltmRtspProfileProxyHeader=ltmRtspProfileProxyHeader, ltmRtspProfileRtpPort=ltmRtspProfileRtpPort, ltmRtspProfileRtcpPort=ltmRtspProfileRtcpPort, ltmRtspProfileStat=ltmRtspProfileStat, ltmRtspProfileStatResetStats=ltmRtspProfileStatResetStats, ltmRtspProfileStatNumber=ltmRtspProfileStatNumber, ltmRtspProfileStatTable=ltmRtspProfileStatTable, ltmRtspProfileStatEntry=ltmRtspProfileStatEntry, ltmRtspProfileStatName=ltmRtspProfileStatName, ltmRtspProfileStatNumRequests=ltmRtspProfileStatNumRequests, ltmRtspProfileStatNumResponses=ltmRtspProfileStatNumResponses, ltmRtspProfileStatNumErrors=ltmRtspProfileStatNumErrors, ltmRtspProfileStatNumInterleaved=ltmRtspProfileStatNumInterleaved, ltmSctp=ltmSctp, ltmSctpProfile=ltmSctpProfile, ltmSctpProfileNumber=ltmSctpProfileNumber, ltmSctpProfileTable=ltmSctpProfileTable, ltmSctpProfileEntry=ltmSctpProfileEntry, ltmSctpProfileName=ltmSctpProfileName, ltmSctpProfileConfigSource=ltmSctpProfileConfigSource, ltmSctpProfileDefaultName=ltmSctpProfileDefaultName, ltmSctpProfileRcvOrdered=ltmSctpProfileRcvOrdered, ltmSctpProfileSndPartial=ltmSctpProfileSndPartial, ltmSctpProfileTcpShutdown=ltmSctpProfileTcpShutdown, ltmSctpProfileResetOnTimeout=ltmSctpProfileResetOnTimeout, ltmSctpProfileOutStreams=ltmSctpProfileOutStreams, ltmSctpProfileInStreams=ltmSctpProfileInStreams, ltmSctpProfileSndbuf=ltmSctpProfileSndbuf, ltmSctpProfileRcvwnd=ltmSctpProfileRcvwnd, ltmSctpProfileTxChunks=ltmSctpProfileTxChunks, ltmSctpProfileRxChunks=ltmSctpProfileRxChunks, ltmSctpProfileCookieExpiration=ltmSctpProfileCookieExpiration, ltmSctpProfileInitMaxrtx=ltmSctpProfileInitMaxrtx, ltmSctpProfileAssocMaxrtx=ltmSctpProfileAssocMaxrtx, ltmSctpProfileProxyBufferLow=ltmSctpProfileProxyBufferLow, ltmSctpProfileProxyBufferHigh=ltmSctpProfileProxyBufferHigh, ltmSctpProfileIdleTimeout=ltmSctpProfileIdleTimeout, ltmSctpProfileHeartbeatInterval=ltmSctpProfileHeartbeatInterval, ltmSctpProfileIpTosToPeer=ltmSctpProfileIpTosToPeer, ltmSctpProfileLinkQosToPeer=ltmSctpProfileLinkQosToPeer, ltmSctpProfileSecret=ltmSctpProfileSecret, ltmSctpProfileStat=ltmSctpProfileStat, ltmSctpProfileStatResetStats=ltmSctpProfileStatResetStats)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmSctpProfileStatNumber=ltmSctpProfileStatNumber, ltmSctpProfileStatTable=ltmSctpProfileStatTable, ltmSctpProfileStatEntry=ltmSctpProfileStatEntry, ltmSctpProfileStatName=ltmSctpProfileStatName, ltmSctpProfileStatAccepts=ltmSctpProfileStatAccepts, ltmSctpProfileStatAcceptfails=ltmSctpProfileStatAcceptfails, ltmSctpProfileStatConnects=ltmSctpProfileStatConnects, ltmSctpProfileStatConnfails=ltmSctpProfileStatConnfails, ltmSctpProfileStatExpires=ltmSctpProfileStatExpires, ltmSctpProfileStatAbandons=ltmSctpProfileStatAbandons, ltmSctpProfileStatRxrst=ltmSctpProfileStatRxrst, ltmSctpProfileStatRxbadsum=ltmSctpProfileStatRxbadsum, ltmSctpProfileStatRxcookie=ltmSctpProfileStatRxcookie, ltmSctpProfileStatRxbadcookie=ltmSctpProfileStatRxbadcookie, ltmUserStat=ltmUserStat, ltmUserStatProfile=ltmUserStatProfile, ltmUserStatProfileNumber=ltmUserStatProfileNumber, ltmUserStatProfileTable=ltmUserStatProfileTable, ltmUserStatProfileEntry=ltmUserStatProfileEntry, ltmUserStatProfileName=ltmUserStatProfileName, ltmUserStatProfileConfigSource=ltmUserStatProfileConfigSource, ltmUserStatProfileDefaultName=ltmUserStatProfileDefaultName, ltmUserStatProfileStat=ltmUserStatProfileStat, ltmUserStatProfileStatResetStats=ltmUserStatProfileStatResetStats, ltmUserStatProfileStatNumber=ltmUserStatProfileStatNumber, ltmUserStatProfileStatTable=ltmUserStatProfileStatTable, ltmUserStatProfileStatEntry=ltmUserStatProfileStatEntry, ltmUserStatProfileStatName=ltmUserStatProfileStatName, ltmUserStatProfileStatFieldId=ltmUserStatProfileStatFieldId, ltmUserStatProfileStatFieldName=ltmUserStatProfileStatFieldName, ltmUserStatProfileStatFieldValue=ltmUserStatProfileStatFieldValue, ltmSip=ltmSip, ltmSipProfile=ltmSipProfile, ltmSipProfileNumber=ltmSipProfileNumber, ltmSipProfileTable=ltmSipProfileTable, ltmSipProfileEntry=ltmSipProfileEntry, ltmSipProfileName=ltmSipProfileName, ltmSipProfileConfigSource=ltmSipProfileConfigSource, ltmSipProfileDefaultName=ltmSipProfileDefaultName, ltmSipProfileMaxSize=ltmSipProfileMaxSize, ltmSipProfileTerminateBye=ltmSipProfileTerminateBye, ltmSipProfileInsertVia=ltmSipProfileInsertVia, ltmSipProfileSecureVia=ltmSipProfileSecureVia, ltmSipProfileInsertRecordRoute=ltmSipProfileInsertRecordRoute, ltmSipProfileFirewallEnabled=ltmSipProfileFirewallEnabled, ltmSipProfileStat=ltmSipProfileStat, ltmSipProfileStatResetStats=ltmSipProfileStatResetStats, ltmSipProfileStatNumber=ltmSipProfileStatNumber, ltmSipProfileStatTable=ltmSipProfileStatTable, ltmSipProfileStatEntry=ltmSipProfileStatEntry, ltmSipProfileStatName=ltmSipProfileStatName, ltmSipProfileStatRequests=ltmSipProfileStatRequests, ltmSipProfileStatResponses=ltmSipProfileStatResponses, ltmSipProfileStatBadmsgs=ltmSipProfileStatBadmsgs, ltmSipProfileStatDrops=ltmSipProfileStatDrops, ltmIsession=ltmIsession, ltmIsessionProfile=ltmIsessionProfile, ltmIsessionProfileNumber=ltmIsessionProfileNumber, ltmIsessionProfileTable=ltmIsessionProfileTable, ltmIsessionProfileEntry=ltmIsessionProfileEntry, ltmIsessionProfileName=ltmIsessionProfileName, ltmIsessionProfileMode=ltmIsessionProfileMode, ltmIsessionProfileConnectionReuse=ltmIsessionProfileConnectionReuse, ltmIsessionProfileCompressionNull=ltmIsessionProfileCompressionNull, ltmIsessionProfileCompressionDeflate=ltmIsessionProfileCompressionDeflate, ltmIsessionProfileCompressionLzo=ltmIsessionProfileCompressionLzo, ltmIsessionProfileCompressionAdaptive=ltmIsessionProfileCompressionAdaptive, ltmIsessionProfileDeduplication=ltmIsessionProfileDeduplication, ltmIsessionProfilePortTransparency=ltmIsessionProfilePortTransparency, ltmIsessionProfileTargetVirtual=ltmIsessionProfileTargetVirtual, ltmIsessionProfileEndpointPool=ltmIsessionProfileEndpointPool, ltmIsessionProfileCompressionDeflateLevel=ltmIsessionProfileCompressionDeflateLevel, ltmIsessionProfileCompressionBzip2=ltmIsessionProfileCompressionBzip2, ltmIsessionProfileCompression=ltmIsessionProfileCompression, ltmIsessionProfileCompressionCodecs=ltmIsessionProfileCompressionCodecs, ltmIsessionProfileStat=ltmIsessionProfileStat, ltmIsessionProfileStatResetStats=ltmIsessionProfileStatResetStats, ltmIsessionProfileStatNumber=ltmIsessionProfileStatNumber, ltmIsessionProfileStatTable=ltmIsessionProfileStatTable, ltmIsessionProfileStatEntry=ltmIsessionProfileStatEntry, ltmIsessionProfileStatVsName=ltmIsessionProfileStatVsName, ltmIsessionProfileStatProfileName=ltmIsessionProfileStatProfileName, ltmIsessionProfileStatNullInUses=ltmIsessionProfileStatNullInUses, ltmIsessionProfileStatNullInErrors=ltmIsessionProfileStatNullInErrors, ltmIsessionProfileStatNullInBytesOpt=ltmIsessionProfileStatNullInBytesOpt, ltmIsessionProfileStatNullInBytesRaw=ltmIsessionProfileStatNullInBytesRaw, ltmIsessionProfileStatNullOutUses=ltmIsessionProfileStatNullOutUses, ltmIsessionProfileStatNullOutErrors=ltmIsessionProfileStatNullOutErrors, ltmIsessionProfileStatNullOutBytesOpt=ltmIsessionProfileStatNullOutBytesOpt, ltmIsessionProfileStatNullOutBytesRaw=ltmIsessionProfileStatNullOutBytesRaw, ltmIsessionProfileStatLzoInUses=ltmIsessionProfileStatLzoInUses, ltmIsessionProfileStatLzoInErrors=ltmIsessionProfileStatLzoInErrors, ltmIsessionProfileStatLzoInBytesOpt=ltmIsessionProfileStatLzoInBytesOpt, ltmIsessionProfileStatLzoInBytesRaw=ltmIsessionProfileStatLzoInBytesRaw, ltmIsessionProfileStatLzoOutUses=ltmIsessionProfileStatLzoOutUses, ltmIsessionProfileStatLzoOutErrors=ltmIsessionProfileStatLzoOutErrors, ltmIsessionProfileStatLzoOutBytesOpt=ltmIsessionProfileStatLzoOutBytesOpt, ltmIsessionProfileStatLzoOutBytesRaw=ltmIsessionProfileStatLzoOutBytesRaw, ltmIsessionProfileStatDeflateInUses=ltmIsessionProfileStatDeflateInUses, ltmIsessionProfileStatDeflateInErrors=ltmIsessionProfileStatDeflateInErrors, ltmIsessionProfileStatDeflateInBytesOpt=ltmIsessionProfileStatDeflateInBytesOpt, ltmIsessionProfileStatDeflateInBytesRaw=ltmIsessionProfileStatDeflateInBytesRaw, ltmIsessionProfileStatDeflateOutUses=ltmIsessionProfileStatDeflateOutUses, ltmIsessionProfileStatDeflateOutErrors=ltmIsessionProfileStatDeflateOutErrors, ltmIsessionProfileStatDeflateOutBytesOpt=ltmIsessionProfileStatDeflateOutBytesOpt, ltmIsessionProfileStatDeflateOutBytesRaw=ltmIsessionProfileStatDeflateOutBytesRaw, ltmIsessionProfileStatDedupInUses=ltmIsessionProfileStatDedupInUses, ltmIsessionProfileStatDedupInErrors=ltmIsessionProfileStatDedupInErrors, ltmIsessionProfileStatDedupInBytesOpt=ltmIsessionProfileStatDedupInBytesOpt, ltmIsessionProfileStatDedupInBytesRaw=ltmIsessionProfileStatDedupInBytesRaw, ltmIsessionProfileStatDedupOutUses=ltmIsessionProfileStatDedupOutUses, ltmIsessionProfileStatDedupOutErrors=ltmIsessionProfileStatDedupOutErrors, ltmIsessionProfileStatDedupOutBytesOpt=ltmIsessionProfileStatDedupOutBytesOpt, ltmIsessionProfileStatDedupOutBytesRaw=ltmIsessionProfileStatDedupOutBytesRaw, ltmIsessionProfileStatDedupInHits=ltmIsessionProfileStatDedupInHits, ltmIsessionProfileStatDedupInHitBytes=ltmIsessionProfileStatDedupInHitBytes, ltmIsessionProfileStatDedupInHitHistBucket1k=ltmIsessionProfileStatDedupInHitHistBucket1k, ltmIsessionProfileStatDedupInHitHistBucket2k=ltmIsessionProfileStatDedupInHitHistBucket2k, ltmIsessionProfileStatDedupInHitHistBucket4k=ltmIsessionProfileStatDedupInHitHistBucket4k, ltmIsessionProfileStatDedupInHitHistBucket8k=ltmIsessionProfileStatDedupInHitHistBucket8k, ltmIsessionProfileStatDedupInHitHistBucket16k=ltmIsessionProfileStatDedupInHitHistBucket16k, ltmIsessionProfileStatDedupInHitHistBucket32k=ltmIsessionProfileStatDedupInHitHistBucket32k, ltmIsessionProfileStatDedupInHitHistBucket64k=ltmIsessionProfileStatDedupInHitHistBucket64k, ltmIsessionProfileStatDedupInHitHistBucket128k=ltmIsessionProfileStatDedupInHitHistBucket128k, ltmIsessionProfileStatDedupInHitHistBucket256k=ltmIsessionProfileStatDedupInHitHistBucket256k, ltmIsessionProfileStatDedupInHitHistBucket512k=ltmIsessionProfileStatDedupInHitHistBucket512k, ltmIsessionProfileStatDedupInHitHistBucket1m=ltmIsessionProfileStatDedupInHitHistBucket1m)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmIsessionProfileStatDedupInHitHistBucketLarge=ltmIsessionProfileStatDedupInHitHistBucketLarge, ltmIsessionProfileStatDedupInMisses=ltmIsessionProfileStatDedupInMisses, ltmIsessionProfileStatDedupInMissBytes=ltmIsessionProfileStatDedupInMissBytes, ltmIsessionProfileStatDedupInMissHistBucket1k=ltmIsessionProfileStatDedupInMissHistBucket1k, ltmIsessionProfileStatDedupInMissHistBucket2k=ltmIsessionProfileStatDedupInMissHistBucket2k, ltmIsessionProfileStatDedupInMissHistBucket4k=ltmIsessionProfileStatDedupInMissHistBucket4k, ltmIsessionProfileStatDedupInMissHistBucket8k=ltmIsessionProfileStatDedupInMissHistBucket8k, ltmIsessionProfileStatDedupInMissHistBucket16k=ltmIsessionProfileStatDedupInMissHistBucket16k, ltmIsessionProfileStatDedupInMissHistBucket32k=ltmIsessionProfileStatDedupInMissHistBucket32k, ltmIsessionProfileStatDedupInMissHistBucket64k=ltmIsessionProfileStatDedupInMissHistBucket64k, ltmIsessionProfileStatDedupInMissHistBucket128k=ltmIsessionProfileStatDedupInMissHistBucket128k, ltmIsessionProfileStatDedupInMissHistBucket256k=ltmIsessionProfileStatDedupInMissHistBucket256k, ltmIsessionProfileStatDedupInMissHistBucket512k=ltmIsessionProfileStatDedupInMissHistBucket512k, ltmIsessionProfileStatDedupInMissHistBucket1m=ltmIsessionProfileStatDedupInMissHistBucket1m, ltmIsessionProfileStatDedupInMissHistBucketLarge=ltmIsessionProfileStatDedupInMissHistBucketLarge, ltmIsessionProfileStatDedupOutHits=ltmIsessionProfileStatDedupOutHits, ltmIsessionProfileStatDedupOutHitBytes=ltmIsessionProfileStatDedupOutHitBytes, ltmIsessionProfileStatDedupOutHitHistBucket1k=ltmIsessionProfileStatDedupOutHitHistBucket1k, ltmIsessionProfileStatDedupOutHitHistBucket2k=ltmIsessionProfileStatDedupOutHitHistBucket2k, ltmIsessionProfileStatDedupOutHitHistBucket4k=ltmIsessionProfileStatDedupOutHitHistBucket4k, ltmIsessionProfileStatDedupOutHitHistBucket8k=ltmIsessionProfileStatDedupOutHitHistBucket8k, ltmIsessionProfileStatDedupOutHitHistBucket16k=ltmIsessionProfileStatDedupOutHitHistBucket16k, ltmIsessionProfileStatDedupOutHitHistBucket32k=ltmIsessionProfileStatDedupOutHitHistBucket32k, ltmIsessionProfileStatDedupOutHitHistBucket64k=ltmIsessionProfileStatDedupOutHitHistBucket64k, ltmIsessionProfileStatDedupOutHitHistBucket128k=ltmIsessionProfileStatDedupOutHitHistBucket128k, ltmIsessionProfileStatDedupOutHitHistBucket256k=ltmIsessionProfileStatDedupOutHitHistBucket256k, ltmIsessionProfileStatDedupOutHitHistBucket512k=ltmIsessionProfileStatDedupOutHitHistBucket512k, ltmIsessionProfileStatDedupOutHitHistBucket1m=ltmIsessionProfileStatDedupOutHitHistBucket1m, ltmIsessionProfileStatDedupOutHitHistBucketLarge=ltmIsessionProfileStatDedupOutHitHistBucketLarge, ltmIsessionProfileStatDedupOutMisses=ltmIsessionProfileStatDedupOutMisses, ltmIsessionProfileStatDedupOutMissBytes=ltmIsessionProfileStatDedupOutMissBytes, ltmIsessionProfileStatDedupOutMissHistBucket1k=ltmIsessionProfileStatDedupOutMissHistBucket1k, ltmIsessionProfileStatDedupOutMissHistBucket2k=ltmIsessionProfileStatDedupOutMissHistBucket2k, ltmIsessionProfileStatDedupOutMissHistBucket4k=ltmIsessionProfileStatDedupOutMissHistBucket4k, ltmIsessionProfileStatDedupOutMissHistBucket8k=ltmIsessionProfileStatDedupOutMissHistBucket8k, ltmIsessionProfileStatDedupOutMissHistBucket16k=ltmIsessionProfileStatDedupOutMissHistBucket16k, ltmIsessionProfileStatDedupOutMissHistBucket32k=ltmIsessionProfileStatDedupOutMissHistBucket32k, ltmIsessionProfileStatDedupOutMissHistBucket64k=ltmIsessionProfileStatDedupOutMissHistBucket64k, ltmIsessionProfileStatDedupOutMissHistBucket128k=ltmIsessionProfileStatDedupOutMissHistBucket128k, ltmIsessionProfileStatDedupOutMissHistBucket256k=ltmIsessionProfileStatDedupOutMissHistBucket256k, ltmIsessionProfileStatDedupOutMissHistBucket512k=ltmIsessionProfileStatDedupOutMissHistBucket512k, ltmIsessionProfileStatDedupOutMissHistBucket1m=ltmIsessionProfileStatDedupOutMissHistBucket1m, ltmIsessionProfileStatDedupOutMissHistBucketLarge=ltmIsessionProfileStatDedupOutMissHistBucketLarge, ltmIsessionProfileStatOutgoingConnsIdleCur=ltmIsessionProfileStatOutgoingConnsIdleCur, ltmIsessionProfileStatOutgoingConnsIdleMax=ltmIsessionProfileStatOutgoingConnsIdleMax, ltmIsessionProfileStatOutgoingConnsIdleTot=ltmIsessionProfileStatOutgoingConnsIdleTot, ltmIsessionProfileStatOutgoingConnsActiveCur=ltmIsessionProfileStatOutgoingConnsActiveCur, ltmIsessionProfileStatOutgoingConnsActiveMax=ltmIsessionProfileStatOutgoingConnsActiveMax, ltmIsessionProfileStatOutgoingConnsActiveTot=ltmIsessionProfileStatOutgoingConnsActiveTot, ltmIsessionProfileStatOutgoingConnsErrors=ltmIsessionProfileStatOutgoingConnsErrors, ltmIsessionProfileStatOutgoingConnsPassthruTot=ltmIsessionProfileStatOutgoingConnsPassthruTot, ltmIsessionProfileStatIncomingConnsActiveCur=ltmIsessionProfileStatIncomingConnsActiveCur, ltmIsessionProfileStatIncomingConnsActiveMax=ltmIsessionProfileStatIncomingConnsActiveMax, ltmIsessionProfileStatIncomingConnsActiveTot=ltmIsessionProfileStatIncomingConnsActiveTot, ltmIsessionProfileStatIncomingConnsErrors=ltmIsessionProfileStatIncomingConnsErrors, ltmIsessionProfileStatBzip2InUses=ltmIsessionProfileStatBzip2InUses, ltmIsessionProfileStatBzip2InErrors=ltmIsessionProfileStatBzip2InErrors, ltmIsessionProfileStatBzip2InBytesOpt=ltmIsessionProfileStatBzip2InBytesOpt, ltmIsessionProfileStatBzip2InBytesRaw=ltmIsessionProfileStatBzip2InBytesRaw, ltmIsessionProfileStatBzip2OutUses=ltmIsessionProfileStatBzip2OutUses, ltmIsessionProfileStatBzip2OutErrors=ltmIsessionProfileStatBzip2OutErrors, ltmIsessionProfileStatBzip2OutBytesOpt=ltmIsessionProfileStatBzip2OutBytesOpt, ltmIsessionProfileStatBzip2OutBytesRaw=ltmIsessionProfileStatBzip2OutBytesRaw, ltmHttpCompression=ltmHttpCompression, ltmHttpCompressionProfile=ltmHttpCompressionProfile, ltmHttpCompressionProfileNumber=ltmHttpCompressionProfileNumber, ltmHttpCompressionProfileTable=ltmHttpCompressionProfileTable, ltmHttpCompressionProfileEntry=ltmHttpCompressionProfileEntry, ltmHttpCompressionProfileName=ltmHttpCompressionProfileName, ltmHttpCompressionProfileConfigSource=ltmHttpCompressionProfileConfigSource, ltmHttpCompressionProfileDefaultName=ltmHttpCompressionProfileDefaultName, ltmHttpCompressionProfileSelective=ltmHttpCompressionProfileSelective, ltmHttpCompressionProfileMinSize=ltmHttpCompressionProfileMinSize, ltmHttpCompressionProfileBufferSize=ltmHttpCompressionProfileBufferSize, ltmHttpCompressionProfileVaryHeader=ltmHttpCompressionProfileVaryHeader, ltmHttpCompressionProfileAllowHttp10=ltmHttpCompressionProfileAllowHttp10, ltmHttpCompressionProfileGzipMemlevel=ltmHttpCompressionProfileGzipMemlevel, ltmHttpCompressionProfileGzipWindowsize=ltmHttpCompressionProfileGzipWindowsize, ltmHttpCompressionProfileGzipLevel=ltmHttpCompressionProfileGzipLevel, ltmHttpCompressionProfileKeepAcceptEncoding=ltmHttpCompressionProfileKeepAcceptEncoding, ltmHttpCompressionProfileBrowserWorkarounds=ltmHttpCompressionProfileBrowserWorkarounds, ltmHttpCompressionProfileCpusaver=ltmHttpCompressionProfileCpusaver, ltmHttpCompressionProfileCpusaverHigh=ltmHttpCompressionProfileCpusaverHigh, ltmHttpCompressionProfileCpusaverLow=ltmHttpCompressionProfileCpusaverLow, ltmHttpCompressionProfilePreferredMethod=ltmHttpCompressionProfilePreferredMethod, ltmHttpCompressionProfileUriIncl=ltmHttpCompressionProfileUriIncl, ltmHttpcompUriInclNumber=ltmHttpcompUriInclNumber, ltmHttpcompUriInclTable=ltmHttpcompUriInclTable, ltmHttpcompUriInclEntry=ltmHttpcompUriInclEntry, ltmHttpcompUriInclName=ltmHttpcompUriInclName, ltmHttpcompUriInclIndex=ltmHttpcompUriInclIndex, ltmHttpcompUriInclUri=ltmHttpcompUriInclUri, ltmHttpCompressionProfileUriExcl=ltmHttpCompressionProfileUriExcl, ltmHttpcompUriExclNumber=ltmHttpcompUriExclNumber, ltmHttpcompUriExclTable=ltmHttpcompUriExclTable, ltmHttpcompUriExclEntry=ltmHttpcompUriExclEntry, ltmHttpcompUriExclName=ltmHttpcompUriExclName, ltmHttpcompUriExclIndex=ltmHttpcompUriExclIndex, ltmHttpcompUriExclUri=ltmHttpcompUriExclUri, ltmHttpCompressionProfileContTypeIncl=ltmHttpCompressionProfileContTypeIncl, ltmHttpcompContTypeInclNumber=ltmHttpcompContTypeInclNumber, ltmHttpcompContTypeInclTable=ltmHttpcompContTypeInclTable, ltmHttpcompContTypeInclEntry=ltmHttpcompContTypeInclEntry, ltmHttpcompContTypeInclName=ltmHttpcompContTypeInclName, ltmHttpcompContTypeInclIndex=ltmHttpcompContTypeInclIndex, ltmHttpcompContTypeInclContentType=ltmHttpcompContTypeInclContentType, ltmHttpCompressionProfileContTypeExcl=ltmHttpCompressionProfileContTypeExcl, ltmHttpcompContTypeExclNumber=ltmHttpcompContTypeExclNumber, ltmHttpcompContTypeExclTable=ltmHttpcompContTypeExclTable, ltmHttpcompContTypeExclEntry=ltmHttpcompContTypeExclEntry, ltmHttpcompContTypeExclName=ltmHttpcompContTypeExclName, ltmHttpcompContTypeExclIndex=ltmHttpcompContTypeExclIndex, ltmHttpcompContTypeExclContentType=ltmHttpcompContTypeExclContentType, ltmHttpCompressionProfileStat=ltmHttpCompressionProfileStat, ltmHttpCompressionProfileStatResetStats=ltmHttpCompressionProfileStatResetStats, ltmHttpCompressionProfileStatNumber=ltmHttpCompressionProfileStatNumber, ltmHttpCompressionProfileStatTable=ltmHttpCompressionProfileStatTable, ltmHttpCompressionProfileStatEntry=ltmHttpCompressionProfileStatEntry, ltmHttpCompressionProfileStatName=ltmHttpCompressionProfileStatName, ltmHttpCompressionProfileStatPrecompressBytes=ltmHttpCompressionProfileStatPrecompressBytes, ltmHttpCompressionProfileStatPostcompressBytes=ltmHttpCompressionProfileStatPostcompressBytes, ltmHttpCompressionProfileStatNullCompressBytes=ltmHttpCompressionProfileStatNullCompressBytes, ltmHttpCompressionProfileStatHtmlPrecompressBytes=ltmHttpCompressionProfileStatHtmlPrecompressBytes, ltmHttpCompressionProfileStatHtmlPostcompressBytes=ltmHttpCompressionProfileStatHtmlPostcompressBytes, ltmHttpCompressionProfileStatCssPrecompressBytes=ltmHttpCompressionProfileStatCssPrecompressBytes, ltmHttpCompressionProfileStatCssPostcompressBytes=ltmHttpCompressionProfileStatCssPostcompressBytes, ltmHttpCompressionProfileStatJsPrecompressBytes=ltmHttpCompressionProfileStatJsPrecompressBytes)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmHttpCompressionProfileStatJsPostcompressBytes=ltmHttpCompressionProfileStatJsPostcompressBytes, ltmHttpCompressionProfileStatXmlPrecompressBytes=ltmHttpCompressionProfileStatXmlPrecompressBytes, ltmHttpCompressionProfileStatXmlPostcompressBytes=ltmHttpCompressionProfileStatXmlPostcompressBytes, ltmHttpCompressionProfileStatSgmlPrecompressBytes=ltmHttpCompressionProfileStatSgmlPrecompressBytes, ltmHttpCompressionProfileStatSgmlPostcompressBytes=ltmHttpCompressionProfileStatSgmlPostcompressBytes, ltmHttpCompressionProfileStatPlainPrecompressBytes=ltmHttpCompressionProfileStatPlainPrecompressBytes, ltmHttpCompressionProfileStatPlainPostcompressBytes=ltmHttpCompressionProfileStatPlainPostcompressBytes, ltmHttpCompressionProfileStatOctetPrecompressBytes=ltmHttpCompressionProfileStatOctetPrecompressBytes, ltmHttpCompressionProfileStatOctetPostcompressBytes=ltmHttpCompressionProfileStatOctetPostcompressBytes, ltmHttpCompressionProfileStatImagePrecompressBytes=ltmHttpCompressionProfileStatImagePrecompressBytes, ltmHttpCompressionProfileStatImagePostcompressBytes=ltmHttpCompressionProfileStatImagePostcompressBytes, ltmHttpCompressionProfileStatVideoPrecompressBytes=ltmHttpCompressionProfileStatVideoPrecompressBytes, ltmHttpCompressionProfileStatVideoPostcompressBytes=ltmHttpCompressionProfileStatVideoPostcompressBytes, ltmHttpCompressionProfileStatAudioPrecompressBytes=ltmHttpCompressionProfileStatAudioPrecompressBytes, ltmHttpCompressionProfileStatAudioPostcompressBytes=ltmHttpCompressionProfileStatAudioPostcompressBytes, ltmHttpCompressionProfileStatOtherPrecompressBytes=ltmHttpCompressionProfileStatOtherPrecompressBytes, ltmHttpCompressionProfileStatOtherPostcompressBytes=ltmHttpCompressionProfileStatOtherPostcompressBytes, ltmWebAcceleration=ltmWebAcceleration, ltmWebAccelerationProfile=ltmWebAccelerationProfile, ltmWebAccelerationProfileNumber=ltmWebAccelerationProfileNumber, ltmWebAccelerationProfileTable=ltmWebAccelerationProfileTable, ltmWebAccelerationProfileEntry=ltmWebAccelerationProfileEntry, ltmWebAccelerationProfileName=ltmWebAccelerationProfileName, ltmWebAccelerationProfileConfigSource=ltmWebAccelerationProfileConfigSource, ltmWebAccelerationProfileDefaultName=ltmWebAccelerationProfileDefaultName, ltmWebAccelerationProfileCacheSize=ltmWebAccelerationProfileCacheSize, ltmWebAccelerationProfileCacheMaxEntries=ltmWebAccelerationProfileCacheMaxEntries, ltmWebAccelerationProfileCacheMaxAge=ltmWebAccelerationProfileCacheMaxAge, ltmWebAccelerationProfileCacheObjectMinSize=ltmWebAccelerationProfileCacheObjectMinSize, ltmWebAccelerationProfileCacheObjectMaxSize=ltmWebAccelerationProfileCacheObjectMaxSize, ltmWebAccelerationProfileCacheIgnoreClient=ltmWebAccelerationProfileCacheIgnoreClient, ltmWebAccelerationProfileCacheAgingRate=ltmWebAccelerationProfileCacheAgingRate, ltmWebAccelerationProfileCacheInsertAgeHeader=ltmWebAccelerationProfileCacheInsertAgeHeader, ltmWebAccelerationProfileUriExcl=ltmWebAccelerationProfileUriExcl, ltmWebaccCacheUriExclNumber=ltmWebaccCacheUriExclNumber, ltmWebaccCacheUriExclTable=ltmWebaccCacheUriExclTable, ltmWebaccCacheUriExclEntry=ltmWebaccCacheUriExclEntry, ltmWebaccCacheUriExclName=ltmWebaccCacheUriExclName, ltmWebaccCacheUriExclIndex=ltmWebaccCacheUriExclIndex, ltmWebaccCacheUriExclUri=ltmWebaccCacheUriExclUri, ltmWebAccelerationProfileUriIncl=ltmWebAccelerationProfileUriIncl, ltmWebaccCacheUriInclNumber=ltmWebaccCacheUriInclNumber, ltmWebaccCacheUriInclTable=ltmWebaccCacheUriInclTable, ltmWebaccCacheUriInclEntry=ltmWebaccCacheUriInclEntry, ltmWebaccCacheUriInclName=ltmWebaccCacheUriInclName, ltmWebaccCacheUriInclIndex=ltmWebaccCacheUriInclIndex, ltmWebaccCacheUriInclUri=ltmWebaccCacheUriInclUri, ltmWebAccelerationProfileUriPin=ltmWebAccelerationProfileUriPin, ltmWebaccCacheUriPinNumber=ltmWebaccCacheUriPinNumber, ltmWebaccCacheUriPinTable=ltmWebaccCacheUriPinTable, ltmWebaccCacheUriPinEntry=ltmWebaccCacheUriPinEntry, ltmWebaccCacheUriPinName=ltmWebaccCacheUriPinName, ltmWebaccCacheUriPinIndex=ltmWebaccCacheUriPinIndex, ltmWebaccCacheUriPinUri=ltmWebaccCacheUriPinUri, ltmWebAccelerationProfileStat=ltmWebAccelerationProfileStat, ltmWebAccelerationProfileStatResetStats=ltmWebAccelerationProfileStatResetStats, ltmWebAccelerationProfileStatNumber=ltmWebAccelerationProfileStatNumber, ltmWebAccelerationProfileStatTable=ltmWebAccelerationProfileStatTable, ltmWebAccelerationProfileStatEntry=ltmWebAccelerationProfileStatEntry, ltmWebAccelerationProfileStatName=ltmWebAccelerationProfileStatName, ltmWebAccelerationProfileStatCacheHits=ltmWebAccelerationProfileStatCacheHits, ltmWebAccelerationProfileStatCacheMisses=ltmWebAccelerationProfileStatCacheMisses, ltmWebAccelerationProfileStatCacheMissesAll=ltmWebAccelerationProfileStatCacheMissesAll, ltmWebAccelerationProfileStatCacheHitBytes=ltmWebAccelerationProfileStatCacheHitBytes, ltmWebAccelerationProfileStatCacheMissBytes=ltmWebAccelerationProfileStatCacheMissBytes, ltmWebAccelerationProfileStatCacheMissBytesAll=ltmWebAccelerationProfileStatCacheMissBytesAll, ltmWebAccelerationProfileStatCacheSize=ltmWebAccelerationProfileStatCacheSize, ltmWebAccelerationProfileStatCacheCount=ltmWebAccelerationProfileStatCacheCount, ltmWebAccelerationProfileStatCacheEvictions=ltmWebAccelerationProfileStatCacheEvictions, ltmWebAccelerationProfileStatInterStripeHits=ltmWebAccelerationProfileStatInterStripeHits, ltmWebAccelerationProfileStatInterStripeMisses=ltmWebAccelerationProfileStatInterStripeMisses, ltmWebAccelerationProfileStatInterStripeHitBytes=ltmWebAccelerationProfileStatInterStripeHitBytes, ltmWebAccelerationProfileStatInterStripeSize=ltmWebAccelerationProfileStatInterStripeSize, ltmWebAccelerationProfileStatInterStripeCount=ltmWebAccelerationProfileStatInterStripeCount, ltmWebAccelerationProfileStatInterStripeEvictions=ltmWebAccelerationProfileStatInterStripeEvictions, ltmWebAccelerationProfileStatRemoteHits=ltmWebAccelerationProfileStatRemoteHits, ltmWebAccelerationProfileStatRemoteMisses=ltmWebAccelerationProfileStatRemoteMisses, ltmWebAccelerationProfileStatRemoteHitBytes=ltmWebAccelerationProfileStatRemoteHitBytes, ltmWebAccelerationProfileUriOver=ltmWebAccelerationProfileUriOver, ltmWebaccCacheUriOverNumber=ltmWebaccCacheUriOverNumber, ltmWebaccCacheUriOverTable=ltmWebaccCacheUriOverTable, ltmWebaccCacheUriOverEntry=ltmWebaccCacheUriOverEntry, ltmWebaccCacheUriOverName=ltmWebaccCacheUriOverName, ltmWebaccCacheUriOverIndex=ltmWebaccCacheUriOverIndex, ltmWebaccCacheUriOverUri=ltmWebaccCacheUriOverUri, ltmDos=ltmDos, ltmDosProfile=ltmDosProfile, ltmDosProfileNumber=ltmDosProfileNumber, ltmDosProfileTable=ltmDosProfileTable, ltmDosProfileEntry=ltmDosProfileEntry, ltmDosProfileName=ltmDosProfileName, ltmDosProfileConfigSource=ltmDosProfileConfigSource, ltmDosProfileDefaultName=ltmDosProfileDefaultName, ltmDosApplication=ltmDosApplication, ltmDosApplicationNumber=ltmDosApplicationNumber, ltmDosApplicationTable=ltmDosApplicationTable, ltmDosApplicationEntry=ltmDosApplicationEntry, ltmDosApplicationProfileName=ltmDosApplicationProfileName, ltmDosApplicationName=ltmDosApplicationName, ltmDosApplicationTriggerIrule=ltmDosApplicationTriggerIrule, ltmDosApplicationTpsBasedMode=ltmDosApplicationTpsBasedMode, ltmDosApplicationLatencyBasedMode=ltmDosApplicationLatencyBasedMode, ltmDosApplicationTpsBasedIpClientSideDefense=ltmDosApplicationTpsBasedIpClientSideDefense, ltmDosApplicationTpsBasedUrlClientSideDefense=ltmDosApplicationTpsBasedUrlClientSideDefense, ltmDosApplicationTpsBasedIpRateLimiting=ltmDosApplicationTpsBasedIpRateLimiting, ltmDosApplicationTpsBasedUrlRateLimiting=ltmDosApplicationTpsBasedUrlRateLimiting, ltmDosApplicationTpsBasedIpTpsIncreaseRate=ltmDosApplicationTpsBasedIpTpsIncreaseRate, ltmDosApplicationTpsBasedIpMaximumTps=ltmDosApplicationTpsBasedIpMaximumTps, ltmDosApplicationTpsBasedIpMinimumTps=ltmDosApplicationTpsBasedIpMinimumTps, ltmDosApplicationTpsBasedUrlTpsIncreaseRate=ltmDosApplicationTpsBasedUrlTpsIncreaseRate, ltmDosApplicationTpsBasedUrlMaximumTps=ltmDosApplicationTpsBasedUrlMaximumTps, ltmDosApplicationTpsBasedUrlMinimumTps=ltmDosApplicationTpsBasedUrlMinimumTps, ltmDosApplicationTpsBasedMaximumPreventionDuration=ltmDosApplicationTpsBasedMaximumPreventionDuration, ltmDosApplicationLatencyIncreaseRate=ltmDosApplicationLatencyIncreaseRate, ltmDosApplicationMaximumLatency=ltmDosApplicationMaximumLatency, ltmDosApplicationMinimumLatency=ltmDosApplicationMinimumLatency, ltmDosApplicationLatencyBasedIpClientSideDefense=ltmDosApplicationLatencyBasedIpClientSideDefense, ltmDosApplicationLatencyBasedUrlClientSideDefense=ltmDosApplicationLatencyBasedUrlClientSideDefense, ltmDosApplicationLatencyBasedIpRateLimiting=ltmDosApplicationLatencyBasedIpRateLimiting, ltmDosApplicationLatencyBasedUrlRateLimiting=ltmDosApplicationLatencyBasedUrlRateLimiting, ltmDosApplicationLatencyBasedIpTpsIncreaseRate=ltmDosApplicationLatencyBasedIpTpsIncreaseRate, ltmDosApplicationLatencyBasedIpMaximumTps=ltmDosApplicationLatencyBasedIpMaximumTps, ltmDosApplicationLatencyBasedIpMinimumTps=ltmDosApplicationLatencyBasedIpMinimumTps, ltmDosApplicationLatencyBasedUrlTpsIncreaseRate=ltmDosApplicationLatencyBasedUrlTpsIncreaseRate, ltmDosApplicationLatencyBasedUrlMaximumTps=ltmDosApplicationLatencyBasedUrlMaximumTps, ltmDosApplicationLatencyBasedUrlMinimumTps=ltmDosApplicationLatencyBasedUrlMinimumTps, ltmDosApplicationLatencyBasedMaximumPreventionDuration=ltmDosApplicationLatencyBasedMaximumPreventionDuration)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmDosWhiteIp=ltmDosWhiteIp, ltmDosWhiteIpNumber=ltmDosWhiteIpNumber, ltmDosWhiteIpTable=ltmDosWhiteIpTable, ltmDosWhiteIpEntry=ltmDosWhiteIpEntry, ltmDosWhiteIpParentProfile=ltmDosWhiteIpParentProfile, ltmDosWhiteIpParentName=ltmDosWhiteIpParentName, ltmDosWhiteIpAddressType=ltmDosWhiteIpAddressType, ltmDosWhiteIpAddress=ltmDosWhiteIpAddress, ltmDosWhiteIpNetmaskType=ltmDosWhiteIpNetmaskType, ltmDosWhiteIpNetmask=ltmDosWhiteIpNetmask, ltmSpdy=ltmSpdy, ltmSpdyProfile=ltmSpdyProfile, ltmSpdyProfileNumber=ltmSpdyProfileNumber, ltmSpdyProfileTable=ltmSpdyProfileTable, ltmSpdyProfileEntry=ltmSpdyProfileEntry, ltmSpdyProfileName=ltmSpdyProfileName, ltmSpdyProfileConfigSource=ltmSpdyProfileConfigSource, ltmSpdyProfileDefaultName=ltmSpdyProfileDefaultName, ltmSpdyProfileActivationMode=ltmSpdyProfileActivationMode, ltmSpdyProfilePriorityHandling=ltmSpdyProfilePriorityHandling, ltmSpdyProfileInsertHeader=ltmSpdyProfileInsertHeader, ltmSpdyProfileInsertHeaderName=ltmSpdyProfileInsertHeaderName, ltmSpdyProfileConcurrentStreamsPerConnection=ltmSpdyProfileConcurrentStreamsPerConnection, ltmSpdyProfileConnectionIdleTimeout=ltmSpdyProfileConnectionIdleTimeout, ltmSpdyProfileReceiveWindow=ltmSpdyProfileReceiveWindow, ltmSpdyProfileFrameSize=ltmSpdyProfileFrameSize, ltmSpdyProfileWriteSize=ltmSpdyProfileWriteSize, ltmSpdyProfileCompressionLevel=ltmSpdyProfileCompressionLevel, ltmSpdyProfileCompressionWindowSize=ltmSpdyProfileCompressionWindowSize, ltmSpdyProfileProtocolVersions=ltmSpdyProfileProtocolVersions, ltmSpdyProfileProtocolVersionsNumber=ltmSpdyProfileProtocolVersionsNumber, ltmSpdyProfileProtocolVersionsTable=ltmSpdyProfileProtocolVersionsTable, ltmSpdyProfileProtocolVersionsEntry=ltmSpdyProfileProtocolVersionsEntry, ltmSpdyProfileProtocolVersionsName=ltmSpdyProfileProtocolVersionsName, ltmSpdyProfileProtocolVersionsIndex=ltmSpdyProfileProtocolVersionsIndex, ltmSpdyProfileProtocolVersionsProtocolVersions=ltmSpdyProfileProtocolVersionsProtocolVersions, ltmSpdyProfileStat=ltmSpdyProfileStat, ltmSpdyProfileStatResetStats=ltmSpdyProfileStatResetStats, ltmSpdyProfileStatNumber=ltmSpdyProfileStatNumber, ltmSpdyProfileStatTable=ltmSpdyProfileStatTable, ltmSpdyProfileStatEntry=ltmSpdyProfileStatEntry, ltmSpdyProfileStatName=ltmSpdyProfileStatName, ltmSpdyProfileStatConnectionsAccepted=ltmSpdyProfileStatConnectionsAccepted, ltmSpdyProfileStatConnectionsCurrent=ltmSpdyProfileStatConnectionsCurrent, ltmSpdyProfileStatConnectionsMax=ltmSpdyProfileStatConnectionsMax, ltmSpdyProfileStatDataFramesReceived=ltmSpdyProfileStatDataFramesReceived, ltmSpdyProfileStatDataFramesSent=ltmSpdyProfileStatDataFramesSent, ltmSpdyProfileStatFlowsCreated=ltmSpdyProfileStatFlowsCreated, ltmSpdyProfileStatFlowsCurrent=ltmSpdyProfileStatFlowsCurrent, ltmSpdyProfileStatFlowsMax=ltmSpdyProfileStatFlowsMax, ltmSpdyProfileStatGoawayFramesReceived=ltmSpdyProfileStatGoawayFramesReceived, ltmSpdyProfileStatGoawayFramesSent=ltmSpdyProfileStatGoawayFramesSent, ltmSpdyProfileStatHeadersFramesReceived=ltmSpdyProfileStatHeadersFramesReceived, ltmSpdyProfileStatHeadersFramesSent=ltmSpdyProfileStatHeadersFramesSent, ltmSpdyProfileStatHttpRequestBytes=ltmSpdyProfileStatHttpRequestBytes, ltmSpdyProfileStatHttpResponseBytes=ltmSpdyProfileStatHttpResponseBytes, ltmSpdyProfileStatNoopFramesReceived=ltmSpdyProfileStatNoopFramesReceived, ltmSpdyProfileStatNoopFramesSent=ltmSpdyProfileStatNoopFramesSent, ltmSpdyProfileStatPingFramesReceived=ltmSpdyProfileStatPingFramesReceived, ltmSpdyProfileStatPingFramesSent=ltmSpdyProfileStatPingFramesSent, ltmSpdyProfileStatRstStreamFramesReceived=ltmSpdyProfileStatRstStreamFramesReceived, ltmSpdyProfileStatRstStreamFramesSent=ltmSpdyProfileStatRstStreamFramesSent, ltmSpdyProfileStatSettingsFramesReceived=ltmSpdyProfileStatSettingsFramesReceived, ltmSpdyProfileStatSettingsFramesSent=ltmSpdyProfileStatSettingsFramesSent, ltmSpdyProfileStatSpdyRequestBytes=ltmSpdyProfileStatSpdyRequestBytes, ltmSpdyProfileStatSpdyRequestFrames=ltmSpdyProfileStatSpdyRequestFrames, ltmSpdyProfileStatSpdyResponseBytes=ltmSpdyProfileStatSpdyResponseBytes, ltmSpdyProfileStatSpdyResponseFrames=ltmSpdyProfileStatSpdyResponseFrames, ltmSpdyProfileStatSynReplyFramesReceived=ltmSpdyProfileStatSynReplyFramesReceived, ltmSpdyProfileStatSynReplyFramesSent=ltmSpdyProfileStatSynReplyFramesSent, ltmSpdyProfileStatSynStreamFramesReceived=ltmSpdyProfileStatSynStreamFramesReceived, ltmSpdyProfileStatSynStreamFramesSent=ltmSpdyProfileStatSynStreamFramesSent, ltmSpdyProfileStatV2StreamsCreated=ltmSpdyProfileStatV2StreamsCreated, ltmSpdyProfileStatV2StreamsCurrent=ltmSpdyProfileStatV2StreamsCurrent, ltmSpdyProfileStatV2StreamsMax=ltmSpdyProfileStatV2StreamsMax, ltmSpdyProfileStatV3StreamsCreated=ltmSpdyProfileStatV3StreamsCreated, ltmSpdyProfileStatV3StreamsCurrent=ltmSpdyProfileStatV3StreamsCurrent, ltmSpdyProfileStatV3StreamsMax=ltmSpdyProfileStatV3StreamsMax, ltmSpdyProfileStatWindowUpdateFramesReceived=ltmSpdyProfileStatWindowUpdateFramesReceived, ltmSpdyProfileStatWindowUpdateFramesSent=ltmSpdyProfileStatWindowUpdateFramesSent, ltmRateFilters=ltmRateFilters, ltmRateFilter=ltmRateFilter, ltmRateFilterNumber=ltmRateFilterNumber, ltmRateFilterTable=ltmRateFilterTable, ltmRateFilterEntry=ltmRateFilterEntry, ltmRateFilterCname=ltmRateFilterCname, ltmRateFilterRate=ltmRateFilterRate, ltmRateFilterCeil=ltmRateFilterCeil, ltmRateFilterBurst=ltmRateFilterBurst, ltmRateFilterPname=ltmRateFilterPname, ltmRateFilterQtype=ltmRateFilterQtype, ltmRateFilterDirection=ltmRateFilterDirection, ltmRateFilterStat=ltmRateFilterStat, ltmRateFilterStatResetStats=ltmRateFilterStatResetStats, ltmRateFilterStatNumber=ltmRateFilterStatNumber, ltmRateFilterStatTable=ltmRateFilterStatTable, ltmRateFilterStatEntry=ltmRateFilterStatEntry, ltmRateFilterStatCname=ltmRateFilterStatCname, ltmRateFilterStatRateBytes=ltmRateFilterStatRateBytes, ltmRateFilterStatBurstBytes=ltmRateFilterStatBurstBytes, ltmRateFilterStatDroppedBytes=ltmRateFilterStatDroppedBytes, ltmRateFilterStatBytesQueued=ltmRateFilterStatBytesQueued, ltmRateFilterStatBytesPerSec=ltmRateFilterStatBytesPerSec, ltmRateFilterStatDropTailPkts=ltmRateFilterStatDropTailPkts, ltmRateFilterStatDropTailBytes=ltmRateFilterStatDropTailBytes, ltmRateFilterStatDropRandPkts=ltmRateFilterStatDropRandPkts, ltmRateFilterStatDropRandBytes=ltmRateFilterStatDropRandBytes, ltmRateFilterStatDropTotPkts=ltmRateFilterStatDropTotPkts, ltmRateFilterStatDropTotBytes=ltmRateFilterStatDropTotBytes, ltmRules=ltmRules, ltmRule=ltmRule, ltmRuleNumber=ltmRuleNumber, ltmRuleTable=ltmRuleTable, ltmRuleEntry=ltmRuleEntry, ltmRuleName=ltmRuleName, ltmRuleDefinition=ltmRuleDefinition, ltmRuleConfigSource=ltmRuleConfigSource, ltmRuleEvent=ltmRuleEvent, ltmRuleEventNumber=ltmRuleEventNumber, ltmRuleEventTable=ltmRuleEventTable, ltmRuleEventEntry=ltmRuleEventEntry, ltmRuleEventName=ltmRuleEventName, ltmRuleEventEventType=ltmRuleEventEventType, ltmRuleEventPriority=ltmRuleEventPriority, ltmRuleEventScript=ltmRuleEventScript, ltmRuleEventStat=ltmRuleEventStat, ltmRuleEventStatResetStats=ltmRuleEventStatResetStats)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmRuleEventStatNumber=ltmRuleEventStatNumber, ltmRuleEventStatTable=ltmRuleEventStatTable, ltmRuleEventStatEntry=ltmRuleEventStatEntry, ltmRuleEventStatName=ltmRuleEventStatName, ltmRuleEventStatEventType=ltmRuleEventStatEventType, ltmRuleEventStatPriority=ltmRuleEventStatPriority, ltmRuleEventStatFailures=ltmRuleEventStatFailures, ltmRuleEventStatAborts=ltmRuleEventStatAborts, ltmRuleEventStatTotalExecutions=ltmRuleEventStatTotalExecutions, ltmRuleEventStatAvgCycles=ltmRuleEventStatAvgCycles, ltmRuleEventStatMaxCycles=ltmRuleEventStatMaxCycles, ltmRuleEventStatMinCycles=ltmRuleEventStatMinCycles, ltmSNATs=ltmSNATs, ltmSnat=ltmSnat, ltmSnatNumber=ltmSnatNumber, ltmSnatTable=ltmSnatTable, ltmSnatEntry=ltmSnatEntry, ltmSnatName=ltmSnatName, ltmSnatSfFlags=ltmSnatSfFlags, ltmSnatType=ltmSnatType, ltmSnatTransAddrType=ltmSnatTransAddrType, ltmSnatTransAddr=ltmSnatTransAddr, ltmSnatSnatpoolName=ltmSnatSnatpoolName, ltmSnatListedEnabledVlans=ltmSnatListedEnabledVlans, ltmSnatTransAddrName=ltmSnatTransAddrName, ltmSnatStat=ltmSnatStat, ltmSnatStatResetStats=ltmSnatStatResetStats, ltmSnatStatNumber=ltmSnatStatNumber, ltmSnatStatTable=ltmSnatStatTable, ltmSnatStatEntry=ltmSnatStatEntry, ltmSnatStatName=ltmSnatStatName, ltmSnatStatClientPktsIn=ltmSnatStatClientPktsIn, ltmSnatStatClientBytesIn=ltmSnatStatClientBytesIn, ltmSnatStatClientPktsOut=ltmSnatStatClientPktsOut, ltmSnatStatClientBytesOut=ltmSnatStatClientBytesOut, ltmSnatStatClientMaxConns=ltmSnatStatClientMaxConns, ltmSnatStatClientTotConns=ltmSnatStatClientTotConns, ltmSnatStatClientCurConns=ltmSnatStatClientCurConns, ltmSnatVlan=ltmSnatVlan, ltmSnatVlanNumber=ltmSnatVlanNumber, ltmSnatVlanTable=ltmSnatVlanTable, ltmSnatVlanEntry=ltmSnatVlanEntry, ltmSnatVlanSnatName=ltmSnatVlanSnatName, ltmSnatVlanVlanName=ltmSnatVlanVlanName, ltmSnatOrigAddr=ltmSnatOrigAddr, ltmSnatOrigAddrNumber=ltmSnatOrigAddrNumber, ltmSnatOrigAddrTable=ltmSnatOrigAddrTable, ltmSnatOrigAddrEntry=ltmSnatOrigAddrEntry, ltmSnatOrigAddrSnatName=ltmSnatOrigAddrSnatName, ltmSnatOrigAddrAddrType=ltmSnatOrigAddrAddrType, ltmSnatOrigAddrAddr=ltmSnatOrigAddrAddr, ltmSnatOrigAddrWildmaskType=ltmSnatOrigAddrWildmaskType, ltmSnatOrigAddrWildmask=ltmSnatOrigAddrWildmask, ltmTransAddr=ltmTransAddr, ltmTransAddrNumber=ltmTransAddrNumber, ltmTransAddrTable=ltmTransAddrTable, ltmTransAddrEntry=ltmTransAddrEntry, ltmTransAddrAddrType=ltmTransAddrAddrType, ltmTransAddrAddr=ltmTransAddrAddr, ltmTransAddrEnabled=ltmTransAddrEnabled, ltmTransAddrConnLimit=ltmTransAddrConnLimit, ltmTransAddrTcpIdleTimeout=ltmTransAddrTcpIdleTimeout, ltmTransAddrUdpIdleTimeout=ltmTransAddrUdpIdleTimeout, ltmTransAddrIpIdleTimeout=ltmTransAddrIpIdleTimeout, ltmTransAddrArpEnabled=ltmTransAddrArpEnabled, ltmTransAddrUnitId=ltmTransAddrUnitId, ltmTransAddrName=ltmTransAddrName, ltmTransAddrStat=ltmTransAddrStat, ltmTransAddrStatResetStats=ltmTransAddrStatResetStats, ltmTransAddrStatNumber=ltmTransAddrStatNumber, ltmTransAddrStatTable=ltmTransAddrStatTable, ltmTransAddrStatEntry=ltmTransAddrStatEntry, ltmTransAddrStatAddrType=ltmTransAddrStatAddrType, ltmTransAddrStatAddr=ltmTransAddrStatAddr, ltmTransAddrStatServerPktsIn=ltmTransAddrStatServerPktsIn, ltmTransAddrStatServerBytesIn=ltmTransAddrStatServerBytesIn, ltmTransAddrStatServerPktsOut=ltmTransAddrStatServerPktsOut, ltmTransAddrStatServerBytesOut=ltmTransAddrStatServerBytesOut, ltmTransAddrStatServerMaxConns=ltmTransAddrStatServerMaxConns, ltmTransAddrStatServerTotConns=ltmTransAddrStatServerTotConns, ltmTransAddrStatServerCurConns=ltmTransAddrStatServerCurConns, ltmTransAddrStatName=ltmTransAddrStatName, ltmSnatPool=ltmSnatPool, ltmSnatPoolNumber=ltmSnatPoolNumber, ltmSnatPoolTable=ltmSnatPoolTable, ltmSnatPoolEntry=ltmSnatPoolEntry, ltmSnatPoolName=ltmSnatPoolName, ltmSnatPoolStat=ltmSnatPoolStat, ltmSnatPoolStatResetStats=ltmSnatPoolStatResetStats, ltmSnatPoolStatNumber=ltmSnatPoolStatNumber, ltmSnatPoolStatTable=ltmSnatPoolStatTable, ltmSnatPoolStatEntry=ltmSnatPoolStatEntry, ltmSnatPoolStatName=ltmSnatPoolStatName, ltmSnatPoolStatServerPktsIn=ltmSnatPoolStatServerPktsIn, ltmSnatPoolStatServerBytesIn=ltmSnatPoolStatServerBytesIn, ltmSnatPoolStatServerPktsOut=ltmSnatPoolStatServerPktsOut, ltmSnatPoolStatServerBytesOut=ltmSnatPoolStatServerBytesOut, ltmSnatPoolStatServerMaxConns=ltmSnatPoolStatServerMaxConns, ltmSnatPoolStatServerTotConns=ltmSnatPoolStatServerTotConns, ltmSnatPoolStatServerCurConns=ltmSnatPoolStatServerCurConns, ltmSnatpoolTransAddr=ltmSnatpoolTransAddr, ltmSnatpoolTransAddrNumber=ltmSnatpoolTransAddrNumber, ltmSnatpoolTransAddrTable=ltmSnatpoolTransAddrTable, ltmSnatpoolTransAddrEntry=ltmSnatpoolTransAddrEntry, ltmSnatpoolTransAddrSnatpoolName=ltmSnatpoolTransAddrSnatpoolName, ltmSnatpoolTransAddrTransAddrType=ltmSnatpoolTransAddrTransAddrType, ltmSnatpoolTransAddrTransAddr=ltmSnatpoolTransAddrTransAddr, ltmSnatpoolTransAddrTransAddrName=ltmSnatpoolTransAddrTransAddrName, ltmVirtualServers=ltmVirtualServers, ltmVirtualServ=ltmVirtualServ, ltmVirtualServNumber=ltmVirtualServNumber, ltmVirtualServTable=ltmVirtualServTable, ltmVirtualServEntry=ltmVirtualServEntry, ltmVirtualServName=ltmVirtualServName, ltmVirtualServAddrType=ltmVirtualServAddrType, ltmVirtualServAddr=ltmVirtualServAddr, ltmVirtualServWildmaskType=ltmVirtualServWildmaskType, ltmVirtualServWildmask=ltmVirtualServWildmask, ltmVirtualServPort=ltmVirtualServPort, ltmVirtualServIpProto=ltmVirtualServIpProto, ltmVirtualServListedEnabledVlans=ltmVirtualServListedEnabledVlans, ltmVirtualServEnabled=ltmVirtualServEnabled, ltmVirtualServConnLimit=ltmVirtualServConnLimit, ltmVirtualServRclass=ltmVirtualServRclass, ltmVirtualServSfFlags=ltmVirtualServSfFlags, ltmVirtualServTranslateAddr=ltmVirtualServTranslateAddr, ltmVirtualServTranslatePort=ltmVirtualServTranslatePort)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmVirtualServType=ltmVirtualServType, ltmVirtualServSnatType=ltmVirtualServSnatType, ltmVirtualServLasthopPoolName=ltmVirtualServLasthopPoolName, ltmVirtualServSnatpoolName=ltmVirtualServSnatpoolName, ltmVirtualServDefaultPool=ltmVirtualServDefaultPool, ltmVirtualServFallbackPersist=ltmVirtualServFallbackPersist, ltmVirtualServActualPvaAccel=ltmVirtualServActualPvaAccel, ltmVirtualServAvailabilityState=ltmVirtualServAvailabilityState, ltmVirtualServEnabledState=ltmVirtualServEnabledState, ltmVirtualServDisabledParentType=ltmVirtualServDisabledParentType, ltmVirtualServStatusReason=ltmVirtualServStatusReason, ltmVirtualServGtmScore=ltmVirtualServGtmScore, ltmVirtualServCmpEnabled=ltmVirtualServCmpEnabled, ltmVirtualServSrcport=ltmVirtualServSrcport, ltmVirtualServVaName=ltmVirtualServVaName, ltmVirtualServSourceAddressTranslationType=ltmVirtualServSourceAddressTranslationType, ltmVirtualServSourceAddressTranslationPool=ltmVirtualServSourceAddressTranslationPool, ltmVirtualServStat=ltmVirtualServStat, ltmVirtualServStatResetStats=ltmVirtualServStatResetStats, ltmVirtualServStatNumber=ltmVirtualServStatNumber, ltmVirtualServStatTable=ltmVirtualServStatTable, ltmVirtualServStatEntry=ltmVirtualServStatEntry, ltmVirtualServStatName=ltmVirtualServStatName, ltmVirtualServStatCsMinConnDur=ltmVirtualServStatCsMinConnDur, ltmVirtualServStatCsMaxConnDur=ltmVirtualServStatCsMaxConnDur, ltmVirtualServStatCsMeanConnDur=ltmVirtualServStatCsMeanConnDur, ltmVirtualServStatNoNodesErrors=ltmVirtualServStatNoNodesErrors, ltmVirtualServStatClientPktsIn=ltmVirtualServStatClientPktsIn, ltmVirtualServStatClientBytesIn=ltmVirtualServStatClientBytesIn, ltmVirtualServStatClientPktsOut=ltmVirtualServStatClientPktsOut, ltmVirtualServStatClientBytesOut=ltmVirtualServStatClientBytesOut, ltmVirtualServStatClientMaxConns=ltmVirtualServStatClientMaxConns, ltmVirtualServStatClientTotConns=ltmVirtualServStatClientTotConns, ltmVirtualServStatClientCurConns=ltmVirtualServStatClientCurConns, ltmVirtualServStatEphemeralPktsIn=ltmVirtualServStatEphemeralPktsIn, ltmVirtualServStatEphemeralBytesIn=ltmVirtualServStatEphemeralBytesIn, ltmVirtualServStatEphemeralPktsOut=ltmVirtualServStatEphemeralPktsOut, ltmVirtualServStatEphemeralBytesOut=ltmVirtualServStatEphemeralBytesOut, ltmVirtualServStatEphemeralMaxConns=ltmVirtualServStatEphemeralMaxConns, ltmVirtualServStatEphemeralTotConns=ltmVirtualServStatEphemeralTotConns, ltmVirtualServStatEphemeralCurConns=ltmVirtualServStatEphemeralCurConns, ltmVirtualServStatPvaPktsIn=ltmVirtualServStatPvaPktsIn, ltmVirtualServStatPvaBytesIn=ltmVirtualServStatPvaBytesIn, ltmVirtualServStatPvaPktsOut=ltmVirtualServStatPvaPktsOut, ltmVirtualServStatPvaBytesOut=ltmVirtualServStatPvaBytesOut, ltmVirtualServStatPvaMaxConns=ltmVirtualServStatPvaMaxConns, ltmVirtualServStatPvaTotConns=ltmVirtualServStatPvaTotConns, ltmVirtualServStatPvaCurConns=ltmVirtualServStatPvaCurConns, ltmVirtualServStatTotRequests=ltmVirtualServStatTotRequests, ltmVirtualServStatTotPvaAssistConn=ltmVirtualServStatTotPvaAssistConn, ltmVirtualServStatCurrPvaAssistConn=ltmVirtualServStatCurrPvaAssistConn, ltmVirtualServStatCycleCount=ltmVirtualServStatCycleCount, ltmVirtualServStatVsUsageRatio5s=ltmVirtualServStatVsUsageRatio5s, ltmVirtualServStatVsUsageRatio1m=ltmVirtualServStatVsUsageRatio1m, ltmVirtualServStatVsUsageRatio5m=ltmVirtualServStatVsUsageRatio5m, ltmVirtualServStatCurrentConnsPerSec=ltmVirtualServStatCurrentConnsPerSec, ltmVirtualServStatDurationRateExceeded=ltmVirtualServStatDurationRateExceeded, ltmVirtualServAuth=ltmVirtualServAuth, ltmVirtualServAuthNumber=ltmVirtualServAuthNumber, ltmVirtualServAuthTable=ltmVirtualServAuthTable, ltmVirtualServAuthEntry=ltmVirtualServAuthEntry, ltmVirtualServAuthVsName=ltmVirtualServAuthVsName, ltmVirtualServAuthProfileName=ltmVirtualServAuthProfileName, ltmVirtualServPersist=ltmVirtualServPersist, ltmVirtualServPersistNumber=ltmVirtualServPersistNumber, ltmVirtualServPersistTable=ltmVirtualServPersistTable, ltmVirtualServPersistEntry=ltmVirtualServPersistEntry, ltmVirtualServPersistVsName=ltmVirtualServPersistVsName, ltmVirtualServPersistProfileName=ltmVirtualServPersistProfileName, ltmVirtualServPersistUseDefault=ltmVirtualServPersistUseDefault, ltmVirtualServProfile=ltmVirtualServProfile, ltmVirtualServProfileNumber=ltmVirtualServProfileNumber, ltmVirtualServProfileTable=ltmVirtualServProfileTable, ltmVirtualServProfileEntry=ltmVirtualServProfileEntry, ltmVirtualServProfileVsName=ltmVirtualServProfileVsName, ltmVirtualServProfileProfileName=ltmVirtualServProfileProfileName, ltmVirtualServProfileType=ltmVirtualServProfileType, ltmVirtualServProfileContext=ltmVirtualServProfileContext, ltmVirtualServPool=ltmVirtualServPool, ltmVirtualServPoolNumber=ltmVirtualServPoolNumber, ltmVirtualServPoolTable=ltmVirtualServPoolTable, ltmVirtualServPoolEntry=ltmVirtualServPoolEntry, ltmVirtualServPoolVirtualServerName=ltmVirtualServPoolVirtualServerName, ltmVirtualServPoolPoolName=ltmVirtualServPoolPoolName, ltmVirtualServPoolRuleName=ltmVirtualServPoolRuleName, ltmVirtualServClonePool=ltmVirtualServClonePool, ltmVirtualServClonePoolNumber=ltmVirtualServClonePoolNumber, ltmVirtualServClonePoolTable=ltmVirtualServClonePoolTable, ltmVirtualServClonePoolEntry=ltmVirtualServClonePoolEntry, ltmVirtualServClonePoolVirtualServerName=ltmVirtualServClonePoolVirtualServerName, ltmVirtualServClonePoolPoolName=ltmVirtualServClonePoolPoolName, ltmVirtualServClonePoolType=ltmVirtualServClonePoolType, ltmVirtualServRule=ltmVirtualServRule, ltmVirtualServRuleNumber=ltmVirtualServRuleNumber, ltmVirtualServRuleTable=ltmVirtualServRuleTable, ltmVirtualServRuleEntry=ltmVirtualServRuleEntry, ltmVirtualServRuleVirtualServerName=ltmVirtualServRuleVirtualServerName, ltmVirtualServRuleRuleName=ltmVirtualServRuleRuleName, ltmVirtualServRulePriority=ltmVirtualServRulePriority, ltmVirtualServVlan=ltmVirtualServVlan, ltmVirtualServVlanNumber=ltmVirtualServVlanNumber, ltmVirtualServVlanTable=ltmVirtualServVlanTable, ltmVirtualServVlanEntry=ltmVirtualServVlanEntry, ltmVirtualServVlanVsName=ltmVirtualServVlanVsName, ltmVirtualServVlanVlanName=ltmVirtualServVlanVlanName, ltmVirtualAddr=ltmVirtualAddr, ltmVirtualAddrNumber=ltmVirtualAddrNumber, ltmVirtualAddrTable=ltmVirtualAddrTable, ltmVirtualAddrEntry=ltmVirtualAddrEntry, ltmVirtualAddrAddrType=ltmVirtualAddrAddrType, ltmVirtualAddrAddr=ltmVirtualAddrAddr, ltmVirtualAddrEnabled=ltmVirtualAddrEnabled, ltmVirtualAddrConnLimit=ltmVirtualAddrConnLimit, ltmVirtualAddrArpEnabled=ltmVirtualAddrArpEnabled, ltmVirtualAddrSfFlags=ltmVirtualAddrSfFlags, ltmVirtualAddrUnitId=ltmVirtualAddrUnitId, ltmVirtualAddrRouteAdvertisement=ltmVirtualAddrRouteAdvertisement, ltmVirtualAddrAvailabilityState=ltmVirtualAddrAvailabilityState, ltmVirtualAddrEnabledState=ltmVirtualAddrEnabledState, ltmVirtualAddrDisabledParentType=ltmVirtualAddrDisabledParentType, ltmVirtualAddrStatusReason=ltmVirtualAddrStatusReason, ltmVirtualAddrServer=ltmVirtualAddrServer, ltmVirtualAddrIsFloat=ltmVirtualAddrIsFloat, ltmVirtualAddrName=ltmVirtualAddrName, ltmVirtualAddrStat=ltmVirtualAddrStat, ltmVirtualAddrStatResetStats=ltmVirtualAddrStatResetStats, ltmVirtualAddrStatNumber=ltmVirtualAddrStatNumber)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmVirtualAddrStatTable=ltmVirtualAddrStatTable, ltmVirtualAddrStatEntry=ltmVirtualAddrStatEntry, ltmVirtualAddrStatAddrType=ltmVirtualAddrStatAddrType, ltmVirtualAddrStatAddr=ltmVirtualAddrStatAddr, ltmVirtualAddrStatClientPktsIn=ltmVirtualAddrStatClientPktsIn, ltmVirtualAddrStatClientBytesIn=ltmVirtualAddrStatClientBytesIn, ltmVirtualAddrStatClientPktsOut=ltmVirtualAddrStatClientPktsOut, ltmVirtualAddrStatClientBytesOut=ltmVirtualAddrStatClientBytesOut, ltmVirtualAddrStatClientMaxConns=ltmVirtualAddrStatClientMaxConns, ltmVirtualAddrStatClientTotConns=ltmVirtualAddrStatClientTotConns, ltmVirtualAddrStatClientCurConns=ltmVirtualAddrStatClientCurConns, ltmVirtualAddrStatPvaPktsIn=ltmVirtualAddrStatPvaPktsIn, ltmVirtualAddrStatPvaBytesIn=ltmVirtualAddrStatPvaBytesIn, ltmVirtualAddrStatPvaPktsOut=ltmVirtualAddrStatPvaPktsOut, ltmVirtualAddrStatPvaBytesOut=ltmVirtualAddrStatPvaBytesOut, ltmVirtualAddrStatPvaMaxConns=ltmVirtualAddrStatPvaMaxConns, ltmVirtualAddrStatPvaTotConns=ltmVirtualAddrStatPvaTotConns, ltmVirtualAddrStatPvaCurConns=ltmVirtualAddrStatPvaCurConns, ltmVirtualAddrStatTotPvaAssistConn=ltmVirtualAddrStatTotPvaAssistConn, ltmVirtualAddrStatCurrPvaAssistConn=ltmVirtualAddrStatCurrPvaAssistConn, ltmVirtualAddrStatName=ltmVirtualAddrStatName, ltmVirtualServHttpClass=ltmVirtualServHttpClass, ltmVsHttpClassNumber=ltmVsHttpClassNumber, ltmVsHttpClassTable=ltmVsHttpClassTable, ltmVsHttpClassEntry=ltmVsHttpClassEntry, ltmVsHttpClassVsName=ltmVsHttpClassVsName, ltmVsHttpClassProfileName=ltmVsHttpClassProfileName, ltmVsHttpClassPriority=ltmVsHttpClassPriority, ltmVirtualServStatus=ltmVirtualServStatus, ltmVsStatusNumber=ltmVsStatusNumber, ltmVsStatusTable=ltmVsStatusTable, ltmVsStatusEntry=ltmVsStatusEntry, ltmVsStatusName=ltmVsStatusName, ltmVsStatusAvailState=ltmVsStatusAvailState, ltmVsStatusEnabledState=ltmVsStatusEnabledState, ltmVsStatusParentType=ltmVsStatusParentType, ltmVsStatusDetailReason=ltmVsStatusDetailReason, ltmVirtualAddrStatus=ltmVirtualAddrStatus, ltmVAddrStatusNumber=ltmVAddrStatusNumber, ltmVAddrStatusTable=ltmVAddrStatusTable, ltmVAddrStatusEntry=ltmVAddrStatusEntry, ltmVAddrStatusAddrType=ltmVAddrStatusAddrType, ltmVAddrStatusAddr=ltmVAddrStatusAddr, ltmVAddrStatusAvailState=ltmVAddrStatusAvailState, ltmVAddrStatusEnabledState=ltmVAddrStatusEnabledState, ltmVAddrStatusParentType=ltmVAddrStatusParentType, ltmVAddrStatusDetailReason=ltmVAddrStatusDetailReason, ltmVAddrStatusName=ltmVAddrStatusName, ltmVirtualModuleScore=ltmVirtualModuleScore, ltmVirtualModuleScoreNumber=ltmVirtualModuleScoreNumber, ltmVirtualModuleScoreTable=ltmVirtualModuleScoreTable, ltmVirtualModuleScoreEntry=ltmVirtualModuleScoreEntry, ltmVirtualModuleScoreVsName=ltmVirtualModuleScoreVsName, ltmVirtualModuleScoreScore=ltmVirtualModuleScoreScore, ltmRst=ltmRst, ltmRstCauseStat=ltmRstCauseStat, ltmRstCauseStatResetStats=ltmRstCauseStatResetStats, ltmRstCauseStatNumber=ltmRstCauseStatNumber, ltmRstCauseStatTable=ltmRstCauseStatTable, ltmRstCauseStatEntry=ltmRstCauseStatEntry, ltmRstCauseStatIndex=ltmRstCauseStatIndex, ltmRstCauseStatRstCause=ltmRstCauseStatRstCause, ltmRstCauseStatCount=ltmRstCauseStatCount, ltmDNS=ltmDNS, ltmDnsCache=ltmDnsCache, ltmDnsCacheNumber=ltmDnsCacheNumber, ltmDnsCacheTable=ltmDnsCacheTable, ltmDnsCacheEntry=ltmDnsCacheEntry, ltmDnsCacheName=ltmDnsCacheName, ltmDnsCacheType=ltmDnsCacheType, ltmDnsCacheMsgCacheSize=ltmDnsCacheMsgCacheSize, ltmDnsCacheRrsetCacheSize=ltmDnsCacheRrsetCacheSize, ltmDnsCacheAnswerDefaultZones=ltmDnsCacheAnswerDefaultZones, ltmDnsCacheUseIpv4=ltmDnsCacheUseIpv4, ltmDnsCacheUseIpv6=ltmDnsCacheUseIpv6, ltmDnsCacheUseUdp=ltmDnsCacheUseUdp, ltmDnsCacheUseTcp=ltmDnsCacheUseTcp, ltmDnsCacheNameserverCacheCount=ltmDnsCacheNameserverCacheCount, ltmDnsCacheMaxConcurrentTcp=ltmDnsCacheMaxConcurrentTcp, ltmDnsCacheMaxConcurrentUdp=ltmDnsCacheMaxConcurrentUdp, ltmDnsCacheUnwantedThreshold=ltmDnsCacheUnwantedThreshold, ltmDnsCacheRouteDomainName=ltmDnsCacheRouteDomainName, ltmDnsCacheIgnoreCd=ltmDnsCacheIgnoreCd, ltmDnsCachePrefetchKey=ltmDnsCachePrefetchKey, ltmDnsCacheKeyCacheSize=ltmDnsCacheKeyCacheSize, ltmDnsCacheRandomizeQueryNameCase=ltmDnsCacheRandomizeQueryNameCase, ltmDnsCacheMaxConcurrentQueries=ltmDnsCacheMaxConcurrentQueries, ltmDnsCacheAllowedQueryTime=ltmDnsCacheAllowedQueryTime, ltmDnsCacheStat=ltmDnsCacheStat, ltmDnsCacheStatResetStats=ltmDnsCacheStatResetStats, ltmDnsCacheStatNumber=ltmDnsCacheStatNumber, ltmDnsCacheStatTable=ltmDnsCacheStatTable, ltmDnsCacheStatEntry=ltmDnsCacheStatEntry, ltmDnsCacheStatName=ltmDnsCacheStatName, ltmDnsCacheStatQueries=ltmDnsCacheStatQueries, ltmDnsCacheStatResponses=ltmDnsCacheStatResponses, ltmDnsCacheStatSync=ltmDnsCacheStatSync, ltmDnsCacheStatAsync=ltmDnsCacheStatAsync, ltmDnsCacheStatFailureResolv=ltmDnsCacheStatFailureResolv, ltmDnsCacheStatFailureCf=ltmDnsCacheStatFailureCf, ltmDnsCacheStatFailureServer=ltmDnsCacheStatFailureServer, ltmDnsCacheStatFailureSend=ltmDnsCacheStatFailureSend, ltmDnsCacheStatMsgHits=ltmDnsCacheStatMsgHits, ltmDnsCacheStatMsgMisses=ltmDnsCacheStatMsgMisses, ltmDnsCacheStatMsgInserts=ltmDnsCacheStatMsgInserts, ltmDnsCacheStatMsgUpdates=ltmDnsCacheStatMsgUpdates, ltmDnsCacheStatMsgEvictions=ltmDnsCacheStatMsgEvictions, ltmDnsCacheStatRrsetHits=ltmDnsCacheStatRrsetHits, ltmDnsCacheStatRrsetMisses=ltmDnsCacheStatRrsetMisses, ltmDnsCacheStatRrsetInserts=ltmDnsCacheStatRrsetInserts, ltmDnsCacheStatRrsetUpdates=ltmDnsCacheStatRrsetUpdates, ltmDnsCacheStatRrsetEvictions=ltmDnsCacheStatRrsetEvictions, ltmDnsCacheStatNameserverHits=ltmDnsCacheStatNameserverHits, ltmDnsCacheStatNameserverMisses=ltmDnsCacheStatNameserverMisses, ltmDnsCacheStatNameserverInserts=ltmDnsCacheStatNameserverInserts, ltmDnsCacheStatNameserverUpdates=ltmDnsCacheStatNameserverUpdates, ltmDnsCacheStatNameserverEvictions=ltmDnsCacheStatNameserverEvictions, ltmDnsCacheStatKeyHits=ltmDnsCacheStatKeyHits, ltmDnsCacheStatKeyMisses=ltmDnsCacheStatKeyMisses, ltmDnsCacheStatKeyInserts=ltmDnsCacheStatKeyInserts, ltmDnsCacheStatKeyUpdates=ltmDnsCacheStatKeyUpdates, ltmDnsCacheStatKeyEvictions=ltmDnsCacheStatKeyEvictions, ltmDnsCacheStatUdpBytesIn=ltmDnsCacheStatUdpBytesIn, ltmDnsCacheStatUdpBytesOut=ltmDnsCacheStatUdpBytesOut, ltmDnsCacheStatUdpPktsIn=ltmDnsCacheStatUdpPktsIn, ltmDnsCacheStatUdpPktsOut=ltmDnsCacheStatUdpPktsOut, ltmDnsCacheStatUdpCurConns=ltmDnsCacheStatUdpCurConns)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmDnsCacheStatUdpMaxConns=ltmDnsCacheStatUdpMaxConns, ltmDnsCacheStatUdpTotConns=ltmDnsCacheStatUdpTotConns, ltmDnsCacheStatTcpBytesIn=ltmDnsCacheStatTcpBytesIn, ltmDnsCacheStatTcpBytesOut=ltmDnsCacheStatTcpBytesOut, ltmDnsCacheStatTcpPktsIn=ltmDnsCacheStatTcpPktsIn, ltmDnsCacheStatTcpPktsOut=ltmDnsCacheStatTcpPktsOut, ltmDnsCacheStatTcpCurConns=ltmDnsCacheStatTcpCurConns, ltmDnsCacheStatTcpMaxConns=ltmDnsCacheStatTcpMaxConns, ltmDnsCacheStatTcpTotConns=ltmDnsCacheStatTcpTotConns, ltmDnsCacheStatUnsolicitedReplies=ltmDnsCacheStatUnsolicitedReplies, ltmDnsCacheStatSecUnchecked=ltmDnsCacheStatSecUnchecked, ltmDnsCacheStatSecBogus=ltmDnsCacheStatSecBogus, ltmDnsCacheStatSecIndeterminate=ltmDnsCacheStatSecIndeterminate, ltmDnsCacheStatSecInsecure=ltmDnsCacheStatSecInsecure, ltmDnsCacheStatSecSecure=ltmDnsCacheStatSecSecure, ltmDnsSecurity=ltmDnsSecurity, ltmDnsSecurityNumber=ltmDnsSecurityNumber, ltmDnsSecurityTable=ltmDnsSecurityTable, ltmDnsSecurityEntry=ltmDnsSecurityEntry, ltmDnsSecurityName=ltmDnsSecurityName, ltmDnsSecurityQueryTypeInclusion=ltmDnsSecurityQueryTypeInclusion, ltmDnsSecurityStat=ltmDnsSecurityStat, ltmDnsSecurityStatResetStats=ltmDnsSecurityStatResetStats, ltmDnsSecurityStatNumber=ltmDnsSecurityStatNumber, ltmDnsSecurityStatTable=ltmDnsSecurityStatTable, ltmDnsSecurityStatEntry=ltmDnsSecurityStatEntry, ltmDnsSecurityStatName=ltmDnsSecurityStatName, ltmDnsSecurityStatFilteredDrops=ltmDnsSecurityStatFilteredDrops, ltmDnsSecurityStatADrops=ltmDnsSecurityStatADrops, ltmDnsSecurityStatAaaaDrops=ltmDnsSecurityStatAaaaDrops, ltmDnsSecurityStatAnyDrops=ltmDnsSecurityStatAnyDrops, ltmDnsSecurityStatCnameDrops=ltmDnsSecurityStatCnameDrops, ltmDnsSecurityStatMxDrops=ltmDnsSecurityStatMxDrops, ltmDnsSecurityStatNsDrops=ltmDnsSecurityStatNsDrops, ltmDnsSecurityStatPtrDrops=ltmDnsSecurityStatPtrDrops, ltmDnsSecurityStatSoaDrops=ltmDnsSecurityStatSoaDrops, ltmDnsSecurityStatSrvDrops=ltmDnsSecurityStatSrvDrops, ltmDnsSecurityStatTxtDrops=ltmDnsSecurityStatTxtDrops, ltmDnsSecurityStatOtherDrops=ltmDnsSecurityStatOtherDrops, ltmDnsQueryFilter=ltmDnsQueryFilter, ltmDnsQueryFilterNumber=ltmDnsQueryFilterNumber, ltmDnsQueryFilterTable=ltmDnsQueryFilterTable, ltmDnsQueryFilterEntry=ltmDnsQueryFilterEntry, ltmDnsQueryFilterName=ltmDnsQueryFilterName, ltmDnsQueryFilterIndex=ltmDnsQueryFilterIndex, ltmDnsQueryFilterType=ltmDnsQueryFilterType, ltmDnsHeaderFilter=ltmDnsHeaderFilter, ltmDnsHeaderFilterNumber=ltmDnsHeaderFilterNumber, ltmDnsHeaderFilterTable=ltmDnsHeaderFilterTable, ltmDnsHeaderFilterEntry=ltmDnsHeaderFilterEntry, ltmDnsHeaderFilterName=ltmDnsHeaderFilterName, ltmDnsHeaderFilterIndex=ltmDnsHeaderFilterIndex, ltmDnsHeaderFilterOpcodeExclusion=ltmDnsHeaderFilterOpcodeExclusion, ltmBWC=ltmBWC, ltmBwcPolicyStat=ltmBwcPolicyStat, ltmBwcPolicyStatResetStats=ltmBwcPolicyStatResetStats, ltmBwcPolicyStatNumber=ltmBwcPolicyStatNumber, ltmBwcPolicyStatTable=ltmBwcPolicyStatTable, ltmBwcPolicyStatEntry=ltmBwcPolicyStatEntry, ltmBwcPolicyStatName=ltmBwcPolicyStatName, ltmBwcPolicyStatBytesPerSec=ltmBwcPolicyStatBytesPerSec, ltmBwcPolicyStatBytesPerSecOut=ltmBwcPolicyStatBytesPerSecOut, ltmBwcPolicyStatBytesIn=ltmBwcPolicyStatBytesIn, ltmBwcPolicyStatBytesPassed=ltmBwcPolicyStatBytesPassed, ltmBwcPolicyStatBytesDropped=ltmBwcPolicyStatBytesDropped, ltmBwcPolicyStatPacketsIn=ltmBwcPolicyStatPacketsIn, ltmBwcPolicyStatPacketsPassed=ltmBwcPolicyStatPacketsPassed, ltmBwcPolicyStatActivePolicies=ltmBwcPolicyStatActivePolicies, ltmBwcPolicyStatInactivePolicies=ltmBwcPolicyStatInactivePolicies, ltmBwcPolicyStatTotalPolicies=ltmBwcPolicyStatTotalPolicies, ltmBwcPolicyStatTimeDataCollected=ltmBwcPolicyStatTimeDataCollected, ltmLSNs=ltmLSNs, ltmLsnPrefix=ltmLsnPrefix, ltmLsnPrefixNumber=ltmLsnPrefixNumber, ltmLsnPrefixTable=ltmLsnPrefixTable, ltmLsnPrefixEntry=ltmLsnPrefixEntry, ltmLsnPrefixName=ltmLsnPrefixName, ltmLsnPrefixAddrType=ltmLsnPrefixAddrType, ltmLsnPrefixAddr=ltmLsnPrefixAddr, ltmLsnPool=ltmLsnPool, ltmLsnPoolNumber=ltmLsnPoolNumber, ltmLsnPoolTable=ltmLsnPoolTable, ltmLsnPoolEntry=ltmLsnPoolEntry, ltmLsnPoolName=ltmLsnPoolName, ltmLsnPoolMemberCount=ltmLsnPoolMemberCount, ltmLsnPoolRouteAdvertisement=ltmLsnPoolRouteAdvertisement, ltmLsnPoolMode=ltmLsnPoolMode, ltmLsnPoolPersistenceMode=ltmLsnPoolPersistenceMode, ltmLsnPoolPersistenceTimeout=ltmLsnPoolPersistenceTimeout, ltmLsnPoolPersistencePrefixLengthIpv4=ltmLsnPoolPersistencePrefixLengthIpv4, ltmLsnPoolPersistencePrefixLengthIpv6=ltmLsnPoolPersistencePrefixLengthIpv6, ltmLsnPoolInboundConnections=ltmLsnPoolInboundConnections, ltmLsnPoolIcmpEcho=ltmLsnPoolIcmpEcho, ltmLsnPoolTranslationPortRangeLow=ltmLsnPoolTranslationPortRangeLow, ltmLsnPoolTranslationPortRangeHigh=ltmLsnPoolTranslationPortRangeHigh, ltmLsnPoolClientConnectionLimit=ltmLsnPoolClientConnectionLimit, ltmLsnPoolEgressInterfacesEnabled=ltmLsnPoolEgressInterfacesEnabled, ltmLsnPoolLogPublisher=ltmLsnPoolLogPublisher, ltmLsnPoolHairpinMode=ltmLsnPoolHairpinMode, ltmLsnPrefixLsnPool=ltmLsnPrefixLsnPool, ltmLsnPrefixLsnPoolNumber=ltmLsnPrefixLsnPoolNumber, ltmLsnPrefixLsnPoolTable=ltmLsnPrefixLsnPoolTable, ltmLsnPrefixLsnPoolEntry=ltmLsnPrefixLsnPoolEntry, ltmLsnPrefixLsnPoolLsnPrefixName=ltmLsnPrefixLsnPoolLsnPrefixName, ltmLsnPrefixLsnPoolLsnPoolName=ltmLsnPrefixLsnPoolLsnPoolName, ltmLsnPrefixLsnPoolPrefixAddressType=ltmLsnPrefixLsnPoolPrefixAddressType, ltmLsnPrefixLsnPoolPrefixAddress=ltmLsnPrefixLsnPoolPrefixAddress, ltmLsnPrefixLsnPoolBackup=ltmLsnPrefixLsnPoolBackup, ltmLsnPrefixLsnPoolBackupNumber=ltmLsnPrefixLsnPoolBackupNumber, ltmLsnPrefixLsnPoolBackupTable=ltmLsnPrefixLsnPoolBackupTable, ltmLsnPrefixLsnPoolBackupEntry=ltmLsnPrefixLsnPoolBackupEntry, ltmLsnPrefixLsnPoolBackupLsnPrefixName=ltmLsnPrefixLsnPoolBackupLsnPrefixName, ltmLsnPrefixLsnPoolBackupLsnPoolName=ltmLsnPrefixLsnPoolBackupLsnPoolName, ltmLsnPrefixLsnPoolBackupPrefixAddressType=ltmLsnPrefixLsnPoolBackupPrefixAddressType, ltmLsnPrefixLsnPoolBackupPrefixAddress=ltmLsnPrefixLsnPoolBackupPrefixAddress, ltmLsnPoolVlan=ltmLsnPoolVlan, ltmLsnPoolVlanNumber=ltmLsnPoolVlanNumber, ltmLsnPoolVlanTable=ltmLsnPoolVlanTable, ltmLsnPoolVlanEntry=ltmLsnPoolVlanEntry, ltmLsnPoolVlanLsnPoolName=ltmLsnPoolVlanLsnPoolName, ltmLsnPoolVlanVlanName=ltmLsnPoolVlanVlanName, ltmLsnPoolStat=ltmLsnPoolStat, ltmLsnPoolStatResetStats=ltmLsnPoolStatResetStats, ltmLsnPoolStatNumber=ltmLsnPoolStatNumber, ltmLsnPoolStatTable=ltmLsnPoolStatTable, ltmLsnPoolStatEntry=ltmLsnPoolStatEntry, ltmLsnPoolStatName=ltmLsnPoolStatName)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmLsnPoolStatTranslationRequests=ltmLsnPoolStatTranslationRequests, ltmLsnPoolStatHairpinConnectionRequests=ltmLsnPoolStatHairpinConnectionRequests, ltmLsnPoolStatActiveTranslations=ltmLsnPoolStatActiveTranslations, ltmLsnPoolStatActiveHairpinConnections=ltmLsnPoolStatActiveHairpinConnections, ltmLsnPoolStatTranslationRequestFailures=ltmLsnPoolStatTranslationRequestFailures, ltmLsnPoolStatPersistenceMappingFailures=ltmLsnPoolStatPersistenceMappingFailures, ltmLsnPoolStatHairpinConnectionFailures=ltmLsnPoolStatHairpinConnectionFailures, ltmLsnPoolStatBackupPoolTranslations=ltmLsnPoolStatBackupPoolTranslations, ltmLsnPoolStatLogAttempts=ltmLsnPoolStatLogAttempts, ltmLsnPoolStatLogFailures=ltmLsnPoolStatLogFailures, bigipLocalTMGroups=bigipLocalTMGroups)

# Groups
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmAttrGroup=ltmAttrGroup, ltmRateFilterGroup=ltmRateFilterGroup, ltmRateFilterStatGroup=ltmRateFilterStatGroup, ltmMirrorPortGroup=ltmMirrorPortGroup, ltmMirrorPortMemberGroup=ltmMirrorPortMemberGroup, ltmNatGroup=ltmNatGroup, ltmNatStatGroup=ltmNatStatGroup, ltmNatVlanGroup=ltmNatVlanGroup, ltmNodeAddrGroup=ltmNodeAddrGroup, ltmNodeAddrStatGroup=ltmNodeAddrStatGroup, ltmPoolGroup=ltmPoolGroup, ltmPoolStatGroup=ltmPoolStatGroup, ltmPoolMemberGroup=ltmPoolMemberGroup, ltmPoolMemberStatGroup=ltmPoolMemberStatGroup, ltmAuthProfileGroup=ltmAuthProfileGroup, ltmAuthProfileStatGroup=ltmAuthProfileStatGroup, ltmClientSslGroup=ltmClientSslGroup, ltmClientSslStatGroup=ltmClientSslStatGroup, ltmServerSslGroup=ltmServerSslGroup, ltmServerSslStatGroup=ltmServerSslStatGroup, ltmConnPoolProfileGroup=ltmConnPoolProfileGroup, ltmConnPoolProfileStatGroup=ltmConnPoolProfileStatGroup, ltmFastL4ProfileGroup=ltmFastL4ProfileGroup, ltmFtpProfileGroup=ltmFtpProfileGroup, ltmHttpProfileGroup=ltmHttpProfileGroup, ltmCompUriInclGroup=ltmCompUriInclGroup, ltmCompUriExclGroup=ltmCompUriExclGroup, ltmCompContTypeInclGroup=ltmCompContTypeInclGroup, ltmCompContTypeExclGroup=ltmCompContTypeExclGroup, ltmHttpProfileStatGroup=ltmHttpProfileStatGroup, ltmPersistProfileGroup=ltmPersistProfileGroup, ltmStreamProfileGroup=ltmStreamProfileGroup, ltmStreamProfileStatGroup=ltmStreamProfileStatGroup, ltmTcpProfileGroup=ltmTcpProfileGroup, ltmTcpProfileStatGroup=ltmTcpProfileStatGroup, ltmUdpProfileGroup=ltmUdpProfileGroup, ltmUdpProfileStatGroup=ltmUdpProfileStatGroup, ltmRuleGroup=ltmRuleGroup, ltmRuleEventGroup=ltmRuleEventGroup, ltmRuleEventStatGroup=ltmRuleEventStatGroup, ltmSnatGroup=ltmSnatGroup, ltmSnatStatGroup=ltmSnatStatGroup, ltmSnatVlanGroup=ltmSnatVlanGroup, ltmSnatOrigAddrGroup=ltmSnatOrigAddrGroup, ltmTransAddrGroup=ltmTransAddrGroup, ltmTransAddrStatGroup=ltmTransAddrStatGroup, ltmSnatPoolGroup=ltmSnatPoolGroup, ltmSnatPoolStatGroup=ltmSnatPoolStatGroup, ltmSnatpoolTransAddrGroup=ltmSnatpoolTransAddrGroup, ltmVirtualServGroup=ltmVirtualServGroup, ltmVirtualServStatGroup=ltmVirtualServStatGroup, ltmVirtualServAuthGroup=ltmVirtualServAuthGroup, ltmVirtualServPersistGroup=ltmVirtualServPersistGroup, ltmVirtualServProfileGroup=ltmVirtualServProfileGroup, ltmVirtualServPoolGroup=ltmVirtualServPoolGroup, ltmVirtualServClonePoolGroup=ltmVirtualServClonePoolGroup, ltmVirtualServRuleGroup=ltmVirtualServRuleGroup, ltmVirtualServVlanGroup=ltmVirtualServVlanGroup, ltmVirtualAddrGroup=ltmVirtualAddrGroup, ltmVirtualAddrStatGroup=ltmVirtualAddrStatGroup, ltmFastHttpProfileGroup=ltmFastHttpProfileGroup, ltmFastHttpProfileStatGroup=ltmFastHttpProfileStatGroup, ltmXmlProfileGroup=ltmXmlProfileGroup, ltmXmlProfileStatGroup=ltmXmlProfileStatGroup, ltmRamUriExclGroup=ltmRamUriExclGroup, ltmRamUriInclGroup=ltmRamUriInclGroup, ltmRamUriPinGroup=ltmRamUriPinGroup, ltmDnsProfileGroup=ltmDnsProfileGroup, ltmHttpClassGroup=ltmHttpClassGroup, ltmHttpClassHostGroup=ltmHttpClassHostGroup, ltmHttpClassUriGroup=ltmHttpClassUriGroup, ltmHttpClassHeadGroup=ltmHttpClassHeadGroup, ltmHttpClassCookGroup=ltmHttpClassCookGroup, ltmHttpClassStatGroup=ltmHttpClassStatGroup, ltmIiopProfileGroup=ltmIiopProfileGroup, ltmIiopProfileStatGroup=ltmIiopProfileStatGroup, ltmRtspProfileGroup=ltmRtspProfileGroup, ltmRtspProfileStatGroup=ltmRtspProfileStatGroup, ltmSctpProfileGroup=ltmSctpProfileGroup, ltmSctpProfileStatGroup=ltmSctpProfileStatGroup, ltmUserStatProfileGroup=ltmUserStatProfileGroup, ltmUserStatProfileStatGroup=ltmUserStatProfileStatGroup, ltmVsHttpClassGroup=ltmVsHttpClassGroup, ltmNodeAddrStatusGroup=ltmNodeAddrStatusGroup, ltmPoolStatusGroup=ltmPoolStatusGroup, ltmPoolMbrStatusGroup=ltmPoolMbrStatusGroup, ltmVsStatusGroup=ltmVsStatusGroup, ltmVAddrStatusGroup=ltmVAddrStatusGroup, ltmFallbackStatusGroup=ltmFallbackStatusGroup, ltmRespHeadersPermGroup=ltmRespHeadersPermGroup, ltmEncCookiesGroup=ltmEncCookiesGroup, ltmFastL4ProfileStatGroup=ltmFastL4ProfileStatGroup, ltmSipProfileGroup=ltmSipProfileGroup, ltmSipProfileStatGroup=ltmSipProfileStatGroup, ltmVirtualModuleScoreGroup=ltmVirtualModuleScoreGroup, ltmIsessionProfileGroup=ltmIsessionProfileGroup, ltmIsessionProfileStatGroup=ltmIsessionProfileStatGroup, ltmXmlProfileXpathQueriesGroup=ltmXmlProfileXpathQueriesGroup, ltmXmlProfileNamespaceMappingsGroup=ltmXmlProfileNamespaceMappingsGroup, ltmHttpCompressionProfileGroup=ltmHttpCompressionProfileGroup, ltmHttpcompUriInclGroup=ltmHttpcompUriInclGroup, ltmHttpcompUriExclGroup=ltmHttpcompUriExclGroup, ltmHttpcompContTypeInclGroup=ltmHttpcompContTypeInclGroup, ltmHttpcompContTypeExclGroup=ltmHttpcompContTypeExclGroup, ltmHttpCompressionProfileStatGroup=ltmHttpCompressionProfileStatGroup, ltmWebAccelerationProfileGroup=ltmWebAccelerationProfileGroup, ltmWebaccCacheUriExclGroup=ltmWebaccCacheUriExclGroup, ltmWebaccCacheUriInclGroup=ltmWebaccCacheUriInclGroup, ltmWebaccCacheUriPinGroup=ltmWebaccCacheUriPinGroup, ltmWebAccelerationProfileStatGroup=ltmWebAccelerationProfileStatGroup, ltmRstCauseStatGroup=ltmRstCauseStatGroup, ltmWebaccCacheUriOverGroup=ltmWebaccCacheUriOverGroup, ltmDnsCacheGroup=ltmDnsCacheGroup, ltmDnsCacheStatGroup=ltmDnsCacheStatGroup, ltmDnsProfileStatGroup=ltmDnsProfileStatGroup, ltmDosProfileGroup=ltmDosProfileGroup, ltmDosApplicationGroup=ltmDosApplicationGroup, ltmDosWhiteIpGroup=ltmDosWhiteIpGroup, ltmDnsSecurityGroup=ltmDnsSecurityGroup, ltmDnsSecurityStatGroup=ltmDnsSecurityStatGroup, ltmBwcPolicyStatGroup=ltmBwcPolicyStatGroup, ltmDnsQueryFilterGroup=ltmDnsQueryFilterGroup, ltmDnsHeaderFilterGroup=ltmDnsHeaderFilterGroup, ltmLsnPrefixGroup=ltmLsnPrefixGroup, ltmLsnPoolGroup=ltmLsnPoolGroup, ltmLsnPrefixLsnPoolGroup=ltmLsnPrefixLsnPoolGroup)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmLsnPrefixLsnPoolBackupGroup=ltmLsnPrefixLsnPoolBackupGroup, ltmLsnPoolVlanGroup=ltmLsnPoolVlanGroup, ltmLsnPoolStatGroup=ltmLsnPoolStatGroup, ltmSpdyProfileGroup=ltmSpdyProfileGroup, ltmSpdyProfileProtocolVersionsGroup=ltmSpdyProfileProtocolVersionsGroup, ltmSpdyProfileStatGroup=ltmSpdyProfileStatGroup)

# Compliances
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", bigipLocalTMCompliance=bigipLocalTMCompliance)
