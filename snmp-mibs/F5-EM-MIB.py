# PySNMP SMI module. Autogenerated from smidump -f python F5-EM-MIB
# by libsmi2pysnmp-0.1.3 at Fri May 30 18:17:57 2014,
# Python version sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( LongDisplayString, bigipCompliances, bigipGroups, f5, ) = mibBuilder.importSymbols("F5-BIGIP-COMMON-MIB", "LongDisplayString", "bigipCompliances", "bigipGroups", "f5")
( InetAddress, InetAddressType, ) = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Counter32, Counter64, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Opaque, TimeTicks, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Opaque", "TimeTicks", "enterprises")
( DateAndTime, DisplayString, MacAddress, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "MacAddress", "TextualConvention")

# Objects

enterpriseManagement = ModuleIdentity((1, 3, 6, 1, 4, 1, 3375, 3)).setRevisions(("2012-02-07 20:39",))
if mibBuilder.loadTexts: enterpriseManagement.setOrganization("F5 Networks, Inc.")
if mibBuilder.loadTexts: enterpriseManagement.setContactInfo("postal: F5 Networks, Inc. \n401 Elliott Ave. West \nSeattle, WA 98119\nphone:  (206) 272-5555\nemail:  support@f5.com")
if mibBuilder.loadTexts: enterpriseManagement.setDescription("Top-level infrastructure of the F5 enterprise MIB tree.")
emDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 1))
emDeviceList = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1))
deviceNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceNumber.setDescription("The number of device entries in the table.")
deviceEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1, 2))
if mibBuilder.loadTexts: deviceEntryTable.setDescription("The table of device.")
deviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1, 2, 1)).setIndexNames((0, "F5-EM-MIB", "deviceName"))
if mibBuilder.loadTexts: deviceEntry.setDescription("Columns in the deviceEntry Table")
deviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceName.setDescription("The name of the device.")
deviceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAddressType.setDescription("The type of IP address of the device.")
deviceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 1, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceAddress.setDescription("The IP address of the device.")
emDeviceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 2))
groupNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupNumber.setDescription("The number of group entries in the table.")
groupEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 3, 2, 2))
if mibBuilder.loadTexts: groupEntryTable.setDescription("The table of groups.")
groupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 3, 2, 2, 1)).setIndexNames((0, "F5-EM-MIB", "groupName"))
if mibBuilder.loadTexts: groupEntry.setDescription("Columns in the groupEntry Table")
groupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupName.setDescription("A name for a group of managed devices.")
groupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupDescription.setDescription("A description of a group of managed devices.")
emImages = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 3))
imageNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageNumber.setDescription("The number of image entries in the table.")
imageEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 3, 3, 2))
if mibBuilder.loadTexts: imageEntryTable.setDescription("The table of images.")
imageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 3, 3, 2, 1)).setIndexNames((0, "F5-EM-MIB", "imageVersion"))
if mibBuilder.loadTexts: imageEntry.setDescription("Columns in the imageEntry Table")
imageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageVersion.setDescription("The software version, including build number and hotfixes.")
imageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageDescription.setDescription("Further details about the contents of an iso image.")
emArchives = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 4))
archiveNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveNumber.setDescription("The number of archive entries in the table.")
archiveEntryTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2))
if mibBuilder.loadTexts: archiveEntryTable.setDescription("The table of archives.")
archiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1)).setIndexNames((0, "F5-EM-MIB", "archiveSourceDevice"))
if mibBuilder.loadTexts: archiveEntry.setDescription("Columns in the archiveEntry Table")
archiveSourceDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveSourceDevice.setDescription("The name of the device from which the archive came.")
archiveProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveProduct.setDescription("The type of software running on the device from which the\narchive came.")
archiveVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveVersion.setDescription("The software version, including build number, of the device\nfrom which the archive came.")
archiveTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveTimeStamp.setDescription("The date and time that the archive was created.")
archiveFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveFilename.setDescription("The name of the file, not including path, of the device archive.")
archiveDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 3, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: archiveDescription.setDescription("User supplied details regarding the archive.")
emGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 5))
emMaxConcurrentUpdates = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emMaxConcurrentUpdates.setDescription("The maximum number of simultaneous updates.")
emRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emRefreshInterval.setDescription("The interval between device status updates.")
emVersion = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emVersion.setDescription("Version of the EM software.")
emAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 6))
emAlerts = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0))
emAlertConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 0))
emAlertObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 3, 6, 1))
emAlertObjMsg = MibScalar((1, 3, 6, 1, 4, 1, 3375, 3, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emAlertObjMsg.setDescription("The additional information about the related alert.")

# Augmentions

# Notifications

emDeviceConfigSettingChanged = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 0, 1)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emDeviceConfigSettingChanged.setDescription("A configuration has been changed on a device.")
emDeviceUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 1)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emDeviceUnreachable.setDescription("An managed device is unreachable.")
emSoftwareInstallComplete = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 2)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emSoftwareInstallComplete.setDescription("Software installation has completed.")
emSoftwareInstallFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 3)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emSoftwareInstallFailed.setDescription("Software installation has failed.")
emDeviceClockSkew = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 4)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emDeviceClockSkew.setDescription("A device clock is out of sync with EM.")
emDiskUsage = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 5)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emDiskUsage.setDescription("A disk partition is exceeding configured usage limits.")
emMemoryUsage = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 6)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emMemoryUsage.setDescription("The system memory is exceeding configured usage limits.")
emHotfixInstallComplete = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 7)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emHotfixInstallComplete.setDescription("A hotfix has been installed on a managed device.")
emHotfixInstallFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 8)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emHotfixInstallFailed.setDescription("A hotfix installation has failed.")
emCpuUsage = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 9)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emCpuUsage.setDescription("The cpu is exceeding configured usage limits.")
emCertificateExpiration = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 10)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emCertificateExpiration.setDescription("A device certificate will expire soon.")
emScheduledArchiveFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 11)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emScheduledArchiveFailed.setDescription("A scheduled configuration archive failed.")
emDeviceActiveMode = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 12)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emDeviceActiveMode.setDescription("A device changed from non-ACTIVE to ACTIVE state.")
emDeviceStandbyMode = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 13)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emDeviceStandbyMode.setDescription("A device changed from non-STANDBY to STANDBY state.")
emDeviceConfigSync = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 14)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emDeviceConfigSync.setDescription("A device's configuration is out of sync with its peer.")
emRaidDriveFailureDetected = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 15)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emRaidDriveFailureDetected.setDescription("The system RAID drive failure has been detected.")
emRaidDriveRebuildComplete = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 16)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emRaidDriveRebuildComplete.setDescription("The system RAID drive rebuild is complete.")
emHaSyncFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 19)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emHaSyncFailed.setDescription("EM HA Sync has failed.")
emASMSigInstallComplete = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 20)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emASMSigInstallComplete.setDescription("ASM signature has been installed on a managed device.")
emASMSigInstallFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 21)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emASMSigInstallFailed.setDescription("ASM signature installation has failed.")
emASMSigUpdateAvailable = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 22)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emASMSigUpdateAvailable.setDescription("ASM signature update is available.")
emASMSigUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 23)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emASMSigUpdateFailed.setDescription("ASM signature update failed.")
emPerformanceStorageDays = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 25)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emPerformanceStorageDays.setDescription("Performance storage capacity is about to fall below configured number of days.")
emPerformanceStorageCap = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 26)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emPerformanceStorageCap.setDescription("Performance storage capacity is lower than the amount of space reserved.")
emPerformanceThreshold = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 27)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emPerformanceThreshold.setDescription("Threshold has been violated for a performance-data object.")
emSchedBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 28)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emSchedBackupFailed.setDescription("Scheduled performance data backup has failed.")
emStatsCollectionRateCap = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 29)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emStatsCollectionRateCap.setDescription("Performance-monitoring data collection rate exceeds recommended limit")
emDeviceOfflineMode = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 30)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emDeviceOfflineMode.setDescription("A device changed from non-OFFLINE to OFFLINE state.")
emDeviceForcedOfflineMode = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 31)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emDeviceForcedOfflineMode.setDescription("A device changed from non-FORCED OFFLINE to FORCED OFFLINE state.")
emServiceContractExpiry = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 32)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emServiceContractExpiry.setDescription("Device service contract will expire soon.")
emStatsDBConnectivityLost = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 33)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emStatsDBConnectivityLost.setDescription("Statistics database connectivity is lost.")
emGatherServiceContractFailure = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 34)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emGatherServiceContractFailure.setDescription("Gathering service contract end date failed.")
emDeviceImpaired = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 35)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emDeviceImpaired.setDescription("An managed device is impaired.")
emStatsDBConnectivityRestored = NotificationType((1, 3, 6, 1, 4, 1, 3375, 3, 6, 0, 36)).setObjects(*(("F5-EM-MIB", "emAlertObjMsg"), ) )
if mibBuilder.loadTexts: emStatsDBConnectivityRestored.setDescription("Statistics database connectivity is restored.")

# Exports

# Module identity
mibBuilder.exportSymbols("F5-EM-MIB", PYSNMP_MODULE_ID=enterpriseManagement)

# Objects
mibBuilder.exportSymbols("F5-EM-MIB", enterpriseManagement=enterpriseManagement, emDevices=emDevices, emDeviceList=emDeviceList, deviceNumber=deviceNumber, deviceEntryTable=deviceEntryTable, deviceEntry=deviceEntry, deviceName=deviceName, deviceAddressType=deviceAddressType, deviceAddress=deviceAddress, emDeviceGroups=emDeviceGroups, groupNumber=groupNumber, groupEntryTable=groupEntryTable, groupEntry=groupEntry, groupName=groupName, groupDescription=groupDescription, emImages=emImages, imageNumber=imageNumber, imageEntryTable=imageEntryTable, imageEntry=imageEntry, imageVersion=imageVersion, imageDescription=imageDescription, emArchives=emArchives, archiveNumber=archiveNumber, archiveEntryTable=archiveEntryTable, archiveEntry=archiveEntry, archiveSourceDevice=archiveSourceDevice, archiveProduct=archiveProduct, archiveVersion=archiveVersion, archiveTimeStamp=archiveTimeStamp, archiveFilename=archiveFilename, archiveDescription=archiveDescription, emGlobals=emGlobals, emMaxConcurrentUpdates=emMaxConcurrentUpdates, emRefreshInterval=emRefreshInterval, emVersion=emVersion, emAlert=emAlert, emAlerts=emAlerts, emAlertConfigObjects=emAlertConfigObjects, emAlertObjects=emAlertObjects, emAlertObjMsg=emAlertObjMsg)

# Notifications
mibBuilder.exportSymbols("F5-EM-MIB", emDeviceConfigSettingChanged=emDeviceConfigSettingChanged, emDeviceUnreachable=emDeviceUnreachable, emSoftwareInstallComplete=emSoftwareInstallComplete, emSoftwareInstallFailed=emSoftwareInstallFailed, emDeviceClockSkew=emDeviceClockSkew, emDiskUsage=emDiskUsage, emMemoryUsage=emMemoryUsage, emHotfixInstallComplete=emHotfixInstallComplete, emHotfixInstallFailed=emHotfixInstallFailed, emCpuUsage=emCpuUsage, emCertificateExpiration=emCertificateExpiration, emScheduledArchiveFailed=emScheduledArchiveFailed, emDeviceActiveMode=emDeviceActiveMode, emDeviceStandbyMode=emDeviceStandbyMode, emDeviceConfigSync=emDeviceConfigSync, emRaidDriveFailureDetected=emRaidDriveFailureDetected, emRaidDriveRebuildComplete=emRaidDriveRebuildComplete, emHaSyncFailed=emHaSyncFailed, emASMSigInstallComplete=emASMSigInstallComplete, emASMSigInstallFailed=emASMSigInstallFailed, emASMSigUpdateAvailable=emASMSigUpdateAvailable, emASMSigUpdateFailed=emASMSigUpdateFailed, emPerformanceStorageDays=emPerformanceStorageDays, emPerformanceStorageCap=emPerformanceStorageCap, emPerformanceThreshold=emPerformanceThreshold, emSchedBackupFailed=emSchedBackupFailed, emStatsCollectionRateCap=emStatsCollectionRateCap, emDeviceOfflineMode=emDeviceOfflineMode, emDeviceForcedOfflineMode=emDeviceForcedOfflineMode, emServiceContractExpiry=emServiceContractExpiry, emStatsDBConnectivityLost=emStatsDBConnectivityLost, emGatherServiceContractFailure=emGatherServiceContractFailure, emDeviceImpaired=emDeviceImpaired, emStatsDBConnectivityRestored=emStatsDBConnectivityRestored)

